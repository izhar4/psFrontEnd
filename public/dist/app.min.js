
var psApp=angular.module('pureSpectrumApp',['ui.router','ngCookies','ngProgressLite','cgNotify','LocalStorageModule','ngAnimate', 'datatables','ngFlag','ngFileUpload','datatables.fixedheader', 'infinite-scroll', 'angularFileUpload','pascalprecht.translate', 'ngCsvImport','vcRecaptcha', 'daterangepicker', 'toggle-switch', 'selectize', 'ngFileSaver', 'contenteditable']);

psApp.config(['$stateProvider', '$urlRouterProvider','$httpProvider','$translateProvider', function($stateProvider, $urlRouterProvider, $httpProvider, $translateProvider) {
    $httpProvider.interceptors.push('TokenInterceptor');

    //$httpProvider.interceptors.push('LoadingInterceptor');
    $urlRouterProvider.otherwise('/');
    $stateProvider.
        state('login', {
            url:'/login',
            templateUrl: 'login.html',
            access: { requiredAuthentication: false },
            data : { pageTitle: 'pureSpectrum | Login' }
        })
        .state('home',{
            url:'/dashboard',
            templateUrl:'home.html',
            access: { requiredAuthentication: true },
            data : { pageTitle: 'pureSpectrum | Home' }
        })
        .state('forgotPassword',{
            url:'/forgotPassword',
            templateUrl:'forgotPassword.html'
           
        })
        .state('resetforgotPassword',{
            url:'/resetforgotPassword/{token}',
            templateUrl:'resetForgotPassword.html'
           
        })
         .state('invalidpasswordlink',{
            url:'/invalidpasswordlink/{locked}',
            templateUrl:'invalidPasswordLink.html'
           
        })
        .state('editSurvey',{
            url:'/dashboard/{key}',
            templateUrl:'home.html',
            access: { requiredAuthentication: true }
        })
        .state('managecompany',{
            url:'/managecompanies',
            templateUrl:'manageCompanies.html',
            access: { requiredAuthentication: true }
        })
        .state('managesupplier',{
            url:'/manageSuppliers',
            templateUrl:'manageSuppliers.html',
            access: { requiredAuthentication: true }
        })
        .state('surveySuccess',{
            url : '/surveySuccess',
            templateUrl: 'surveysuccess.html'
        })
        .state('choosesuppliers',{
            url:'/choosesuppliers/{surveyid}/{edit}',
            templateUrl:'choosesuppliers.html'
        })
        .state('launchsurvey',{
            url:'/launchsurvey/{surveyid}/{edit}',
            templateUrl:'launchsurvey.html'
        })
        .state('manageBuyerSettings',{
            url:'/manageBuyerSettings',
            templateUrl:'manageBuyerSettings.html'
        })
	   .state('resetPassword',{
            url:'/resetPassword',
            templateUrl:'resetPassword.html'
        })
       .state('downloadReport',{
            url:'/downloadReport',
            templateUrl:'downloadReports.html'
        })
        .state('addAdvQuestion',{
            url:'/addAdvQuestion',
            templateUrl:'addAdvQuestion.html',
            access: { requiredAuthentication: true }
        })
        .state('reconcile',{
            url:'/reconcile',
            templateUrl:'reconcile.html',
            controller: 'reconcileCtrl',
            access: { requiredAuthentication: true }
        })
        .state('reportsDashboard',{
            url:'/reportsDashboard',
            templateUrl:'reportsDashboard.html',
            controller: 'reportsDashboardCtrl',
            access: { requiredAuthentication: true }
        })
        .state('/', {
            url: '/',
            controller: 'indexController',
            access: { requiredAuthentication: true }
        })
        .state('updatesurvey',{
            url : '/updatesurvey/{key}/{edit}?{locale}',
            reloadOnSearch:false,
            templateUrl:'CreateSurveys.html',
            access: { requiredAuthentication: true }
        })
        .state('buyerRedirectGuide',{
            url : '/buyerRedirectGuide',
            templateUrl:'buyerRedirectGuide.html',
            access: { requiredAuthentication: true }
        })
        .state('dynstate',{
            url : '/{id}?{locale}&{survey_id}',
            templateUrl: function (stateParams){
                return   stateParams.id + '.html';
            },
            access: { requiredAuthentication: true }
        })
        .state('404',{
            url : '/404',
            templateUrl: '404.html'
        })
        .state('decipher',{
            url : '/importDecipher',
            templateUrl: 'importDecipher.html',
            access: { requiredAuthentication: true }
        })
        

        // language transalte
        $translateProvider.translations('en', {
            'tr_survey_title': 'Survey Title'
        });

        $translateProvider.preferredLanguage('en');
        
}]);


psApp.run(['$rootScope','$location','$state','$window','authenticationService','localStorageService','$cookies', 'user', 'notify', 'createSurvey', '$timeout', 'commonApi', function($rootScope, $location, $state, $window, authenticationService, localStorageService, $cookies, user, notify, createSurvey, $timeout, commonApi) {
    // Calling masterData on app Run
    /*commonApi.getAllMasterData().success(function(masterData){
        if(masterData.apiStatus == 'Success'){
            $rootScope.masterDatas =  masterData.values;
            console.log('app.js ',$rootScope.masterDatas);
        }else{
            $state.go("dataNotFound");
            //notify({message: 'Error in loading MasterData', classes: 'alert-danger', duration: 2000});
        }
    }).error(function (err) {
        console.log('err '+JSON.stringify(err));
        $state.go("dataNotFound");
        //notify({message: 'Error in loading MasterData', classes: 'alert-danger', duration: 2000});
    });*/

    /*createSurvey.getMasterDataByCountryLang().then(
      function(response){
        if(response && response.data && response.data.apiStatus == "Success"){
            console.log(' IN APPJS ');
          masterDataService.set(response.data.values);
        }
      }, function(err){
        console.log('err ',JSON.stringify(err));
      }
    );*/

    /*toState.resolve.promise = [
        '$q',
        function($q) {
            var defer = $q.defer();
            $http.makeSomeAPICallOrWhatever().then(function (resp) {
                if(resp = thisOrThat) {
                    doSomeThingsHere();
                    defer.resolve();
                } else {
                    doOtherThingsHere();
                    defer.resolve();
                }
            });
            return defer.promise;
        }
    ]*/

    $rootScope.$on("$stateChangeStart", function(event, toState, toParams, fromState, fromParams) {
       
        //Track user with FS
        var userData  = localStorageService.get('logedInUser');
        //console.log('userData ',JSON.stringify(userData));
        if(userData && $window.FS) {
            $window.FS.identify(userData.eml, {
              displayName: userData.usrName,
              email: userData.eml
            });
        }

        //limit notifications to only one at a time
        notify.config({maximumOpen : 1});

        $rootScope.$state = $state;
        var localtoken= localStorageService.get('localStorageToken');
        //if token is not available than redirect to login
        //redirect only if both isAuthenticated is false and no token is set
        if (toState != null && toState.access != null && toState.access.requiredAuthentication
            && !authenticationService.isAuthenticated && !localtoken) {
            event.preventDefault();
            $state.go("login");
        }
        if(toState != null &&  toState.url!=null && (toState.url=='/' || toState.url=='') && (authenticationService.isAuthenticated || $cookies.token  || localtoken)) {
            $rootScope.loggedInUser = authenticationService.loggedInUser;
            event.preventDefault();
            $state.go("home");

        }
        if(toState.url=="/login" && (authenticationService.isAuthenticated  ||  $cookies.token || localtoken)){
            $window.location.href="/#/";
        }

        // To prevent the survey getting launched twice by accessing urls
        if(toState.url == "/launchsurvey/{surveyid}/{edit}"){
            createSurvey.getSurveyStatus(toParams.surveyid).success(function(result) {
                if(toParams.edit == "" && result.surveyStatus != 11){
                    $timeout(function(){
                        $state.go("404");
                    }, 0);
                }else if(toParams.edit != "" && result.surveyStatus == 11){
                    $timeout(function(){
                        $state.go("404");
                    }, 0);
                }
            }).error(function(err){
                console.log(err);
            });
        }
        if(toState.url == "/choosesuppliers/{surveyid}/{edit}"){
            createSurvey.getSurveyStatus(toParams.surveyid).success(function(result) {
                if(toParams.edit == "" && result.surveyStatus != 11){
                    $timeout(function(){
                        $state.go("404");
                    }, 0);
                }else if(toParams.edit != "" && result.surveyStatus == 11){
                    $timeout(function(){
                        $state.go("404");
                    }, 0);
                }
            }).error(function(err){
                console.log(err);
            });
        }
        if(toState.url == "/updatesurvey/{key}/{edit}?{locale}"){
            createSurvey.getSurveyStatus(toParams.key).success(function(result) {
                if(toParams.edit == "" && result.surveyStatus != 11){
                    $timeout(function(){
                        $state.go("404");
                    }, 0);
                }else if(toParams.edit != "" && result.surveyStatus == 11){
                    $timeout(function(){
                        $state.go("404");
                    }, 0);
                }
            }).error(function(err){
                console.log(err);
            });
        }
        if((toState.url == "/addAdvQuestion" || toState.url == "/reportsDashboard") && userData.operatorAcssLvls == "none"){
            $timeout(function(){
                $state.go("404");
            }, 0);
            
        }
    });

}]);




/**
 * Created by Parveen on 3/3/2016.
 */
var config = config || {};
//PD-1523
var transStatus = [
   {name: "PS Drop", id: 11},
   {name: "PS QuotaFull Core", id: 12},
   {name: "PS Termination Core", id: 13},
   {name: "PS Side In Progress", id: 14},
   {name: "PS Quality", id: 15},
   {name: "Buyer side In Progress", id: 16},
   {name: "Buyer QuotaFull", id: 17},
   {name: "Buyer Termination", id: 18},
   {name: "Buyer Drop", id: 19},
   {name: "Buyer Quality Termination", id: 20},
   {name: "Complete", id: 21},
   {name: "PS Survey Closed Termination", id: 22},
   {name: "PS Survey Paused Termination", id: 23},
   {name: "PS Unopened Quota Term", id: 24},
   {name: "PS Supplier Allocation Full", id: 25},
   {name: "PS Past Participation Fail", id: 26},
   {name: "PS Supplier Quota Allocation Full", id: 27},
   {name: "PS_Invalid_Survey", id: 28},
   {name: "PS LOI Threshold Failure", id: 29},
   {name: "Buyer Security", id: 30},
   {name: "Buyer Hash Security", id: 31},
   {name: "PS Grouping Termination", id: 32},
   {name: "Buyer Reconciliation Reject", id: 33},
   {name: "PS Temp Exclusion", id: 34},
   {name: "PS No Matched Quotas", id: 35},
   {name: "PS Max Ip Throttling Termination", id: 36},
   {name: "PS Quota Throttling Termination", id: 37},
   {name: "PS PSID Geo Termination", id: 38},
   {name: "PS TrueSample Fail", id: 39},
   {name: "PS GeoIP Fail", id: 40},
   {name: "PS Bot Fail", id: 41},
   {name: "PS BlackList Fail", id: 42},
   {name: "PS Anonymous Fail", id: 43},
   {name: "PS Include Fail", id: 44},
   {name: "PS Termination Extended", id: 45},
   {name: "PS Termination Custom", id: 46},
   {name: "PS QuotaFull Extended", id: 47},
   {name: "PS QuotaFull Custom", id: 48},
]

config.development ={
    app: 'pureSpectrumApp-Dev',
    cmp: [19, 2, 4, 137, 141], //PD-1145
    overridCmp : [141, 189], //PD-1096
    //supplierAccordian : [141, 20], //PD-1227
    maxinProgress : [], //PD-1360 puresepctrum buyer
    pureSpecturm : {
        url:'http://localhost:3000',
        activityUrl:'http://localhost:7070',
        socketUrl:'http://localhost:8889',
        decipherUrl: 'http://localhost:3030'
    },
    feasibility: {
        url: 'http://localhost:7000'
    },
    advanceTarget : [], //PD-1344 critical mix, research now, ugam, smith_id, morpace, puresepctrum buyer, purespectrum demo buyer, marketCast
    bera : [], // ps_id, cm_id, morpace, suresh_id
    languageDefault: 1,
    countryDefault: 1,
    BSEC: 'a70mx8',
    CAPTCHA_KEY:'',
    childMasterQual:{
        gender: 220,
        age: 230,
        id: 218,
        noChildren : 111,
        haveChildren : 112,
        ageUnitYr: 311,
        ageUnitMnth: 312
    },
    zipcodesQual:{
        id:229
    },
    countryInQuals:{
        'gender':['US','CA','AU','UK','FR','DE','JP','PH','BR','CN','IN','PL','KR','NG','ID','VN','RU','TH','UA','IE','HK','IT','MX','AR','CL','CO','ES', 'SA', 'TW', 'AE', 'MY', 'NL', 'BE', 'NO', 'DK', 'ZA', 'SE', 'TR'],
        'age':['US','CA','AU','UK','FR','DE','JP','PH','BR','CN','IN','PL','KR','NG','ID','VN','RU','TH','UA','IE','HK','IT','MX','AR','CL','CO','ES', 'SA', 'TW', 'AE', 'MY', 'NL', 'BE', 'NO', 'DK', 'ZA', 'SE', 'TR'],
        'hhi':['US','CA','AU','UK','FR','DE','JP','PH','BR','CN','IN','PL','KR','NG','ID','UA','IE','HK','IT','MX','AR','CL','CO','ES', 'TW', 'AE', 'MY', 'NL', 'BE', 'NO', 'DK', 'ZA', 'SE', 'TR'],
        'race':['US','CA'],
        'bera':['US','CA'],
        'relationship':['US','CA','IT','MX','AR','CL','CO','ES'],
        'children':['US','CA','AU','UK','FR','DE','JP','PH','BR','CN','IN','PL','KR','NG','ID','UA','IE','HK','IT','MX','AR','CL','CO','ES', 'TW', 'MY', 'NL', 'BE', 'NO', 'DK', 'ZA', 'SE', 'TR'],
        'employment':['US','CA','AU','UK','FR','DE','JP','PH','BR','CN','IN','PL','KR','NG','ID','VN','UA','IE','HK','IT','MX','AR','CL','CO','ES', 'TW', 'MY', 'NL', 'BE', 'NO', 'DK', 'ZA', 'SE', 'TR'],
        'education':['US','CA','IT','MX','AR','CL','CO','ES','VN', 'SA', 'AE'],
        'device':['US','CA','AU','UK','FR','DE','JP','PH','BR','CN','IN','PL','KR','NG','ID','VN','RU','TH','UA','IE','HK','IT','MX','AR','CL','CO','ES', 'SA', 'TW', 'AE', 'MY', 'NL', 'BE', 'NO', 'DK', 'ZA', 'SE', 'TR'],
        'location':['US','CA','IN', 'UK'],
        'census':['US']
    },
    transStatus : transStatus,
    clickBal:[],
    incl_excl:[]
};


config.staging ={
    app: 'pureSpectrumApp-Staging',
    cmp: [4, 43, 33, 25],//PD-1145
    overridCmp : [4, 189], //PD-1096
    supplierAccordian : [4], //PD-1227
    maxinProgress : [25], //PD-1360 puresepctrum buyer
    pureSpecturm : {
        url:'http://staging.spectrumsurveys.com:3000',
        activityUrl:'http://staging.spectrumsurveys.com:7070',
        decipherUrl: 'http://decipher.spectrumsurveys.com:3030'
    },
    
    feasibility: {
        url: 'http://feasibility.dev.spectrumsurveys.com:7000'
    },
    advanceTarget : [43, 33, 25, 30], //PD-1344 critical mix, research now, PureSpectrum Buyer, PD-1438 SFE Buyer(30)
    bera : [], // ps_id, cm_id, morpace, suresh_id
    languageDefault: 1,
    countryDefault: 1,
    BSEC: 'a70mx8',
    CAPTCHA_KEY:'',
    childMasterQual:{
        gender: 220,
        age: 230,
        id: 218,
        noChildren : 111,
        haveChildren : 112,
        ageUnitYr: 311,
        ageUnitMnth: 312
    },
    zipcodesQual:{
        id:229
    },
    countryInQuals:{
        'gender':['US','CA','AU','UK','FR','DE','JP','PH','BR','CN','IN','PL','KR','NG','ID','VN','RU','TH','UA','IE','HK','IT','MX','AR','CL','CO','ES', 'SA', 'TW', 'AE', 'MY', 'NL', 'BE', 'NO', 'DK', 'ZA', 'SE', 'TR'],
        'age':['US','CA','AU','UK','FR','DE','JP','PH','BR','CN','IN','PL','KR','NG','ID','VN','RU','TH','UA','IE','HK','IT','MX','AR','CL','CO','ES', 'SA', 'TW', 'AE', 'MY', 'NL', 'BE', 'NO', 'DK', 'ZA', 'SE', 'TR'],
        'hhi':['US','CA','AU','UK','FR','DE','JP','PH','BR','CN','IN','PL','KR','NG','ID','UA','IE','HK','IT','MX','AR','CL','CO','ES', 'TW', 'AE', 'MY', 'NL', 'BE', 'NO', 'DK', 'ZA', 'SE', 'TR'],
        'race':['US','CA'],
        'bera':['US','CA'],
        'relationship':['US','CA','IT','MX','AR','CL','CO','ES'],
        'children':['US','CA','AU','UK','FR','DE','JP','PH','BR','CN','IN','PL','KR','NG','ID','UA','IE','HK','IT','MX','AR','CL','CO','ES', 'TW', 'MY', 'NL', 'BE', 'NO', 'DK', 'ZA', 'SE', 'TR'],
        'employment':['US','CA','AU','UK','FR','DE','JP','PH','BR','CN','IN','PL','KR','NG','ID','VN','UA','IE','HK','IT','MX','AR','CL','CO','ES', 'TW', 'MY', 'NL', 'BE', 'NO', 'DK', 'ZA', 'SE', 'TR'],
        'education':['US','CA','IT','MX','AR','CL','CO','ES','VN', 'SA', 'AE'],
        'device':['US','CA','AU','UK','FR','DE','JP','PH','BR','CN','IN','PL','KR','NG','ID','VN','RU','TH','UA','IE','HK','IT','MX','AR','CL','CO','ES', 'SA', 'TW', 'AE', 'MY', 'NL', 'BE', 'NO', 'DK', 'ZA', 'SE', 'TR'],
        'location':['US','CA','IN', 'UK'],
        'census':['US']
    },
    transStatus : transStatus,
    clickBal:[],
    incl_excl:[]
};

config.uat ={
    app: 'pureSpectrumApp-Staging',
    cmp: 4,
    pureSpecturm : {
        url:'http://uat.spectrumsurveys.com:3000',
        activityUrl:'http://staging.spectrumsurveys.com:7070',
        decipherUrl: 'http://decipher.spectrumsurveys.com:3030'
    },
     feasibility: {
        url: 'http://feasibility.dev.spectrumsurveys.com:7000'
    },
    advanceTarget : [], // ps_id, smith_id, morpace, suresh_id, sentient, marketCast
    bera : [], // ps_id, cm_id, morpace, suresh_id
    languageDefault: 1,
    countryDefault: 1,
    BSEC: 'a70mx8',
    CAPTCHA_KEY:'6LdGmwsUAAAAAKliArH73Xk8_V4QtfiuHMgatGIk',
    childMasterQual:{
        gender: 220,
        age: 230,
        id: 218,
        noChildren : 111,
        haveChildren : 112,
        ageUnitYr: 311,
        ageUnitMnth: 312
    },
    zipcodesQual:{
        id:229
    },
    countryInQuals:{
        'gender':['US','CA','AU','UK','FR','DE','JP','PH','BR','CN','IN','PL','KR','NG','ID','VN','RU','TH','UA','IE','HK','IT','MX','AR','CL','CO','ES', 'SA', 'TW', 'AE', 'MY', 'NL', 'BE', 'NO', 'DK', 'ZA', 'SE', 'TR'],
        'age':['US','CA','AU','UK','FR','DE','JP','PH','BR','CN','IN','PL','KR','NG','ID','VN','RU','TH','UA','IE','HK','IT','MX','AR','CL','CO','ES', 'SA', 'TW', 'AE', 'MY', 'NL', 'BE', 'NO', 'DK', 'ZA', 'SE', 'TR'],
        'hhi':['US','CA','AU','UK','FR','DE','JP','PH','BR','CN','IN','PL','KR','NG','ID','UA','IE','HK','IT','MX','AR','CL','CO','ES', 'TW', 'AE', 'MY', 'NL', 'BE', 'NO', 'DK', 'ZA', 'SE', 'TR'],
        'race':['US','CA'],
        'bera':['US','CA'],
        'relationship':['US','CA','IT','MX','AR','CL','CO','ES'],
        'children':['US','CA','AU','UK','FR','DE','JP','PH','BR','CN','IN','PL','KR','NG','ID','UA','IE','HK','IT','MX','AR','CL','CO','ES', 'TW', 'MY', 'NL', 'BE', 'NO', 'DK', 'ZA', 'SE', 'TR'],
        'employment':['US','CA','AU','UK','FR','DE','JP','PH','BR','CN','IN','PL','KR','NG','ID','VN','UA','IE','HK','IT','MX','AR','CL','CO','ES', 'TW', 'MY', 'NL', 'BE', 'NO', 'DK', 'ZA', 'SE', 'TR'],
        'education':['US','CA','IT','MX','AR','CL','CO','ES','VN', 'SA', 'AE'],
        'device':['US','CA','AU','UK','FR','DE','JP','PH','BR','CN','IN','PL','KR','NG','ID','VN','RU','TH','UA','IE','HK','IT','MX','AR','CL','CO','ES', 'SA', 'TW', 'AE', 'MY', 'NL', 'BE', 'NO', 'DK', 'ZA', 'SE', 'TR'],
        'location':['US','CA','IN', 'UK'],
        'census':['US']
    },
    transStatus : transStatus,
    clickBal:[],
    incl_excl:[]
};



config.production ={
    app: 'pureSpectrumApp-Prod',
    cmp: [19, 2, 4, 137, 141], //PD-1145
    overridCmp : [141, 39, 132, 171, 33, 56, 43, 116, 154, 98, 189, 235, 65], //PD-1096 PD-1361 Morning Consult API - 171, Smith Geiger Buyer, PS Support Lightspeed, PD-1439- EMI & FocusVision(43, 116), Climate Nexus(wyatt), Sentinent, MSW-ARS account, Snappy
    buyerClient : [20, 141],
    enableUrlTranfrmUsr : [141, 20, 163], //PD-1236, 1412(enable CM API Company)
    supplierAccordian : [141, 20, 163], //PD-1227, 1412(enable CM API Company)
    maxinProgress : [141], //PD-1360 puresepctrum buyer
    pureSpecturm : {
        url:'https://spectrumsurveys.com',
        activityUrl:'http://activity.spectrumsurveys.com:7070',
        decipherUrl: 'http://localhost:3030'
    },
    feasibility: {
        url: 'http://feasibility.spectrumsurveys.com:7000'
    },
    advanceTarget : [4, 2, 134, 33, 174, 141, 20, 39, 171, 192, 98, 20, 43, 116, 137, 17, 67, 132, 235, 248], //PD-1344 critical mix, research now, ugam, smith_id, morpace, puresepctrum buyer, purespectrum demo buyer, marketCast, morning consult, Simple Opinion, Sentient Decision Sciences, Suresh Buyer, PD-1439- EMI & FocusVision(43, 116), Ugam, Luth Research Buyer, Quest Mindshare, Bera, snappy
    bera : [145, 4, 174, 20, 132], // ps_id, cm_id, morpace, suresh_id, beraUser, Sentient Decision Sciences
    languageDefault: 1,
    countryDefault: 1,
    BSEC: 'a70mx8',
    CAPTCHA_KEY:'6LerGBEUAAAAABRFWHRxAtPDCBBcDll6JLl0u3B0',
    childMasterQual:{
        gender: 220,
        age: 230,
        id: 218,
        noChildren : 111,
        haveChildren : 112,
        ageUnitYr: 311,
        ageUnitMnth: 312
    },
    zipcodesQual:{
        id:229
    },
    countryInQuals:{
        'gender':['US','CA','AU','UK','FR','DE','JP','PH','BR','CN','IN','PL','KR','NG','ID','VN','RU','TH','UA','IE','HK','IT','MX','AR','CL','CO','ES', 'SA', 'TW', 'AE', 'MY', 'NL', 'BE', 'NO', 'DK', 'ZA', 'SE', 'TR'],
        'age':['US','CA','AU','UK','FR','DE','JP','PH','BR','CN','IN','PL','KR','NG','ID','VN','RU','TH','UA','IE','HK','IT','MX','AR','CL','CO','ES', 'SA', 'TW', 'AE', 'MY', 'NL', 'BE', 'NO', 'DK', 'ZA', 'SE', 'TR'],
        'hhi':['US','CA','AU','UK','FR','DE','JP','PH','BR','CN','IN','PL','KR','NG','ID','UA','IE','HK','IT','MX','AR','CL','CO','ES', 'TW', 'AE', 'MY', 'NL', 'BE', 'NO', 'DK', 'ZA', 'SE', 'TR'],
        'race':['US','CA'],
        'bera':['US','CA'],
        'relationship':['US','CA','IT','MX','AR','CL','CO','ES'],
        'children':['US','CA','AU','UK','FR','DE','JP','PH','BR','CN','IN','PL','KR','NG','ID','UA','IE','HK','IT','MX','AR','CL','CO','ES', 'TW', 'MY', 'NL', 'BE', 'NO', 'DK', 'ZA', 'SE', 'TR'],
        'employment':['US','CA','AU','UK','FR','DE','JP','PH','BR','CN','IN','PL','KR','NG','ID','VN','UA','IE','HK','IT','MX','AR','CL','CO','ES', 'TW', 'MY', 'NL', 'BE', 'NO', 'DK', 'ZA', 'SE', 'TR'],
        'education':['US','CA','IT','MX','AR','CL','CO','ES','VN', 'SA', 'AE'],
        'device':['US','CA','AU','UK','FR','DE','JP','PH','BR','CN','IN','PL','KR','NG','ID','VN','RU','TH','UA','IE','HK','IT','MX','AR','CL','CO','ES', 'SA', 'TW', 'AE', 'MY', 'NL', 'BE', 'NO', 'DK', 'ZA', 'SE', 'TR'],
        'location':['US','CA','IN', 'UK'],
        'census':['US']
    },
    transStatus : transStatus,
    clickBal:[19,20,34,216,217,137,141,227, 99], //PureSpectrum, Purespectrum demo buyer, Soapboxsample buyer, Ugam, PureSpectrum Projects, Aite Group, C+R Research
    incl_excl:[141, 20, 132, 19] // puresepctrum buyer, purespectrum demo buyer, Bera
};


'use strict';

angular.module('pureSpectrumApp').factory('config', function Config() {
    var env = (function () {
        var url = window.document.URL;

        if (url.indexOf('http://127.0.0.1') === 0 || url.indexOf('http://localhost') === 0 || url.indexOf('http://dev.spectrumsurveys.com') === 0) {
            return 'development';
        }

        if (url.indexOf('http://staging.spectrumsurveys.com') === 0) {
            return 'staging';
        }

        if (url.indexOf('http://uat.spectrumsurveys.com') === 0) {
            return 'uat';
        }

        if (url.indexOf('https://platform.purespectrum.com') === 0 || url.indexOf('http://platform.purespectrum.com') === 0) {
            return 'production';
        }

    })();

    if (!env) {
        throw new Error('failed to detect application env');
    }

    return window.config[env];
});

angular.module('pureSpectrumApp')
.factory('questionService',['$http','config', function($http, config) {
    var base_url = config.pureSpecturm.url;
    return {
    	getAdvTargetingQues : function(page){
            return $http.get(base_url + '/survey/getAdvQuestions/' + page);
        },
    	addAdvQuestions: function (data) {
            return $http.post(base_url + '/survey/addAdvQuestions', data);
        },
    	updateAdvQuestions: function (id, data) {
            return $http.put(base_url + '/survey/updateAdvQuestions/' + id, data);
        },
    	deleteAdvQuestions: function (id) {
            return $http.delete(base_url + '/survey/deleteAdvQuestions/' + id);
        }
    }
}]);


angular.module('pureSpectrumApp')
    .factory('buyerService',['$http','config', function($http, config) {
        var base_url = config.pureSpecturm.url;
        return {

            getBlockedBuyer : function(id){
                return $http.get(base_url + '/blockedBuyerList/'+id);
            },
            
            updateBlockedBuyers: function(data) {
                return $http.post(base_url + '/updateblockedBuyerList', data);
            },

            getAllBlockedBuyers : function(){
                return $http.get(base_url + '/getblockedBuyerList');
            }
        }
    }]);

/**
 * Created by Dinesh on 20/10/2016.
 */

angular.module('pureSpectrumApp')
    .factory('buyerSettingService',['$http','config','$window','localStorageService', function($http,config, $window, localStorageService) {
        var base_url = config.pureSpecturm.url;
        var userInfo=localStorageService.get('logedInUser');

        return {
            addSetting : function(settingData) {
                return $http.post( base_url + '/buyerSettings',settingData);
            },
            updateSetting : function(id,settingData) {
                return $http.put( base_url + '/buyerSettings/'+id,settingData);
            },
            getSetting: function(cmp){
                return $http.get(base_url + '/buyerSettings/'+cmp);
            }
        }

}]);
/**
 * Created by Parveen on 3/8/2016.
 */


angular.module('pureSpectrumApp')
    .factory('commonApi',['$http','config', function($http, config) {
        var base_url = config.pureSpecturm.url;

        return {
            language : function() {
                return $http.get(base_url + '/languages');
            },
            countries : function() {
                return $http.get(base_url + '/countries');
            },
            samples : function() {
                return $http.get(base_url + '/samples');
            },
            relationships : function() {
                return $http.get(base_url + '/relationships');
            },
            educations : function() {
                return $http.get(base_url + '/educations');
            },
            employments: function(){
                    return $http.get(base_url + '/employments');
            },
            childrens: function(){
                return $http.get(base_url + '/children')
            },
            getBuyerCounterParty : function () {
                return $http.get(base_url + '/getBuyers');
            },
            getLanguageByCountry : function (cntId) {
                return $http.get(base_url + '/countryLanguages/'+cntId);
            },
            getRaceData : function () {
                return $http.get(base_url + '/race');
            },
            getGenderData : function () {
                return $http.get(base_url + '/gender');
            },
            getDeviceData : function () {
                return $http.get(base_url + '/device');
            },
            getAllMasterData : function () {
              return $http.get(base_url + '/getmasterdata');
            }
        }

    }]);

/**
 * Created by Parveen on 3/11/2016.
 */

angular.module('pureSpectrumApp')
    .factory('companyService',['$http','config', function($http, config) {
        var base_url = config.pureSpecturm.url;
        return {
            getCompany: function (cmpId) {
                return $http.get(base_url + '/company/'+cmpId);
            },

            getAllCompaniesData : function(){
                return $http.get(base_url + '/companies');
            },

            updateCompanyDetails : function(cmpData){
                return $http.put(base_url + '/company/'+cmpData.id,cmpData);
            },

            saveCompanyDetails : function(cmpData){
                return $http.post(base_url + '/company', cmpData);
            },

            deleteCompany : function(cmpId){
                return $http.delete(base_url + '/company/'+cmpId);
            },
            getInvoiceCompaniesData : function(){
                return $http.get(base_url + '/invoice/companies');
            },
            getBuyerCompany: function () {
                return $http.get(base_url + '/getBuyers');
            },
            getAllSuppliersData : function(bodyObj){
                return $http.get(base_url + '/invoice/companies?supplier_type='+bodyObj.supplier_type+'&isBuyr='+bodyObj.isBuyr);
            },
            getAllBuyersData : function(bodyObj){
                return $http.get(base_url + '/invoice/companies?isSpplr='+bodyObj.isSpplr+'&isBuyr='+bodyObj.isBuyr);
            }
        }
    }]);

/**
 * Created by Parveen on 3/8/2016.
 */


angular.module('pureSpectrumApp')
    .factory('createSurvey',['$http','config','$window','localStorageService', function($http,config, $window, localStorageService) {
        
        var base_url = config.pureSpecturm.url;
        var activity_url = config.pureSpecturm.activityUrl;

        return {
            saveSurveyData : function(data) {
                var userInfo=localStorageService.get('logedInUser');
                return $http.post(base_url + '/survey',data, {
                    headers: {
                        'usr_id': userInfo.id,
                        'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8'
                    }
                });
            },
            getSurveyHeaderValue : function(lang,ctry,LOI,incd, id){
                var survey = '';
                if(id != undefined)
                    survey = '&survey='+id;
                return $http.get(base_url + '/pricingService?language='+lang+'&country='+ctry+'&LOI='+LOI+'&incidence='+incd+survey);
            },

            getSurveyById : function(surveyId){
                return $http.get(base_url + '/surveys/' + surveyId );
            },

            answerByUser :  function(data){
                return $http.post(base_url + '/respondentProfile', data);
            },

            updateSurveyById : function (data) {
                return $http.post(base_url + '/surveySuppliers', data);
            },

            updateSurveyLaunch : function (data) {
                return $http.post(base_url + '/surveyLaunch' ,data);
            },

            updateSurvey : function(id ,data){
                return $http.put(base_url + '/survey/' + id, data);
            },

            updateSurveyStatus : function(id ,data){
                return $http.put(base_url + '/survey/status/' + id, data);
            },

            getSurveyTid : function(id){
                return $http.get(base_url + '/survey/tid/' + id);
            },

            saveTraffic : function(data){
                return $http.post(base_url + '/survey/traffic', data );
            },

            getBuyerCPI : function(id){
                return $http.get(base_url + '/buyerCPI/' + id);
            },

            getAllocationCPI : function (data) {
                return $http.post(base_url + '/getAllocationCPI', data);
            },

            getSurveyManagement : function(surveyId, q, locale){
                 return $http.get(base_url + '/survey/management/' + surveyId + '?q=' + q+'&countryCode='+locale.countryCode+'&languageCode='+locale.languageCode);
            },

            getSurveyQuotaManagement : function(surveyId, locale){
                 return $http.get(base_url + '/survey/quota/management/' + surveyId+ '?countryCode='+locale.countryCode+'&languageCode='+locale.languageCode);
            },

            getSurveyAudience : function(surveyId, locale){
                return $http.get(base_url + '/survey/getAudience/' + surveyId+ '?countryCode='+locale.countryCode+'&languageCode='+locale.languageCode);
            },

            getSupplierSurveyManagement : function(id,sup_id){
                return $http.get(base_url + '/surveymanagementsupplier?survey_id='+id+'&supplier_id='+sup_id );
            },

            updateSurveyFromManageStep1 : function(id ,data){
                return $http.put(base_url + '/survey/updateLiveSurveyStep1/' + id, data);
            },

            updateSurveyFromManageStep2 : function(id ,data){
                return $http.put(base_url + '/survey/updateLiveSurveyStep2/' + id, data);
            },

            updateSurveyFromManageStep3 : function(id ,data){
                return $http.put(base_url + '/survey/updateLiveSurveyStep3/' + id, data);
            },

            lockQuota :function(survey_id, quotaName, unique_id, flag, option_id, quotaDetails){
                return $http.put(base_url + '/updatequotastatus?survey_id='+survey_id+'&option_id='+option_id+'&quota='+quotaName+'&id='+unique_id+'&flag='+flag+'', quotaDetails);
            }, 

            lockQuotaAgeIncome :function(survey_id, quotaName, min, max, flag){
                return $http.put(base_url + '/updatequotastatus?survey_id='+survey_id+'&quota='+quotaName+'&min='+min+'&max='+max+'&flag='+flag+'');
            },

            getMasterDataByCountryLang: function(country, languange) {
                return $http.get(base_url + '/getMasterDataByCountryLang/'+country+'/'+languange);
            },

            deleteDraftSurvey: function(surveyEncId){
                return $http.delete(base_url + '/deleteSurvey/'+surveyEncId);
            },

            validateZipcodes: function(zipcodes) {
                return $http.post(base_url + '/validate/zipcodes', zipcodes);
            },

            uploadZipcodesFile: function(countryCode, file) {
                var fdata = new FormData();
                fdata.append("zipcodes", file);
                return $http.post(base_url + '/survey/uploadZipCode/'+countryCode, fdata);
            },
            getPaginatedSurveys: function(pageno, surveyType, userType, search) {
                var userInfo=localStorageService.get('logedInUser');
                return $http.get(base_url + '/paginatedSurvey/' + userInfo.cmp + "/" + pageno + "/" + surveyType + '?q=' + userType + '&search=' + search);
            },
            getSurveysCount: function(type, search) {
                var userInfo=localStorageService.get('logedInUser');
                return $http.get(base_url + '/getSurveyCount/' + userInfo.cmp + '?q=' + type + '&search=' + search);
            },
            viewLatestUploadZip: function(file, country) {
                return $http.post(base_url + '/viewLatestUpload/zipcodes/' + country, file);
            },
            //include exclude 
            uploadPSIDRefFile: function(srvId, file) {
                var fdata = new FormData();
                fdata.append("psid_ref_file", file);
                return $http.post(base_url + '/inclexcl/uploadPSIDListFromUI/'+srvId, fdata);
            },
            viewLatestUploadedPSID: function(srvId, incl_excl) {
                return $http.get(base_url + '/inclexcl/getBuyerUploadedList/'+srvId+"?incl_excl="+incl_excl);
            },
            clearUploadedPSIDs: function(srvId) {
                return $http.delete(base_url + '/inclexcl/clearUploadedPSIDs/'+srvId);
            },
            searchAutoComplete: function(country, field, search) {
                return $http.get(base_url + '/searchAutocomplete/' +country+'/'+field + '/' + search);
            },

            createNewPriceBlock: function(srvId) {
                return $http.get(base_url + '/surveys/createBlock/' + srvId);
            },

            getAchievedForAgeIncome: function(srvId, modalName, minRange, maxRange){
                return $http.get(base_url + '/getAchievedForAgeIncome/' + srvId +'?catname='+modalName+'&min='+minRange+'&max='+maxRange);
            },

            getSurveyDetails : function(surveyId, q, locale){ 
                return $http.get(base_url + '/surveyDetail/' + surveyId + '?q=' + q+'&countryCode='+locale.countryCode+'&languageCode='+locale.languageCode); 
            },             

            getSurveyDetailforSupplier : function(surveyId, q, locale,supp_id){
                return $http.get(base_url + '/getSurveyDetailforSupplier/' + surveyId + '?q=' + q+'&countryCode='+locale.countryCode+'&languageCode='+locale.languageCode+'&supplier_id='+supp_id);
            },

            uploadReconciliationFile: function(file) {
                var fdata = new FormData();
                fdata.append("reconcile", file);
                return $http.post(base_url + '/survey/reconciliation/', fdata);
            },

            confirmForReconcile: function(surveyID) {
                return $http.get(base_url + '/survey/confirm/reconciliation/');
            },

            declineReconciliationProcess : function(surveyID) {
                return $http.get(base_url + '/survey/decline/reconciliation/');
            },

            approveReconciliationProcess : function(approvParms) {
                return $http.post(base_url + '/survey/aproveall/reconciliation', approvParms);
            },

            getReconcileCount : function(countParms) {
               
                return $http.post(base_url + '/reconciliation/counts', countParms);
            },
            //PD-821
            updateCurrentlyOpenQuota : function(quotaData) {
                return $http.put(base_url + '/survey/update/currentlyopenquota', quotaData);
            },
            updateAllCurrentlyOpenQuota : function(quotaData) {
                return $http.put(base_url + '/survey/update/allcurrentlyopenquota', quotaData);
            },
            getAdvTargetingQues : function(searchQuestion){
                return $http.post(base_url + '/survey/search_adv_questions', searchQuestion);
            },
            lockUnlockGroupQuota :function(lockUnlockGroupData){
                return $http.put(base_url + '/update/group/quotastatus', lockUnlockGroupData);
            },
            getSurveyBasicDetails: function(survey_id){
                return $http.get(base_url+'/surveyBasicDetails/'+survey_id);
            },
            getSurveyStatus: function(survey_id){
                return $http.get(base_url+'/getSurveyStatus/'+survey_id);
            },
            getBuyerSalesReport: function(dataRange, country_code, supplrId){
                return $http.get(base_url+'/getBuyerSalesReport?startDate='+dataRange.startDate+'&endDate='+dataRange.endDate + '&country_code=' + country_code + '&supplrId=' + supplrId);
            },
            getSurveyTransReport: function(dataRange, country_code){
                return $http.get(base_url+'/getSurveyTransReport?startDate='+dataRange.startDate+'&endDate='+dataRange.endDate + '&country_code=' + country_code);
            },
            getDailyStatsReport: function(dataRange, country_code){
                return $http.get(base_url+'/getDailyStatsReport?startDate='+dataRange.startDate+'&endDate='+dataRange.endDate + '&country_code=' + country_code);
            },
            getPerformanceReport: function(dataRange, country_code, performanceObj){
                return $http.post(base_url+'/getPerformanceReport?startDate='+dataRange.startDate+'&endDate='+dataRange.endDate + '&country_code=' + country_code, performanceObj);
            },
            getSuppliersReport: function(dataRange, country_code, buyerId){
                return $http.get(base_url+'/getSuppliersReport?startDate='+dataRange.startDate+'&endDate='+dataRange.endDate + '&country_code=' + country_code + '&buyerId=' + buyerId);
            },
            getSurveyActivityLogs: function(surveyId){
                return $http.get(activity_url+'/surveys?surveyId='+surveyId);
            },
            addActivityNote: function(activityPayload) {
                return $http.post(activity_url+'/postLogs', activityPayload);
            }
        }

    }]);

angular.module('pureSpectrumApp')
    .factory('currencyService', ['$http', 'config', function($http, config) {
        var base_url = config.pureSpecturm.url;
        return {
            getCurrencyDataForCompanies: function () {
                return $http.get(base_url + '/international_currency/companies');
            },

            getAllCurrencies: function () {
                return $http.get(base_url + '/international_currency');
            },

            updateCurrencyDetails: function (curencyData) {
                return $http.put(base_url + '/international_currency/' + curencyData.currencyShortCode, curencyData);
            }

            /*getAllCompaniesData : function(){
                return $http.get(base_url + '/companies');
            },

            saveCompanyDetails : function(cmpData){
                return $http.post(base_url + '/company', cmpData);
            },

            deleteCompany : function(cmpId){
                return $http.delete(base_url + '/company/'+cmpId);
            }*/
        }
    }]);

/*	
	Created By Mandeep
	Using to Add Details IN Decipher Survey
*/

psApp.factory('decipherService',['$http','config', function($http, config) {
	var decipher_url = config.pureSpecturm.decipherUrl;
	return {
		getTitle: function (uri, directory) {
			var payload = {"uri" : uri, "directory" : directory}
            console.log('payload ',JSON.stringify(payload));
            return $http.post(decipher_url + '/decipher/live/surveys', payload);
        },
        getQuotas: function(uri, path){
        	var payload = {"uri" : uri, "path":path}
        	return $http.post(decipher_url + '/decipher/quotas', payload);
        },
        createSurvey: function(data){
        	return $http.post(decipher_url + '/decipher/create/survey', data);
        }
	}

}]);
angular.module('pureSpectrumApp')
    .service('LoadingInterceptor',['$q', '$rootScope', '$log', function($q, $rootScope, $log) {
        'use strict';
 
        return {
            request: function(config) {
                $rootScope.loading = true;
                return config;
            },
            requestError: function(rejection) {
                $rootScope.loading = false;
                $log.error('Request error:', rejection);
                return $q.reject(rejection);
            },
            response: function(response) {
                $rootScope.loading = false;
                return response;
            },
            responseError: function(rejection) {
                $rootScope.loading = false;
                $log.error('Response error:', rejection);
                return $q.reject(rejection);
            }
        };
}]);
angular.module('pureSpectrumApp')
.factory('httpInterceptor', ['$q', '$rootScope',
    function ($q, $rootScope) {
        var loadingCount = 0;

        return {
            request: function (config) {
                if(++loadingCount === 1) $rootScope.$broadcast('loading:progress');
                return config || $q.when(config);
            },

            response: function (response) {
                if(--loadingCount === 0) $rootScope.$broadcast('loading:finish');
                return response || $q.when(response);
            },

            responseError: function (response) {
                if(--loadingCount === 0) $rootScope.$broadcast('loading:finish');
                return $q.reject(response);
            }
        };
    }
]).config(['$httpProvider', function ($httpProvider) {
    $httpProvider.interceptors.push('httpInterceptor');
}]);
/**
 * Created by Jaspreet Singh on 12/04/2017.
 */

angular.module('pureSpectrumApp')
    .factory('feasibilityService', ['$http', 'config', function($http, config) {
        var base_url = config.pureSpecturm.url;
        var feasibility_url = config.feasibility.url;
        return {
            saveFeasibility: function(feasibilityData) {
                return $http.post(base_url + '/feasibilitySetting/', feasibilityData);
            },
            getFeasibilityById: function(suppliers) {
                return $http.get(base_url + '/getFeasibilitySetting/'+suppliers);
            },
            getFeasibilityForSuppliers: function(suppliers) {
                return $http.post(base_url + '/getFeasibilityForSuppliers',suppliers);
            },
            getFeasibility: function(data) {
                return $http.post(feasibility_url + '/feasibility/v1/', data);
            },
            savePricingMargin: function(data) {
                return $http.post(base_url + '/pricing/margin/save', data);
            },
            getPricingMargin: function(buyer_id, supplier_id) {
                return $http.get(base_url + '/pricing/margin/fetch?buyer_id=' + buyer_id + '&supplier_id=' + supplier_id);
            }
         }
    }]);
/**
 * Created by Sanjiv on 02/02/2017
 */

angular.module('pureSpectrumApp')
.factory('invoiceService',['$http','config', function($http, config) {
    var base_url = config.pureSpecturm.url;
    return {
        fetchInvoiceFile: function (id, name, period) {

            if(parseInt(period) < 201708){
                return $http.get(base_url + '/survey/finance/V1?company_id=' + id + '&company_name=' + name + '&period=' + period);
            }else{

                return $http.get(base_url + '/survey/finance?company_id=' + id + '&company_name=' + name + '&period=' + period);
            }
        },
        downloadInvoice: function (fileName) {
            return base_url + '/survey/download-invoice/' + fileName;
        },
        downloadPdfInvoiceFile: function (data) {
           

            if(data.period && parseInt(data.period) < 201708){

                return $http.post(base_url + '/survey/pdfinvoice/finance/V1',data, {responseType:'arraybuffer'});
                
            }else{
                return $http.post(base_url + '/survey/pdfinvoice/finance',data, {responseType:'arraybuffer'});
            }
            
        }


    }
}]);

angular.module('pureSpectrumApp')
    // each function returns a promise object
    .factory('fileUpload', ['$http','config','$window','localStorageService', function($http,config, $window, localStorageService) {
        var base_url = config.pureSpecturm.url;
        /*var token = '';
        if(!token){
            var token= localStorageService.get('token');
        }
        var requestHeader = {
            headers: {
                'x-access-token' : token,
                'Content-Type': 'application/json; charset=UTF-8'
            }
        };*/
        return {
            postUploadFile : function(data) {
                return $http.post(base_url + '/manualsurveytraffic', data,
                    {
                        headers: {
                            'Content-Type': undefined
                        }
                    });
            }
        }

    }]);
angular.module('pureSpectrumApp')
    .factory('postCode',['$http','config', function($http, config) {
        var base_url = config.pureSpecturm.url;

        return {

        	getZipcodes : function(survey_id, buyer_ziplist_ref){
        		return $http.get(base_url + '/retrieve/postcode?survey_id='+survey_id+'&byr_pst_ref='+buyer_ziplist_ref);
        	}

        }

    }]);
/**
 * Created by Parveen on 3/9/2016.
 */

angular.module('pureSpectrumApp')
    .factory('pricingService',['$http','config','$window','localStorageService', function($http,config, $window, localStorageService) {
        var base_url = config.pureSpecturm.url;
        var userInfo=localStorageService.get('logedInUser');

        return {
            addPriceCard : function(priceData) {
                return $http.post( base_url + '/supplierPriceCard',priceData);
            },

            deactivateSupplier: function(prcCardData){
                return $http.put(base_url + '/supplierPriceCard',prcCardData);
            },

            getSupplier: function(lng, cntry, byr){
                return $http.get(base_url + '/supplierPriceCard?language='+lng+'&country='+cntry+'&buyerCounterParty='+byr);
            },

            supplierFileUpload: function(lng, cntry, manualPriceCard) {
                return $http.post(base_url + '/supplier/manualPriceCard?language='+lng+'&country='+cntry, manualPriceCard);
            },

            getSupplierManualRateCard: function(lng, cntry, byr) {
                return $http.post(base_url + '/supplier/getSupplierPriceCard?language='+lng+'&country='+cntry+'&buyerCounterParty='+byr);
            },

            downloadSupplierManualCard: function(lng, cntry, byr) {
                return $http.get(base_url + '/supplier/downloadSupplierManualCard?language='+lng+'&country='+cntry+'&buyerCounterParty='+byr);
            }
        }

    }]);


angular.module('pureSpectrumApp')
.factory('reportService',['$http','config', function($http, config) {
    var base_url = config.pureSpecturm.url;
    return {
    	downloadReport: function (user_id, cmp, stDt, endDt, st) {
            return $http.get(base_url + '/reports/dashboardReport?u=' + user_id + '&c=' + cmp + '&stDt=' + stDt + '&endDt=' + endDt + '&st=' + st );
        },
        downloadLoginReport: function () {
            return $http.get(base_url + '/reports/userLoginReport');
        },
        downloadFile: function (fileName) {
            return base_url + '/reports/download-report/' + fileName;
        },
        downloadSTR: function (cmp, survey_id, user_type) {
            return $http.get(base_url + '/reports/surveytrafficreport?user_id='+cmp+'&survey_id='+survey_id+'&type='+user_type);
        },
        getPsidTransIdreport: function(reportType, transValues) {
            var queryStr = "";
            _.each(transValues, function(val, key) {
                if(val != "") {
                    queryStr += '&' + key + '=' + val;
                }
            })
            return $http.get(base_url + '/reports/psidReport?reportTypes=' + reportType + queryStr);
        },
        getSurveyTransReport : function(transValues) {
            var queryStr = "";
             _.each(transValues, function(val, key) {
                if(val != "") {
                    queryStr += '&' + key + '=' + val;
                }
            })
            return $http.get(base_url + '/reports/surveystcReport?' + queryStr);
        },

        getTransactionStatusReport : function(payload) {
            return $http.post(base_url + '/reports/surveys/transactionStatus', payload);
        }
    }
}]);
angular.module('pureSpectrumApp')
.factory('socket', ['$rootScope', 'config', function ($rootScope, config) {
  var socket_url = config.pureSpecturm.url;
  var socket = io.connect(socket_url,{forceNew: true,'reconnection': true,'reconnectionDelay': 1000,'reconnectionDelayMax': 5000,
      transports: ['websocket']
  });

  return {
    on: function (eventName, callback) {
      function wrapper() {
        var args = arguments;
        $rootScope.$apply(function () {
          callback.apply(socket, args);
        });
      }

      socket.on(eventName, wrapper);

      return function () {
        socket.removeListener(eventName, wrapper);
      };
    },

    emit: function (eventName, data, callback) {
      socket.emit(eventName, data, function () {
        var args = arguments;
        $rootScope.$apply(function () {
          if(callback) {
            callback.apply(socket, args);
          }
        });
      });
    }
  };
}]);

/**
 * Created by Vikas on 12/7/2016.
 */

angular.module('pureSpectrumApp')
    .factory('settingService',['$http','config','$window','localStorageService', function($http,config, $window, localStorageService) {
        var base_url = config.pureSpecturm.url;
        var userInfo=localStorageService.get('logedInUser');

        return {
            addSetting : function(settingData) {
                return $http.post( base_url + '/supplierSettings',settingData);
            },
            updateSetting : function(id,settingData) {
                return $http.put( base_url + '/supplierSettings/'+id,settingData);
            },

            deactivateSupplier: function(data){
                return $http.put(base_url + '/supplierSettings',data);
            },

            getSetting: function(cmp){
                return $http.get(base_url + '/supplierSettings/'+cmp);
            }
        }

    }]);




angular.module('pureSpectrumApp')
    .factory('supplierService',['$http','config', function($http, config) {
        var base_url = config.pureSpecturm.url;
        return {
            /*getCompany: function (cmpId) {
                return $http.get(base_url + '/company/'+cmpId);
            },*/

            getAllSuppliersData : function(id){
                return $http.get(base_url + '/getSupplier/'+id);
            },
            
            getNonBlockedSuppliers: function(id, countryId ,languageId) {
                return $http.get(base_url + '/getSupplier/unblock/'+id+'?countryId='+countryId+'&languageId='+languageId);
            },

            setPrfBlkSuppliers: function(data) {
                return $http.post(base_url+'/preferedSupplierList', data)
            },

            getFlexibilityPricesParams: function(id) {
                return $http.get(base_url+'/supplier/getFlexibilityPricesParams/'+id)
            }
        }
    }]);


angular.module('pureSpectrumApp')
    // each function returns a promise object
    .factory('user', ['$http','config','$window','localStorageService', function($http,config, $window, localStorageService) {
        var base_url = config.pureSpecturm.url;
        var token = '';
        if(!token){
            var token= localStorageService.get('token');
        }
        var requestHeader = {
            headers: {
                'x-access-token' : token,
                'Content-Type': 'application/json; charset=UTF-8'
            }
        };
        return {
            logIn : function(authData) {
                return $http.post(base_url + '/user/login', '{username:' +
                    authData.username + ' }',
                    {
                        headers: {
                            'username': authData.username,
                            'password': authData.password,
                            'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8'
                        }
                    });
            },
            checkAccess:function(byrRole, slrRole, optRole){
                return  $http.get(base_url + '/feature/access?buyer='+byrRole+'&supplier='+slrRole+'&operator='+optRole);


            },
            logoutUser:function(id){
                return $http.delete(base_url + '/logout/'+id);
            },
            updatePasswords:function(id, data){
                return $http.put(base_url + '/updateuserpassword/'+id, data);
            },
             updateStatus:function(id, data){
                return $http.put(base_url + '/updateuserstatus/'+id, data);
            },
            getUserData : function(){
                return $http.get(base_url + '/users' );
            },
             saveUserDetails : function(cmpData){
                return $http.post(base_url + '/user', cmpData);
            }, 
            updateUserDetails : function(cmpData){
                return $http.put(base_url + '/user/'+cmpData.id,cmpData);
            },
            checkForgotPasswordEmail:function(emailId){//PD-344
                return  $http.get(base_url + '/checkForgotPasswordMail/'+emailId);


            },
            getUserDateFromToken : function(resettoken) {//PD-344
                return $http.get(base_url + '/userDataFromResetToken/'+resettoken);
            },

            updateResetPassword : function(resettoken, data) {//PD-344
                return $http.put(base_url + '/updateuserresetpassword/'+resettoken, data);
            }
        }

    }]);

angular.module('pureSpectrumApp').factory('authenticationService',['$window','localStorageService','$cookies', function($window, localStorageService, $cookies) {

    var auth = {
        isAuthenticated: false,
        storageType:"sessionStorage",
        isAdmin: false,

        // Set Authentication flag
        setAuthentication: function(val, token, rememberMe){
            this.isAuthenticated =val;
            if(rememberMe) {
                localStorageService.set('localStorageToken', token);
            }else{
                $window.sessionStorage.token = token;
                $cookies.token = token;
            }
        },
        getAuthentication: function(){
            return this.isAuthenticated;
        },
        revokeAuthentication : function() {
            this.isAuthenticated = false;
            localStorageService.clearAll();
            $window.sessionStorage.token = null;
            $cookies.token = null;
            sessionStorage.removeItem("token");
            localStorageService.remove('localStorageToken');
            localStorageService.remove('logedInUser');
        }
    }
    return auth;
}]);

angular.module('pureSpectrumApp').factory('TokenInterceptor',['$q','config','$window','$location','authenticationService','localStorageService','$cookies', function ($q, config, $window, $location, authenticationService, localStorageService, $cookies) {
    return {
        request: function (configHTTP) {
            configHTTP.headers = configHTTP.headers || {};
            var token =  $cookies.token;//$window.sessionStorage.token;

            if(!token){
                var token= localStorageService.get('localStorageToken');
            }
            var str = $location.path();
            var res = str.substring(0, 11);

            if($location.path()!= '/login' && $location.path()!= '/ManualSurveyTrafficFixes') {
                if (token) {
                    configHTTP.headers['x-access-token'] = token;
                    configHTTP.headers['Content-Type'] = 'application/json; charset=UTF-8';
                }
            }
            /*Reconciliation code*/
            if(configHTTP.url.indexOf('survey/reconciliation') > 0) {
              configHTTP.transformRequest = angular.identity;
              configHTTP.headers['Content-Type'] = undefined;
            }
            if(configHTTP.url.indexOf('survey/confirm/reconciliation') > 0) {
              configHTTP.transformRequest = angular.identity;
              configHTTP.headers['Content-Type'] = undefined;
            }
            if(configHTTP.url.indexOf('survey/uploadZipCode') > 0) {
                configHTTP.transformRequest = angular.identity;
                configHTTP.headers['Content-Type'] = undefined;
            }
            if(configHTTP.url.indexOf('/inclexcl/uploadPSIDListFromUI/') > 0) {
                configHTTP.transformRequest = angular.identity;
                configHTTP.headers['Content-Type'] = undefined;
            }
            return configHTTP;
        },
        requestError: function(rejection) {
            return $q.reject(rejection);
        },

        /* Set Authentication.isAuthenticated to true if 200 received */
        response: function (response) {
            if (response != null && response.status == 200  && !authenticationService.isAuthenticated && (/*$window.sessionStorage.token*/ $cookies.token || localStorageService.get('localStorageToken'))) {
                authenticationService.isAuthenticated = true;
            }
            return response || $q.when(response);
        },

        /* Revoke client authentication if 401 is received */
        responseError: function(rejection) {
            if (rejection != null && rejection.status === 401  ){
                authenticationService.isAuthenticated = false;
                //authenticationService.delAuthenticationFlags();
                localStorageService.clearAll();
                sessionStorage.removeItem("token");
                return $location.path("/login");
            }
            var arr=$location.path().split("/");
            var grpPath=arr[0]+"/"+arr[1]+"/"+arr[2]+"/"+arr[3];
            if (rejection != null && rejection.status === 403 && $location.path()!= '/login' && ($location.path()!= '/login' && grpPath != "/jobs/group/groupsettings")){
                $location.path("/access_denied");
            }
            return $q.reject(rejection);
        }
    };
}]);
angular.module('pureSpectrumApp')
.controller('advQuestionCtrl' ,['$scope', '$state', 'ngProgressLite', 'notify', 'localStorageService', 'config', 'questionService', 'createSurvey', 'companyService', 'commonApi', '$filter', function($scope, $state, ngProgressLite, notify, localStorageService, config, questionService, createSurvey, companyService, commonApi, $filter){
    var userInfo= localStorageService.get('logedInUser');

    $scope.loader = {show: false};
    $scope.advQuestion = new Object();
    // Question Type is single punch by default
    $scope.advQuestion.question_type = "singlepunch";

    $scope.advQuestion.class = "2";
    // Array that holds the screener question & answer payload to save
    $scope.advQuestion.options = new Array();
    //default value for company
    $scope.selectedCompany = {
        name : 'All',
        id : 0
    };
    $scope.rangeMode = false; 
    $scope.units = [
        {
            id    : 311,
            name  : 'Years'
        },
        {
            id    : 312,
            name  : 'Months'
        },
        {
            id    : 313,
            name  : 'Days'
        },
        {
            id    : 314,
            name  : 'Hours'
        },
        {
            id    : 401,
            name  : 'movies'
        },
        {
            id    : 402,
            name  : 'tv hours'
        },
        {
            id    : 403,
            name  : 'nights'
        },
        {
            id    : 404,
            name  : 'trips'
        }
    ]

    $scope.modes = {
        'add':false,
        'edit':false,
        'view': true
    }

    // Array
    $scope.multiOptions = new Array();
    $scope.page = 1;

    $scope.changeMode = function(mode){
       if(mode == "singlepunch" || mode == "multipunch") {
           $scope.rangeMode = false; 
       }else if(mode == "range"){
            $scope.rangeMode = true; 
       }
    }
    getBuyerCompany()
    getCountries()
    
    //list buyer companies
    function getBuyerCompany(){
        companyService.getBuyerCompany().success(function(res){
            //console.log("Buyer companies", JSON.stringify(res))
            $scope.cmpList = res.company;
            $scope.getAdvTargetingQues($scope.page);
        }).error(function (err) {
            notify({message: err.msg, classes: 'alert-danger', duration: 2000});
        });
    }
    //select company
    $scope.selectCompany = function(company) {
        if(company == 'all') {
            $scope.selectedCompany.name = 'All';
            $scope.advQuestion.cmp = 0;
        }else {
            $scope.selectedCompany.name = company.name;
            $scope.advQuestion.cmp = company.id;
        }
    };

    //list advance targeting question
    $scope.getAdvTargetingQues = function(page){
        //Start loader
        $scope.loader.show = true;
        questionService.getAdvTargetingQues(page).success(function(res){
            if(res.questions && res.pages){
                $scope.pages = new Array();
                for(var i = 1; i <= res.pages; i++){
                    $scope.pages.push(i);
                }
                $scope.page = page;
                $scope.questions = res.questions;
                $scope.activeMenu = $scope.questions[0].respondent_question_id;
                $scope.advQuesDetails = $scope.questions[0];
                var company = _.findWhere($scope.cmpList, {id:$scope.advQuesDetails.cmp});
                $scope.advQuesDetails.cmp_name = company ? company.name : "All";
                $scope.advQuesDetails.class_name = $scope.questions[0].class == 2 ? "Extended" : "Custom";
                $scope.advQuesDetails.question_category = $scope.advQuesDetails.question_category;
                $scope.loader.show = false;
            }
        }).error(function (err) {
            $scope.loader.show = false;
            notify({message: err.msg, classes: 'alert-danger', duration: 2000});
        });
    }

    //save question
    $scope.saveAdvQuestion = function(){
        if($scope.advQuestion.question_description && $scope.advQuestion.question_category && $scope.advQuestion.question_type && $scope.advQuestion.stem1 && $scope.advQuestion.buyer_text && $scope.advQuestion.options.length){
            //Start loader
            $scope.loader.show = true;
            //console.log(JSON.stringify($scope.advQuestion.question_category));
            
            // Pick the qualification id from stem1 and push in qualification id array
            if($scope.advQuestion.stem1.indexOf("%%respId%%") == -1){
                $scope.loader.show = false;
                return notify({
                    message: '%%respId%% required in stem',
                    classes: 'alert-warning',
                    duration: 2000
                });
            }

            // SinglePunch or Multipunch answers
            $scope.advQuestion.qualification_type = 'advance';
            questionService.addAdvQuestions($scope.advQuestion).success(function (response) {
                //console.log("response ",JSON.stringify(response));
                notify({
                    message: 'Successfully Added',
                    classes: 'alert-success',
                    duration: 2000
                });
                // Clearing the arrays
                $scope.advQuestion = {};
                $scope.advQuestion.question_type = "singlepunch";
                $scope.advQuestion.class = "2";
                $scope.advQuestion.options = new Array();
                $scope.rangeMode = false; 
                $scope.loader.show = false;
                $scope.getAdvTargetingQues($scope.page);
            }).error(function (err) {
                notify({message: err.msg, classes: 'alert-danger', duration: 2000});
                $scope.loader.show = false;
            });
        }else{
            notify({
                message: 'Enter all required fields',
                classes: 'alert-warning',
                duration: 2000
            });
        }
    };

    //update question
    $scope.updateAdvQuestion = function(){

        if($scope.advQuestion.respondent_question_id && $scope.advQuestion.question_description && $scope.advQuestion.question_category && $scope.advQuestion.question_type && $scope.advQuestion.stem1 && $scope.advQuestion.buyer_text && $scope.advQuestion.screener_text){
            //Start loader
            $scope.loader.show = true;
            //console.log(JSON.stringify($scope.advQuestion.question_category));
            
            // Pick the qualification id from stem1 and push in qualification id array
            $scope.advQuestion.qualification_id = new Array();
            var stem1QualifictionIds = $scope.advQuestion.stem1.match(/%%(\d*)%%+/g);
            stem1QualifictionIds = stem1QualifictionIds[0].replace(/%%/g,'');
            // Check for not pushing duplicate Ids
            if(_.indexOf($scope.advQuestion.qualification_id, stem1QualifictionIds) == -1){
                $scope.advQuestion.qualification_id.push(parseInt(stem1QualifictionIds));
            }
            //console.log(JSON.stringify($scope.advQuestion.qualification_id));
            // SinglePunch or Multipunch answers
            $scope.advQuestion.qualification_type = 'advance';
            //console.log('$scope.advQuestion '+JSON.stringify($scope.advQuestion));
            questionService.updateAdvQuestions($scope.advQuestion.respondent_question_id, $scope.advQuestion).success(function (response) {
                //console.log("response ",JSON.stringify(response));
                notify({
                    message: 'Successfully updated',
                    classes: 'alert-success',
                    duration: 2000
                });
                // Clearing the arrays
                $scope.getAdvTargetingQues($scope.page);
                $scope.loader.show = false;
            }).error(function (err) {
                notify({message: err.msg, classes: 'alert-danger', duration: 2000});
                $scope.loader.show = false;
            });
        }else{
            notify({
                message: 'Enter all required fields',
                classes: 'alert-warning',
                duration: 2000
            });
        }
    };

    //delete question
    $scope.deleteAdvQuestion = function(respondent_question_id){
        $scope.loader.show = true;
        //console.log('deleteAdvQuestion '+respondent_question_id)
        questionService.deleteAdvQuestions(respondent_question_id).success(function (response) {
            //console.log("response ",JSON.stringify(response));
            notify({
                message: 'Successfully deleted',
                classes: 'alert-success',
                duration: 2000
            });
            $scope.getAdvTargetingQues($scope.page);
            $scope.loader.show = false;
        }).error(function (err) {
            notify({message: err.msg, classes: 'alert-danger', duration: 2000});
            $scope.loader.show = false;
        });
    };

    //load adv question in edit form
    $scope.editAdvQues = function(qObj){
        //$scope.loader.show = true;
        $scope.advQuestion = qObj;
        var options = new Array()
        _.each(_.keys(qObj.answers_data), function(key){
            var tempOption = new Object()
            var locale = key.split('_');
            tempOption['language'] = locale[0];
            tempOption['country'] = locale[1];
            tempOption['placeholder'] = qObj['answers_data'][key]['answer_placeholder'] || '';
            tempOption['screener_text']  = qObj.screener_text[key]['question_text'];
            tempOption['multiOptions'] = (qObj.question_type != 'range') ? qObj['answers_data'][key]['answers'] : [];
            if(tempOption.multiOptions.length && tempOption['language'] != 'eng'){
                var masterDoc = qObj.master_data[locale[1]]['eng'];
                _.each(tempOption.multiOptions, function(singleOpt){
                    var transObj = _.findWhere(masterDoc, {id: singleOpt.id});
                    singleOpt['translation'] = transObj? transObj.name: '';
                })
            }
            options.push(tempOption);
        })
        $scope.advQuestion.options = options;
        $scope.advQuestion.qualification_id = qObj.qualification_id[0];
        $scope.advQuestion.class = qObj.class.toString();
        var company = _.findWhere($scope.cmpList, {id:qObj.cmp}) || 'all'
        $scope.selectCompany(company);
        if(qObj.question_type != 'range'){
            $scope.rangeMode = false;
        }else{
            $scope.rangeMode = true;
        }
    }

    //view adv question details
    $scope.viewAdvQuesDetails =  function(qObj){
        //console.log("qObj",JSON.stringify(qObj))
        var locale = "eng_US"
        var qId = qObj.qualification_id[0];
        $scope.advQuesDetails = qObj;
        var company = _.findWhere($scope.cmpList, {id: qObj.cmp});
        $scope.advQuesDetails.cmp_name = company ? company.name : "All";
        $scope.advQuesDetails.class_name = qObj.class == 2 ? "Extended" : "Custom";
        $scope.advQuesDetails.question_category = qObj.question_category;
        $scope.advQuesDetails.placeholder = qObj.answers_data;
        $scope.advQuesDetails.answers = qObj.answers_data;
        $scope.activeMenu = qObj.respondent_question_id;
    };
    
    $scope.goToAddMode = function(){
        $scope.modes.add = true;
        $scope.modes.view = false;
        $scope.modes.edit = false;
        $scope.advQuestion = new Object();
        $scope.advQuestion.question_type = "singlepunch";
        $scope.advQuestion.class = "2";
        $scope.advQuestion.cmp = 0;
        $scope.selectedCompany = {
            name : 'All',
            id : 0
        };
        $scope.rangeMode = false;
        $scope.multiOptions = new Array();
    };
    $scope.goToViewMode = function(){
        $scope.modes.add = false;
        $scope.modes.view = true;
        $scope.modes.edit = false;
    };
    $scope.goToEditMode = function(){
        $scope.modes.add = false;
        $scope.modes.view = false;
        $scope.modes.edit = true;
    };

    function getCountries() {
        commonApi.countries().success(function(data) {
            if (data.countries != null) {
                $scope.countries = data.countries.values;
            }
        }).error(function(err) {
            notify({
                message: err.msg,
                classes: 'alert-danger',
                duration: 2000
            });
        });
    }

}]);


/**
 * Created by Dinesh on 16/10/2016.
 */

angular.module('pureSpectrumApp')

    .controller('buyerSettingController',['$scope','$http','$state','$cookies','$window','config','localStorageService','settingService','notify','commonApi' ,'ngProgressLite', 'buyerSettingService',function($scope, $http, $state, $cookies, $window, config, localStorageService, settingService, notify, commonApi, ngProgressLite, buyerSettingService){
        $scope.buyerSetObj={};
        $scope.decipherCheckData=[];
        $scope.showModal = false;
        var ageIncomeQual =[212,213];
        var qualificationText = false;
        $scope.showAddConditionsTab =false;
        $scope.indexForCondition=0;
        $scope.showAddMappingTab = false;
        $scope.ageIncomeQualExist=false;
        buyerMappings=[];
        var conditionIndex;
        $scope.conditionData={};
        $scope.qualConditionData = {};
        var completeCheckedData ={};
        $scope.transaction_id= { cb : 1, out:'transaction_id', in:'transaction_id'};
        $scope.psid= { cb : 1, out:'psid', in:'psid' };
        $scope.status= { cb : 1 , out:'', in : 'st'};
        $scope.ps_hash= { cb : 1, out:'ps_hash', in : 'ps_hash' };
        $scope.ps_supplier_id= { cb : 0, out:'supplier_id', in : '' };

        // parameter added for PD-369
        $scope.ps_transId2 = { cb : 0, out:'transaction_id2', in : 'transaction_id' };
        $scope.ps_transId3 = { cb : 0, out:'transaction_id3', in : 'transaction_id' };
        $scope.ps_transId4 = { cb : 0, out:'transaction_id4', in : 'transaction_id' };
        var userInfo= localStorageService.get('logedInUser');
        //$scope.buyerSetObj.userName=userInfo.usrName;
        $scope.buyerSetObj.cmp = userInfo.cmp;
        $scope.decipher = "false";
        $scope.mappings             = [{}];
        $scope.qualifications       = [];
        $scope.decipherObj = {};
        $scope.decipherObj.selectedURI          = 'Decipher';
        $scope.decipherObj.selectedSupplierType = 'Main';
        $scope.decipherObj.directory_name = '';
        $scope.decipherObj.if_many = '';
        $scope.decipherObj.if_dsp = '';
        $scope.decipherObj.selectedQualification = { label : '', value : 0};
        $scope.selectedCountry = {id: '', label: '', value : ''};
        $scope.selectedLanguage = {name: '', trans_code : ''};
        $scope.countries = [];
        $scope.lang = [];
        $scope.savedDecipherObj = [];

        

         /* Fetch all Qualifactions*/
        commonApi.getAllMasterData().success(function (data) {
            _.each(data.values,function(record){
                $scope.qualifications.push({
                    label : record.masterKey,
                    value : record.id,
                    conditions: record.values || []
                });
            });
        }).error(function (err) {
            $scope.loader.show = false;
            notify({message: err.msg, classes: 'alert-danger', duration: 2000});
        });

        /* Fetch all Countries */
        commonApi.countries().success(function (data) {
            if(_.has(data,"countries")){
                if(data.countries.values){
                    _.each(data.countries.values,function(countryRecord){
                        $scope.countries.push({
                            id : countryRecord.id,
                            label : countryRecord.name,
                            value : countryRecord.short_Code
                        });
                    });
                    $scope.setCountry({id: '1', label: 'United States', value : 'US'}, 'en');
                }else{
                    console.log({ status: "Failure", msg: "Countries Value's not found !" });
                }
            }else{
                console.log({ status: "Failure", msg: "Countries not found !" });
            }
        }).error(function (err) {
            $scope.loader.show = false;
            notify({message: err.msg, classes: 'alert-danger', duration: 2000});
        });

        getBuyerInfo($scope.buyerSetObj.cmp);

        $scope.selectQualification = function(qualification, index) {
            $scope.showAddMappingTab = false;
            $scope.showAddConditionsTab = false;
            $scope.ageIncomeQualExist = false;
            $scope.conditionData = {};
            $scope.decipherCheckData= {};
            if(qualification && Object.keys(qualification.length > 0)){
                $scope.decipherObj.selectedQualification.label = qualification.label;
                $scope.decipherObj.selectedQualification.value = qualification.value;
                $scope.mappings[index]['qualification'] = qualification;
                if($scope.mappings[index] && $scope.mappings[index].data){
                    if(_.contains(ageIncomeQual, qualification.value)){
                        $scope.ageIncomeQualExist = true;
                    }
                    else if(qualification.conditions && qualification.conditions.length ===0){
                        $scope.showAddMappingTab = true;
                    }
                    else{
                        $scope.showAddConditionsTab = true;
                    }
                }
            }
            if(index < $scope.mappings.length - 1){
                var tempObj = {};
                tempObj[$scope.mappings[index].data]= $scope.mappings[index].qualification.value;
                buyerMappings.splice(index, 1);
                buyerMappings.splice(index, 0, tempObj);
            }
        };


        $scope.setCountry = function(country, lang = '') {
            if(country){
                $scope.selectedCountry.id = country.id;
                $scope.selectedCountry.label = country.label;
                $scope.selectedCountry.value = country.value;
                $scope.selectedLanguage = {name: '', trans_code : ''};
            
                if($scope.savedDecipherObj.length > 0){
                    var data = _.find($scope.savedDecipherObj, function(x){ return x.locale.split("_")[1] ==  country.value; });
                    if(data && Object.keys(data).length > 0){
                        if(data.selectedQualification && data.selectedQualification.length > 0){
                            displayMappings(data.selectedQualification);
                        }else{
                            $scope.mappings = [];
                            buyerMappings = [];
                            $scope.qualConditionData ={};
                            $scope.conditionData ={};
                            $scope.decipherCheckData =[]; 
                            $scope.mappings.push({
                                'data':"",
                                'qualification':""
                            })
                        }

                        $scope.decipherObj.selectedURI          = data.selectedURI;
                        $scope.decipherObj.selectedSupplierType = data.selectedSupplierType;
                        $scope.decipherObj.directory_name = data.directory_name;
                        $scope.decipherObj.if_many = data.if_many;
                        $scope.decipherObj.if_dsp = data.if_dsp;
                        getLanguageDropdownValue(country, data.locale.split("_")[0]);
                    }else{
                        resetData();
                        getLanguageDropdownValue(country, lang);
                    }
                }else{
                    getLanguageDropdownValue(country, lang);
                }
            }
            
        };

        $scope.setDecipher = function(value) {
          $scope.decipher = value;
        };

        $scope.addMapping = function(index) {
            $scope.showAddConditionsTab = false;
            $scope.showAddMappingTab = false;
            $scope.ageIncomeQualExist = false;
            if($scope.mappings && $scope.mappings.length > 0){
                if(buyerMappings[index]){
                    $scope.mappings.push({
                        'data':"",
                        'qualification':""
                    })
                }else{
                    let mappingObj;
                    mappingObj = $scope.mappings[index];
                    if(mappingObj && mappingObj.data && mappingObj.qualification && Object.keys(mappingObj).length > 0){
                        if(!buyerMappings[index]){
                            let tempObj = {};
                            tempObj['decipherCode'] = mappingObj.data.toString();
                            tempObj['psCode']= (mappingObj.qualification.value).toString();
                            buyerMappings.push(tempObj);
                        }
                        
                        if($scope.mappings.length == 1 || !(index < $scope.mappings.length-1)){
                            $scope.mappings.push({
                                'data':"",
                                'qualification':""
                            })
                        }
                    }else{
                        notify({message: "Enter qualification for decipher and ps", classes: 'alert-danger', duration: 2000}); 
                    }
                }
            }
        };

        $scope.closeMapping = function(index){
          $scope.mappings.splice(index, 1);
          if($scope.qualConditionData && $scope.qualConditionData[index]){
            delete $scope.qualConditionData[index];
          }
          buyerMappings.splice(index,1);
        }

        $scope.selectUri = function(uri) {
            $scope.decipherObj.selectedURI = uri;
        };

        $scope.selectSupplierType = function(uri) {
            $scope.decipherObj.selectedSupplierType = uri;
        };

        $scope.checkForTab = function(index){
            if(($scope.mappings[index] && $scope.mappings[index].data && $scope.mappings[index].qualification && $scope.mappings[index].qualification.conditions ) ){
                if($scope.mappings[index].qualification.conditions.length > 0 && $scope.mappings[index].qualification.value && $scope.mappings[index].qualification.value !== 213){
                    return true;
                }else if(_.contains(ageIncomeQual, $scope.mappings[index].qualification.value)){
                    return true;
                }else{
                    return false;
                }
            }
            
        }

       $scope.saveBuyerSetting = function(){
            var variable_mapping = [];
            
            if($scope.transaction_id && $scope.transaction_id.cb) {
                var transaction = {
                    "outgoing" : ($scope.transaction_id.out != '' ? $scope.transaction_id.out : 'transaction_id'), //default transaction_id if empty
                    "incoming" : $scope.transaction_id.in
                }

                variable_mapping.push({"ps_transaction":transaction});
            }
            if($scope.psid && $scope.psid.cb) {
                var psid = {
                    "outgoing" : ($scope.psid.out != '' ? $scope.psid.out : 'psid'), //default psid if empty
                    "incoming" : $scope.psid.in
                }

                variable_mapping.push({"ps_psid":psid});
            }
            if($scope.status && $scope.status.cb) {
                var status = {
                    "outgoing" : $scope.status.out,
                    "incoming" : $scope.status.in
                }

                variable_mapping.push({"ps_status":status});
            }
            if($scope.buyerSetObj.isHashing && $scope.buyerSetObj.private_key != '' && !$scope.ps_hash.cb) {
                angular.element(".ps_hash_cb").trigger("click");
                $scope.ps_hash.cb = 1;
            }
            if($scope.ps_hash && $scope.ps_hash.cb) {
                var ps_hash = {
                    "outgoing" : $scope.ps_hash.out,
                    "incoming" : $scope.ps_hash.in
                }

                variable_mapping.push({"ps_hash":ps_hash});
            }

            // add the parameter transaction_id2 for pd-369

           if($scope.ps_transId2 && $scope.ps_transId2.cb) {
               var transaction_id2 = {
                   "outgoing" : ($scope.ps_transId2.out != '' ? $scope.ps_transId2.out : 'transaction_id2'), //default transaction_id if empty
                   "incoming" : $scope.ps_transId2.in
               }

               variable_mapping.push({"ps_transaction_id2" : transaction_id2});
           }

           // add the parameter transaction_id3 for pd-369

           if($scope.ps_transId3 && $scope.ps_transId3.cb) {
               var transaction_id3 = {
                   "outgoing" : ($scope.ps_transId3.out != '' ? $scope.ps_transId3.out : 'transaction_id3'), //default transaction_id if empty
                   "incoming" : $scope.ps_transId3.in
               }

               variable_mapping.push({"ps_transaction_id3" : transaction_id3});
           }

           // add the parameter transaction_id4 for pd-369

           if($scope.ps_transId4 && $scope.ps_transId4.cb) {
               var transaction_id4 = {
                   "outgoing" : ($scope.ps_transId4.out != '' ? $scope.ps_transId4.out : 'transaction_id4'), //default transaction_id if empty
                   "incoming" : $scope.ps_transId4.in
               }

               variable_mapping.push({"ps_transaction_id4" : transaction_id4});
           }
           // added supplier_id

           if($scope.ps_supplier_id && $scope.ps_supplier_id.cb) {
               var supplier_id = {
                   "outgoing" : ($scope.ps_supplier_id.out != '' ? $scope.ps_supplier_id.out : 'supplier_id'),
                   "incoming" : $scope.ps_supplier_id.in
               }

               variable_mapping.push({"ps_supplier_id" :  supplier_id});
           }
           // Added Hashing Params
           if($scope.buyerSetObj.isHashing == '1') {
                $scope.buyerSetObj.isHashing = true;
           }else {
                $scope.buyerSetObj.isHashing = false;
           }
            $scope.buyerSetObj.variable_mapping = variable_mapping;

            $scope.buyerSetObj.isDecipher = (($scope.decipher == "true") ? true : false);
            var locale = $scope.selectedLanguage.trans_code + "_" + $scope.selectedCountry.value;
            $scope.decipherObj.cmp = $scope.buyerSetObj.cmp;
            $scope.decipherObj.locale = locale;
            $scope.decipherObj.selectedQualification = buyerMappings;
            $scope.buyerSetObj.decipherObj = $scope.decipherObj;
            
            ngProgressLite.start();
            if($scope.buyerSetObj.isDecipher && ($scope.decipherObj.directory_name == "" || $scope.selectedLanguage.trans_code == "")){
              notify({message:'Please provide key information',classes:'alert-danger',duration:2000} );
            }else if ($scope.buyerSetObj.isHashing && $scope.buyerSetObj.private_key == ''){
              notify({message:'Please provide key information',classes:'alert-danger',duration:2000} );
            } else {
              buyerSettingService.updateSetting($scope.buyerSetObj.cmp,$scope.buyerSetObj).success(function(data){
                  ngProgressLite.done();
                  notify({message:'Buyer Setting information has been added successfully',classes:'alert-success',duration:2000} );
              }).error(function(err){
                  ngProgressLite.start();
                  notify({message:'Please provide all required information',classes:'alert-danger',duration:2000} );
              });
            }
         }


        function getBuyerInfo(id){
            ngProgressLite.start();
            buyerSettingService.getSetting(id).success(function (data) {
                ngProgressLite.done();
                var isPSIDExist = false;
                var isPSHashExist = false;
                if(data.apiStatus){
                    $scope.buyerSetObj.cmpName = data.buyer.companyName;
                    $scope.buyerSetObj.isHashing = data.buyer.isHashing;
                    $scope.buyerSetObj.private_key = data.buyer.private_key;
                    $scope.decipher = data.buyer.isDecipher ? "true" : "false";
                    if(data.buyer && data.buyer.decipherObj && data.buyer.decipherObj.length > 0){
                        var obj = data.buyer.decipherObj[0];
                        if(obj && obj.selectedQualification && obj.selectedQualification.length > 0){
                            displayMappings(obj.selectedQualification);
                        }

                        $scope.savedDecipherObj = data.buyer.decipherObj;
                        $scope.decipherObj.selectedURI          = obj.selectedURI;
                        $scope.decipherObj.selectedSupplierType = obj.selectedSupplierType;
                        $scope.decipherObj.directory_name = obj.directory_name;
                        $scope.decipherObj.if_many = obj.if_many;
                        $scope.decipherObj.if_dsp = obj.if_dsp;
                        var sp = obj.locale.split("_");
                        var country = _.findWhere($scope.countries,{value: sp[1]});
                        $scope.setCountry(country, sp[0])
                    }
                    if(data.buyer.variable_mapping){
                        for(var i = 0; i < data.buyer.variable_mapping.length; i++) {
                            for(var j in data.buyer.variable_mapping[i]) {

                                // added supplier_id

                                if(j == "ps_supplier_id") {
                                    $scope.ps_supplier_id.cb = 1;
                                    $scope.ps_supplier_id.in = data.buyer.variable_mapping[i][j].incoming;
                                    $scope.ps_supplier_id.out = data.buyer.variable_mapping[i][j].outgoing;
                                }

                                if(j == "ps_transaction") {
                                    $scope.transaction_id.in = data.buyer.variable_mapping[i][j].incoming;
                                    $scope.transaction_id.out = data.buyer.variable_mapping[i][j].outgoing;
                                }

                                if(j == "ps_transaction") {
                                    $scope.transaction_id.in = data.buyer.variable_mapping[i][j].incoming;
                                    $scope.transaction_id.out = data.buyer.variable_mapping[i][j].outgoing;
                                }
                                if(j == "ps_psid") {
                                    isPSIDExist = true;
                                    $scope.psid.in = data.buyer.variable_mapping[i][j].incoming;
                                    $scope.psid.out = data.buyer.variable_mapping[i][j].outgoing;
                                }
                                if(j == "ps_status") {
                                    $scope.status.in = data.buyer.variable_mapping[i][j].incoming;
                                    $scope.status.out = data.buyer.variable_mapping[i][j].outgoing;
                                }
                                if(j == "ps_hash") {
                                    isPSHashExist = true;
                                    $scope.ps_hash.in = data.buyer.variable_mapping[i][j].incoming;
                                    $scope.ps_hash.out = data.buyer.variable_mapping[i][j].outgoing;
                                }

                                // pd-369

                                if(j == "ps_transaction_id2") {
                                    $scope.ps_transId2.cb = 1;
                                    $scope.ps_transId2.in = data.buyer.variable_mapping[i][j].incoming;
                                    $scope.ps_transId2.out = data.buyer.variable_mapping[i][j].outgoing;
                                }

                                if(j == "ps_transaction_id3") {
                                    $scope.ps_transId3.cb = 1;
                                    $scope.ps_transId3.in = data.buyer.variable_mapping[i][j].incoming;
                                    $scope.ps_transId3.out = data.buyer.variable_mapping[i][j].outgoing;
                                }

                                if(j == "ps_transaction_id4") {
                                    $scope.ps_transId4.cb = 1;
                                    $scope.ps_transId4.in = data.buyer.variable_mapping[i][j].incoming;
                                    $scope.ps_transId4.out = data.buyer.variable_mapping[i][j].outgoing;
                                }
                            
                            }
                        }
                    } 
                    if(!isPSIDExist){
                        $scope.psid.cb = 0;
                    }
                    if(!isPSHashExist) $scope.ps_hash.cb = 0;
                }
            }).error(function (err) {
                ngProgressLite.start();
                notify({message:err.msg,classes:'alert-danger',duration:2000} );
            })
        }
        //Set setting Tab
        $scope.tab = 1;
        $scope.setTab = function(newTab){
          $scope.tab = newTab;
        };

        $scope.isSet = function(tabNum){
          return $scope.tab === tabNum;
        };

        $scope.cancelBuyerSetting=function(){
            
            getBuyerInfo($scope.buyerSetObj.cmp);

        }


        $scope.conditionCheck = function(){
           Object.keys($scope.conditionData.selectedList).forEach(function(key, idx) {
                if(!$scope.conditionData.selectedList[key]){
                    delete $scope.conditionData.selectedList[key];
                }
           }); 
        }
       

        $scope.saveQualifications = function(){
            if(($scope.conditionData.selectedList|| $scope.conditionData.qualConditionTwo) && $scope.conditionData.qualConditionOne && (((typeof $scope.conditionData.selectedList === "object") && Object.keys($scope.conditionData.selectedList).length > 0) || $scope.conditionData.qualConditionTwo) && qualificationText){
                let psCondition;
                let decipherCondition;
                let conditionRecord;
                let checkedConditions =[];
                decipherCondition = $scope.conditionData.qualConditionOne;
                if($scope.ageIncomeQualExist && $scope.conditionData.qualConditionTwo){
                    psCondition = $scope.conditionData.qualConditionTwo;
                }else{
                    checkedConditions = _.keys($scope.conditionData.selectedList);
                    conditionRecord =  _.findWhere( $scope.decipherCheckData, {name: checkedConditions[0]});
                    if(conditionRecord && conditionRecord.id){
                        psCondition =  conditionRecord.id;
                    }
                }
                if(decipherCondition && psCondition){
                    let valueArray=[];
                    let keyArray=[];
                    let tempObj={};
                    let tempKey;
                    let tempValue;
                    let mappingObj;
                        mappingObj = $scope.mappings[conditionIndex];
                        if(mappingObj && mappingObj.data && mappingObj.qualification){
                            tempKey   = mappingObj.data + "." + decipherCondition;
                            tempValue = mappingObj.qualification.value+"." + psCondition
                        }
                        if(tempKey && tempValue){
                            tempObj['decipherCode'] = tempKey;
                            tempObj['psCode'] = tempValue;
                            buyerMappings[conditionIndex] = tempObj;
                        }
                }
                if($scope.mappings[conditionIndex] && $scope.mappings[conditionIndex].decipherCondition){
                    $scope.mappings[conditionIndex].decipherCondition =  $scope.conditionData.qualConditionOne;

                }
                if($scope.mappings[conditionIndex] && $scope.mappings[conditionIndex].psConditionText){
                    $scope.mappings[conditionIndex].psConditionText = $scope.conditionData.qualConditionTwo;
                }
                $scope.showAddMappingTab = true;
                $scope.qualConditionData[conditionIndex] = $scope.conditionData;
                let keyName = _.keys($scope.conditionData.selectedList);
                if(keyName && keyName.length > 0 && $scope.mappings[conditionIndex] && $scope.mappings[conditionIndex] && $scope.mappings[conditionIndex].decipherCheckData){
                    _.each($scope.mappings[conditionIndex].decipherCheckData, function(data){
                        if(data && data.name == keyName){
                        data['selected'] = true;
                        }
                        else if(data.selected){
                        data.selected ="";
                        }
                    })
                }
            }else{
                notify({message: "Incoplete qualification data", classes: 'alert-danger', duration: 2000});
            } 
        }


        $scope.showConditions = function(index){
            $scope.conditionData={};
            conditionIndex = index;
            $scope.indexForCondition = conditionIndex;
            $scope.decipherCheckData=[];
            qualificationText = false;
            if($scope.qualifications && $scope.mappings && $scope.qualifications.length > 0 && $scope.mappings.length > 0 && $scope.mappings[index].qualification && $scope.mappings[index].qualification.value){
                if($scope.mappings[index].data){
                    qualificationText= true;
                }else{
                    qualificationText = false;
                }
                var qualificationCode = $scope.mappings[index].qualification.value;
                var qualificationRecord = _.findWhere($scope.qualifications, {value:qualificationCode});
                    if(qualificationRecord && qualificationRecord.conditions && qualificationRecord.conditions.length > 0){
                          $scope.ageIncomeQualExist = true;
                        _.each(qualificationRecord.conditions, function(record){
                            if(record && record.name){
                                $scope.ageIncomeQualExist = false;
                                $scope.showAddConditionsTab = true;
                                $scope.decipherCheckData.push(record);
                            }
                        })
                    } 
                if($scope.decipherCheckData && $scope.decipherCheckData.length > 0){
                    completeCheckedData[index] = $scope.decipherCheckData;
                }
                if($scope.qualConditionData && $scope.qualConditionData[index] && Object.keys($scope.qualConditionData[index]).length > 0 ){

                    let checkedList;
                    let checkRecord;
                    if($scope.qualConditionData[index].qualConditionTwo){
                        $scope.showAddConditionsTab = false;
                    }
                    $scope.conditionData = $scope.qualConditionData[index];
                    if(completeCheckedData[index]){
                        checkedList = _.keys($scope.conditionData.selectedList);
                        checkRecord = completeCheckedData[index];
                        if(checkedList && checkedList.length > 0 && checkRecord && checkRecord.length > 0){
                            $scope.decipherCheckData=[];
                            _.each(checkedList, function(qualChecked){
                                _.each(checkRecord, function(record){
                                    if(record.name === qualChecked){
                                        record['selected'] = true;
                                    }

                                })
                            })
                            $scope.decipherCheckData =checkRecord;
                        }
                    }
                    
                }
            }
            if($scope.mappings && $scope.mappings.length > 0){
                if($scope.mappings[index].decipherCheckData && $scope.mappings[index].decipherCheckData.length > 0){
                    $scope.decipherCheckData = $scope.mappings[index].decipherCheckData;
                }
                let record;
                record = $scope.mappings[index];
                if(record && record.decipherCondition && ((record.psCondition && Object.keys(record.psCondition).length > 0) || record.psConditionText)){
                    $scope.showAddConditionsTab = true;
                    $scope.ageIncomeQualExist = false;
                    $scope.conditionData.qualConditionOne = record.decipherCondition
                    if(record.psConditionText){
                        $scope.showAddConditionsTab = false;
                        $scope.ageIncomeQualExist = true;
                        $scope.conditionData.qualConditionTwo = record.psConditionText;
                        /*if()*/
                    }
                    if(record.decipherCheckData){
                        $scope.decipherCheckData = record.decipherCheckData;
                        if($scope.decipherCheckData && $scope.decipherCheckData.length > 0){
                            let tempObj={};
                            _.each($scope.decipherCheckData, function(data){
                                if(data.selected){
                                    tempObj[data.name] = data.selected; 
                                }
                            })
                            if(tempObj){
                                $scope.conditionData['selectedList'] = tempObj;
                            }
                        }

                    }

                }
            }
        }
        

        $scope.setLanguage = function(lang){
            $scope.selectedLanguage.name = lang.name;
            $scope.selectedLanguage.trans_code = lang.transalte_code;
            if($scope.savedDecipherObj.length > 0){
                var data = _.find($scope.savedDecipherObj, function(x) { 
                                var locale = x.locale.split("_"); 
                                return ((locale[0] == lang.transalte_code)&&(locale[1] == $scope.selectedCountry.value)); 
                            });
                if(data && Object.keys(data).length > 0){
                    if(data.selectedQualification && data.selectedQualification.length > 0){
                        displayMappings(data.selectedQualification);
                    }else{
                        $scope.mappings = [];
                        buyerMappings = [];
                        $scope.qualConditionData ={};
                        $scope.conditionData ={};
                        $scope.decipherCheckData =[]; 
                        $scope.mappings.push({
                            'data':"",
                            'qualification':""
                        })
                    }

                    $scope.decipherObj.selectedURI          = data.selectedURI;
                    $scope.decipherObj.selectedSupplierType = data.selectedSupplierType;
                    $scope.decipherObj.directory_name = data.directory_name;
                    $scope.decipherObj.if_many = data.if_many;
                    $scope.decipherObj.if_dsp = data.if_dsp;
                }else{
                    resetData();
                }
            }
        }


        function getLanguageDropdownValue(country, selectedLang) {
            commonApi.getLanguageByCountry(country.id).success(function(dataLang) {
                if (dataLang.languages != null) {
                    $scope.lang = dataLang.languages;
                    if(selectedLang != ''){
                      var slang = _.findWhere($scope.lang, {transalte_code: selectedLang});
                      $scope.setLanguage(slang);
                    }
                }
            });
        }


        function resetData(){
            $scope.mappings = [];
            buyerMappings = [];
            $scope.qualConditionData ={};
            $scope.conditionData ={};
            $scope.decipherCheckData =[];
            $scope.decipherObj.selectedURI          = 'Decipher';
            $scope.decipherObj.selectedSupplierType = 'Main';
            $scope.decipherObj.directory_name = '';
            $scope.decipherObj.if_many = '';
            $scope.decipherObj.if_dsp = '';
            $scope.mappings.push({
                'data':"",
                'qualification':""
            })
        }


        function displayMappings(mappingData){
            buyerMappings = mappingData;
            $scope.showAddConditionsTab= false;
            $scope.ageIncomeQualExist = false;
            $scope.mappings=[];
            _.each(mappingData, function(data){
                $scope.showAddConditionsTab= false;
                $scope.ageIncomeQualExist = false;
                let decipherArr = new Array();
                let psArr = new Array();
                let tempObj={};
                if( data && data.decipherCode){
                    decipherArr = data.decipherCode.split(".");
                    tempObj['data'] = decipherArr[0];
                    if(decipherArr[1]){
                        tempObj['decipherCondition'] = decipherArr[1];
                    }
                }
                if(data && data.psCode){
                    let qualCode;
                    let qualificationRecord;
                    psArr    = data.psCode.split(".")
                    qualCode = parseInt(psArr[0]);

                    qualificationRecord = _.findWhere($scope.qualifications, {value:parseInt(qualCode)});
                    tempObj['qualification'] = qualificationRecord;
                    if(qualificationRecord){
                        $scope.decipherCheckData = angular.copy(qualificationRecord.conditions);
                    }
                    if(psArr[1]){
                        let record;
                            if($scope.decipherCheckData){
                                record = _.findWhere($scope.decipherCheckData, {id: parseInt(psArr[1])});
                            }
                            if(record){
                                $scope.showAddConditionsTab = true;
                                record['selected'] = true;
                                tempObj['psCondition'] = record;
                                tempObj['decipherCheckData'] = $scope.decipherCheckData;

                            }else{
                                $scope.ageIncomeQualExist =true;
                                tempObj['psConditionText'] = psArr[1]; 
                            }
                    }else if(qualificationRecord && qualificationRecord.conditions && qualificationRecord.conditions.length > 0){
                        $scope.showAddConditionsTab = true;
                    }
                }
                if(tempObj && Object.keys(tempObj).length > 0){
                    $scope.mappings.push(tempObj);
                }

            })
            $scope.mappings.push({
                'data':"",
                'qualification':""
            })
        }

        $scope.preventSearchToClose = function(event) {
          event.preventDefault();
          event.stopPropagation();
        }

    }]);
angular.module('pureSpectrumApp')
    .controller('choosesupplierCtrl', ['$scope', '$http', '$state', '$stateParams', '$cookies', '$window', 'config', 'commonApi', 'createSurvey', 'companyService' ,'supplierService', 'notify', 'user', 'localStorageService', 'ngProgressLite', '$filter', '$timeout', '$rootScope', 'settingService','feasibilityService','encodeDecodeFactory', function ($scope, $http, $state, $stateParams, $cookies, $window, config, commonApi, createSurvey, companyService, supplierService, notify, user, localStorageService, ngProgressLite, $filter, $timeout, $rootScope, settingService, feasibilityService, encodeDecodeFactory) {

        var userData = localStorageService.get('logedInUser');
        var surveyManagementIR;
        $scope.userData = userData;

        $scope.showPriceOverrideBox = false;
        //PD-1145
        $scope.feasibilityCmp = true;
        /*if(_.contains(config.cmp, $scope.userData.cmp)) {
            $scope.feasibilityCmp = true;
        }*/
        //PD-1096
        if(_.contains(config.overridCmp, $scope.userData.cmp)) {
            $scope.showPriceOverrideBox = true;
        }

        var accessRole=localStorageService.get('accessRole');
        $scope.saveSuppliersData = {};
        $scope.supplier = [];
        $scope.headerValues = {
            completes: 0,
            cpi: 0,
            total: 0,
            field_time:0
        };

        var surveyData = new Object(); /**PD-844*/
        var masterDatas = new Array(); /**PD-844*/
        $scope.manageEdit = ($stateParams.edit == 'editStep2');
        $scope.suppliers = [];
        $scope.suppliersCount = 0;
        $scope.totalAllocations = 0;
        $scope.tempSupplier = [];
        $scope.buyerCPI = [];
        $scope.totalRemaining = 0;
        $scope.reCalculateTimeOut = 0;
        $scope.arr = [];
        $scope.currency_symbol = '$';
        $scope.currencyFx = {fx: 321,symbol: '$'};
        $scope.loader = {show: false};//PD-955
        /*--- Show Loader on every http request----*/
        $rootScope.$on('loading:progress', function (){
            $scope.loader.show = true;//PD-955
        });

        $rootScope.$on('loading:finish', function (){
            $scope.loader.show = false;//PD-955
        });
        /*--- Show Loader on every http request----*/
        
        $scope.isOperatorOverideEdit = false;

        //PD-1316
        $scope.srvId = $rootScope.clone && $rootScope.newId != undefined && $rootScope.newId != null && $rootScope.newId != "" ? $rootScope.newId : $stateParams.surveyid;

        // for supplier flexibility
        $scope.isSupplierFlexibility = true;
        $scope.flexibleValue = 100; //PD-1127
        $scope.surveyPauseThreshold = '';
        $scope.operatorOverrideMdl = '';
        $scope.manualOperatorOverride = false;
        $scope.disableSupCpiInput = true;
        // show price override text box only to operator type users
        if(accessRole !== undefined && (accessRole.operator.admin == true || accessRole.operator.full == true || accessRole.operator.limited == true ) ) {
            $scope.showPriceOverrideBox = true;
        }

        getSurveyData();
        // For disabling Next Button Until Supplier Loads
        $scope.showLoader = 'DataLoading';

        var allocationsGreaterThanAcheived = true; // Stops Survey Update if Supplier Allocations are less than their achieved

        // To comapare Survey incidence and loi with suppliers 
        var surveyIncidence = 0;
        var surveyLoi = 0; 

        //get survey data
        function getSurveyData() {
            //$scope.loader.show = true;//PD-955
            var id = $stateParams.surveyid; //PD-1323

            createSurvey.getSurveyById(id).success(function (data) {
                var languageId = data.survey[0].language || 1;
                var countryId = data.survey[0].country || 1;
                $scope.survey_locale = encodeDecodeFactory.encode(data.survey[0].locale); // set for footer  updatesurvey fn.
                $scope.headerValues.completes = data.survey[0].number;
                $scope.headerValues.field_time = data.survey[0].field_time;
                $scope.survey_locale = encodeDecodeFactory.encode(data.survey[0].locale);
                // For Click Based Survey
                $scope.completesNeeded = data.survey[0].clickBalance == 0 ? data.survey[0].number:data.survey[0].estmClicks;
                $scope.clickBalance = data.survey[0].clickBalance;
                $scope.estmClicks = data.survey[0].estmClicks;
                console.log('$scope.completesNeeded ',$scope.completesNeeded);
                //$scope.headerValues.cpi = data.survey[0].cpi;
                //Remove Old CPI for Live Clone
                if($rootScope.clone && $scope.checkLive_pus_Clone) {
                    data.survey[0].cpi = $scope.liveCloneCPI;
                }
                if(data.survey[0].currencyFx && data.survey[0].currencyFx.symbol) {
                    $scope.currency_symbol = data.survey[0].currencyFx.symbol;
                    $scope.currencyFx = data.survey[0].currencyFx;
                }

                surveyIncidence = data.survey[0].incidence;
                surveyLoi = data.survey[0].lengthOfSurvey;
                $scope.arr = data.survey[0];

                if (data.survey[0].supplier.length > 0) {
                    //Remove fielded on Live/Paused/Closed Clone
                    if(data.survey[0].status != 11 && $scope.checkLive_pus_Clone) {
                        _.each(data.survey[0].supplier, function(singleSurvDta) {
                            delete singleSurvDta.fielded;
                        });
                        $scope.hideFieldedFlg = false;
                    }
                    else {
                        $scope.hideFieldedFlg = true;
                    }
                    $scope.tempSupplier = data.survey[0].supplier;
                }
                
                surveyData = data; /** PD-844*/
                console.log('1');
                getSupplier(data.survey[0].company, countryId, languageId); // data.survey[0].company - survey created by buyer id
                console.log('2');
                $scope.showLoader = '';
                //$scope.loader.show = false;//PD-955
                
            }).error(function (err) {
                notify({message: err.msg, classes: 'alert-danger', duration: 2000});
                //$scope.loader.show = false;//PD-955
            });
        }

        function getFlexibilityPricesParams(srvId) {
            // $scope.loader.show = true;//PD-955
            supplierService.getFlexibilityPricesParams(srvId)
                .success(function (data) {
                    if(data.hasOwnProperty('flexibility') && $scope.tempSupplier[0] && !$scope.tempSupplier[0].hasOwnProperty('flexValue')) {
                        $scope.flexibleValue = data.flexibility;
                    }else if(data.hasOwnProperty('flexibility') && $scope.tempSupplier[0] && $scope.tempSupplier[0].hasOwnProperty('flexValue')){
                        $scope.flexibleValue = $scope.tempSupplier[0].flexValue;
                    }
                    //Handle clone survey surveyPauseThreshold on IR change issue 
                    if(data.hasOwnProperty('survey_pause_threshold') && !$rootScope.clone) {
                        $scope.surveyPauseThreshold = data.survey_pause_threshold;
                        $scope.oldSurveyPauseThreshold = data.survey_pause_threshold;
                    }
                    else {
                       $scope.surveyPauseThreshold = 0; 
                       $scope.oldSurveyPauseThreshold = 0;
                    }
                    if(data.hasOwnProperty('survey_price_override') && data.survey_price_override !== null) {
                        $scope.operatorOverrideMdl = data.survey_price_override;
                        $scope.setPriceOverride();
                        angular.forEach($scope.suppliers, function(supp) {
                            supp['oldCpi'] = $scope.operatorOverrideMdl;
                        });
                    }
                    if(data.hasOwnProperty('manual_override')) {
                        //$scope.manualOperatorOverride = data.manual_override;
                        //$scope.manualOverrideMdl = data.manual_override;
                        
                        if($scope.showPriceOverrideBox == true) { // show only for operator
                            $scope.disableSupCpiInput = !data.manual_override;
                        }
                        $scope.manualOperatorOverride = data.manual_override;
                        $scope.manualOverrideMdl = data.manual_override;
                        if(data.manual_override == true) {
                            $scope.operatorOverrideMdl = '';
                            var isFlexibilityUpdate = false;
                            getBuyerCPI(isFlexibilityUpdate);
                        }
                       
                    }
                    if(data.hasOwnProperty('survey_acpi')) {
                        $scope.headerValues.cpi = data.survey_acpi;
                    }
                  //  $scope.loader.show = false;//PD-955
                })
                .error(function (err) {
                    //$scope.loader.show = false;//PD-955
                    notify({message: "Error while fetching default flexibility", classes: 'alert-danger', duration: 2000});
                });
        }

        function getSupplier(id , countryId, languageId) {
            console.log('1 1');
            //$scope.loader.show = true;//PD-955
            supplierService.getNonBlockedSuppliers(id, countryId, languageId).success(function (data) {
                if (data.apiStatus == "success") {
                    var predicate = 'supplrSt';
                    $scope.suppliers = data.supplierList;
                    $scope.suppliers = $filter('orderBy')($scope.suppliers, predicate, false);
                    $scope.suppliersCount = data.supplierList.length;

                    //Decreasing suppliers count which are not eligible for the survey
                    for(var j = 0; j < $scope.suppliers.length; j++){
                        if($scope.userData && $scope.userData.cmp == 56){
                            console.log('done');
                            _.each($scope.suppliers, function(eachSup, j){
                                // Prodege MR
                                if($scope.suppliers[j].id == 107){
                                    $scope.suppliers[j].name = "GTM/My Survey";
                                }
                                // Avtive Measure
                                /*if($scope.suppliers[j].id == 79){
                                    $scope.suppliers[j].name = "GTM/My Survey";
                                }*/
                            }); 
                        }
                        /*if($scope.userData && $scope.userData.cmp == 145){
                            console.log('done');
                            _.each($scope.suppliers, function(eachSup, j){
                                if($scope.suppliers[j].id == 9){
                                    $scope.suppliers[j].name = "GTM";
                                }
                                if($scope.suppliers[j].id == 26){
                                    $scope.suppliers[j].name = "My Survey";
                                }
                            });   
                        }*/
                        if($scope.suppliers[j].min_incidence > surveyIncidence || $scope.suppliers[j].max_loi < surveyLoi){
                            $scope.suppliersCount--;
                            $scope.suppliers[j].isValid = false;
                        }else {
                            $scope.suppliers[j].isValid = true;
                        }
                    }

                    // Sorting for valid suppliers is true and false
                    $scope.suppliers.sort(function(a,b){return b.isValid - a.isValid});

                    console.log('1 2');
                    // Dividing Allocations
                    for(var i = 0; i < $scope.suppliers.length; i++) {
                        if($scope.suppliers[i].isValid == true){
                            console.log('1 3 ',$scope.completesNeeded);
                            var allocation = parseInt($scope.completesNeeded / $scope.suppliersCount);
                            var allocationPercentage = parseFloat((allocation / parseInt($scope.completesNeeded)) * 100).toFixed(2);
                            var allocationData = {
                                allocationValue: allocation,
                                allocationPercentile: parseInt(allocationPercentage),
                                actualPercentile: allocationPercentage,
                                min : '',
                                max : ''
                            };

                            $scope.suppliers[i].allocations = allocationData;
                            $scope.totalAllocations = parseInt($scope.totalAllocations + $scope.suppliers[i].allocations.allocationValue);
                        }else{
                            var allocationData = {
                                allocationValue: 0,
                                allocationPercentile: 0,
                                actualPercentile: 0,
                                min : 0,
                                max : 0
                            };
                            $scope.suppliers[i].allocations = allocationData;
                        }
                    }
                    // For checking the first valid supplier and giving the remaining allocation to him
                    for(var i=0; i < $scope.suppliers.length; i++){
                        if($scope.suppliers[i].isValid == true){
                            $scope.suppliers[i].allocations.allocationValue = $scope.suppliers[i].allocations.allocationValue + ($scope.completesNeeded - $scope.totalAllocations);
                            $scope.totalAllocations = parseInt($scope.totalAllocations + ($scope.completesNeeded % $scope.suppliersCount));
                            break;
                        }
                    }
                    $scope.calculateFlexibility();
                    $scope.manualAllocationEdit = false; // Manual Edit only work on New Survey Creation
                }
                console.log('3 ',JSON.stringify($scope.tempSupplier));
                if ($scope.tempSupplier.length > 0) {
                    var allocationData = '';
                    var newTempArr = [];
                    _.each($scope.tempSupplier, function(tmpSupp){
                        if(tmpSupp.hasOwnProperty('isFlexibility')) {
                            $scope.isSupplierFlexibility = tmpSupp.isFlexibility;
                            $scope.flexibleValue = tmpSupp.flexValue;
                        }
                        newTempArr.push(tmpSupp.id);
                    });

                    for(var i = 0; i < $scope.suppliers.length; i++) {
                        var index = $scope.tempSupplier.map(function (todo) { return todo.id; }).indexOf($scope.suppliers[i].id);

                        if($.inArray($scope.suppliers[i].id, newTempArr) != -1) {
                            allocationData = {
                                allocationValue: parseInt($scope.tempSupplier[index].quantity),
                                actualPercentile: parseFloat($scope.tempSupplier[index].percentile).toFixed(2),
                                allocationPercentile: parseInt($scope.tempSupplier[index].percentile),
                                min: ($scope.tempSupplier[index].minimum)  ? parseInt($scope.tempSupplier[index].minimum) : 0,
                                max: ($scope.tempSupplier[index].maximum) ? parseInt($scope.tempSupplier[index].maximum) : 0,
                                fielded: parseInt($scope.tempSupplier[index].fielded)
                            };

                            $scope.totalAllocations = parseInt($scope.tempSupplier[index].total);
                        }
                        else {
                            allocationData = {
                                allocationValue: 0,
                                actualPercentile: 0,
                                allocationPercentile: 0
                            };
                        }
                        $scope.suppliers[i].allocations = allocationData;
                    }
                    $scope.manualAllocationEdit = true; // Manual Edit should not work on Supplier Edit Details
                }
                $scope.totalRemaining = parseInt(parseInt($scope.completesNeeded) - parseInt($scope.totalAllocations));
                var isFlexibilityUpdate = true;
                /* track the survey allocatin changes */
              
                /* ---------------------------------- */
                commonApi.getAllMasterData().success(function(masterData){
                    if(masterData.apiStatus == 'Success'){
                        masterDatas =  masterData.values;
                    }
                    getBuyerCPI(isFlexibilityUpdate);
                }).error(function (err) {
                    console.log('err '+JSON.stringify(err));
                    notify({message: err.msg, classes: 'alert-danger', duration: 2000});
                });
               /* $scope.loader.show = false;*///PD-955
               
                
            }).error(function (err) {
                //$scope.loader.show = false;//PD-955
                notify({message: err.msg, classes: 'alert-danger', duration: 2000});
            });

        }

        function getBuyerCPI(isFlexibilityUpdate) {
            //$scope.loader.show = true;//PD-955
            createSurvey.getBuyerCPI($stateParams.surveyid).success(function (data) {
                if (data.apiStatus == 'Success') {
                    $scope.buyerCPI = data.buyerCPI;

                    var suppliers = $scope.suppliers;
                    $scope.suppliers = suppliers.map(function (item) {
                        var cpi = $scope.buyerCPI.filter(function (buyer) {
                            return (buyer.supplier == item.id);
                        });

                        if (cpi.length > 0) {
                            item.cpi = (cpi[0].override_cost &&  $scope.manualOperatorOverride) ? cpi[0].override_cost : cpi[0].cost;
                            item.margin = (cpi[0].hasOwnProperty('margin') && cpi[0].margin !== '') ? cpi[0].margin : 20;
                            if(cpi[0].BCPI) {
                               item.BCPI =  cpi[0].BCPI // buyer cpi in usd 
                            }
                            if(cpi[0].CR) {
                               item.CR =  cpi[0].CR // currency reserve if currency !== USD
                            }
                        }
                        else {
                            item.cpi = 0;
                            item.margin = 20;
                        }
                        return item;
                    });
                    $scope.reCalculateCPI();
                    //calculateTotalCost();
                }

                checkFeasibilityStatus(suppliers);/**PD-844 */
                //$scope.loader.show = true;//PD-955
                angular.forEach($scope.suppliers, (supp) => {
                    if (!_.isUndefined(supp['cpi'])) {
                        supp['oldCpi'] = supp['cpi'];
                    }
                    if (!_.isUndefined(supp['allocations']) && !_.isUndefined(supp['allocations']['allocationValue'])) {
                        supp.allocations.oldAllocationValue = supp.allocations.allocationValue;
                    }
                });

                if(isFlexibilityUpdate) { // update if change in price override box not when refreshing page
                    getFlexibilityPricesParams($scope.srvId);
                }
                //Fixed CPI till two decimal places
                _.each(suppliers, function(modfyCPI) {
                    modfyCPI.cpi = parseFloat(modfyCPI.cpi).toFixed(2);
                })
 
            });
        }
        /**PD-844  */
        function checkFeasibilityStatus(suppliers){
            var feasPayload = [];
            var max_feas;
            var localization ={
                feasCountry : surveyData.survey[0].locale["countryCode"],
                feasLng     : surveyData.survey[0].locale["languageCode"]
            };

            

            //$scope.loader.show = true;
            var quotaPayloadObj =  quotaForFeasibilityPayload();
            
              // adding survey localization into every supplier object inside suppliers array.
            _.each(suppliers, function(supplierDoc){
                supplierDoc.localization = localization;
            })    
            feasibilityService.getFeasibilityForSuppliers(suppliers).success(function(fblySetting){
                if(fblySetting.data){
                    var feasPayload = [];
                    if(suppliers && suppliers.length > 0){
                        _.filter(fblySetting.data.suppliers, function(feasibilityRecord){
                            //  `Feas_max` Calculation Logic.
                            var desktopUsr = false;
                            var mobileUsr  = false;
                            _.each(surveyData.survey[0].target.device,function(device){
                                if( device.id === 111){ //Desktop
                                    desktopUsr = true;
                                }
                                if( device.id === 112){ //Mobile
                                    mobileUsr  = true;
                                }
                            });
                            if( desktopUsr && mobileUsr){

                                if( feasibilityRecord.desktopMonthlyActUsr && feasibilityRecord.mobileMonthlyActUsr){
                                    max_feas = feasibilityRecord.desktopMonthlyActUsr + feasibilityRecord.mobileMonthlyActUsr;
                                }

                            }else if( desktopUsr && !mobileUsr){

                                if(feasibilityRecord.desktopMonthlyActUsr){
                                    max_feas = feasibilityRecord.desktopMonthlyActUsr;
                                }

                            }else if( !desktopUsr && mobileUsr){

                                if(feasibilityRecord.mobileMonthlyActUsr){
                                    max_feas = feasibilityRecord.mobileMonthlyActUsr;
                                }

                            }

                            var temp = _.where(suppliers,{id :feasibilityRecord.s_id});
                            if(_.isEqual( localization,feasibilityRecord.surveyLocalization )){
                                if(temp && temp.length > 0){
                                    feasPayload.push({
                                        survey_id          : surveyData.survey[0].id,
                                        quotas             : quotaPayloadObj.quotas,
                                        unUsedQual         : quotaPayloadObj.unUsedQualArr,
                                        supplier_id        : temp[0].id,
                                        cpi                : temp[0].cpi,
                                        field_time         : surveyData.survey[0].field_time,
                                        incidence_rate     : surveyData.survey[0].incidence,
                                        loi                : surveyData.survey[0].lengthOfSurvey,
                                        surveyLocalization : localization,
                                        suppliers          : [{
                                                                s_id     : feasibilityRecord.s_id,
                                                                factor   : feasibilityRecord.patnrDelvryMulplr,
                                                                max_feas : max_feas
                                                              }]
                                    });
                                }
                            }else{
                                if(temp && temp.length > 0){
                                    feasPayload.push({
                                        survey_id          : surveyData.survey[0].id,
                                        quotas             : quotaPayloadObj.quotas,
                                        unUsedQual         : quotaPayloadObj.unUsedQualArr,
                                        supplier_id        : temp[0].id,
                                        cpi                : temp[0].cpi,
                                        field_time         : surveyData.survey[0].field_time,
                                        incidence_rate     : surveyData.survey[0].incidence,
                                        loi                : surveyData.survey[0].lengthOfSurvey,
                                        surveyLocalization : 'NA',
                                        suppliers          : [{
                                                                s_id     : feasibilityRecord.s_id,
                                                                factor   : feasibilityRecord.patnrDelvryMulplr,
                                                                max_feas : max_feas
                                                              }]
                                    });
                                }
                            }
                        });
                    }
                    
                    getSurveyManagementData(feasPayload);
                }
            }).error(function(err){
                //$scope.loader.show = false;
                notify({message: err.msg, classes: 'alert-danger', duration: 2000});
            });
        }


        /**  get Survey Management Data for Feasibility Payload  **/
        function getSurveyManagementData(feasPayload) {
            var locale ={
                countryCode  : surveyData.survey[0].locale["countryCode"],
                languageCode : surveyData.survey[0].locale["languageCode"]
            }
            var surveyManagementData;
            createSurvey.getSurveyManagement($stateParams.surveyid, 'buyer', locale).success(function(data){
                if(data.hasOwnProperty('result') && data.result.length > 0){
                  surveyManagementData   =  data.result[0];
                    if(surveyManagementData && surveyManagementData.hasOwnProperty('gpp') && Object.keys(surveyManagementData.gpp).length > 0 && surveyManagementData.gpp.hasOwnProperty('IR') && !_.isUndefined(surveyManagementData.gpp.IR) && !_.isNull(surveyManagementData.gpp.IR)) {
                        _.each(feasPayload, function(payloadRecord) {
                            payloadRecord.incidence_rate = surveyManagementData.gpp.IR;
                            surveyManagementIR = surveyManagementData.gpp.IR;
                        })
                    }
                }
                calculateFeasibility(feasPayload);
            }).error(function(err){
               calculateFeasibility(feasPayload);
            notify({message:err.msg,classes:'alert-danger',duration:2000} );
            });
        }





        /**  Returns Quotas array for Feasibility Payload  **/
        function quotaForFeasibilityPayload(){
            //$scope.loader.show          = true;
            var autoNestedQuotaExist    = false;
            var feasPayloadRecord       = {};
            var quotas                  = [];
            var quotaArr                = [];
            var qualArr                 = [];
            var quotCategoryInfo        = [];
            var mixQuotaCategoryExist   = false;
            var layeredQuotaInformation = [];
            var layeredQuotaData        = [];

            if(surveyData.quotaV2Data.quotas){

                _.each(surveyData.quotaV2Data.quotas,function(quotaRecord){
                    if(quotaRecord.qualification_code != 229 && quotaRecord.quotaCategory && quotaRecord.quotaCategory !== 'default'){
                        quotCategoryInfo.push(quotaRecord.quotaCategory);
                        if(quotaRecord.quotaCategory === "layered"){
                             layeredQuotaInformation.push(quotaRecord.criteria[0].qualification_code);
                             layeredQuotaData.push({quota_id:quotaRecord.quota_id,q_id:quotaRecord.criteria[0].qualification_code});
                        }
                    }
                });

                layeredQuotaInformation = _.uniq(layeredQuotaInformation);
                var layeredQuotaData    = _.chain(layeredQuotaData)
                                           .flatten()
                                           .uniq(function(v){ return v.quota_id + v.q_id })
                                           .value();

                quotCategoryInfo = _.uniq(quotCategoryInfo);

                if(quotCategoryInfo.length === 2){
                    mixQuotaCategoryExist = true;
                }

                _.each(surveyData.quotaV2Data.quotas,function(quotaRecord){

                    //Fetching  data from Quotas
                    if(quotaRecord.isActive){
                        if(quotaRecord.quotaCategory !== 'autoNested'){
                            _.filter(quotaRecord.criteria,function(quotaCriteria){
                                //check if zipCodes exist in quotaCriteria and push them in array.
                               if(quotaCriteria.conditions && quotaCriteria.conditions.length >0 && quotaCriteria.qualification_code === 229){
                                    if(surveyData && surveyData.hasOwnProperty('survey') && surveyData.survey.length >0 &&  surveyData.survey[0].hasOwnProperty('locale') && surveyData.survey[0].locale.hasOwnProperty('countryCode') && surveyData.survey[0].locale["countryCode"] === 'US'){
                                        var zipTempArr  = _.pluck(quotaCriteria.conditions, 'id');  
                                            zipTempArr  = _.flatten(zipTempArr);
                                        if(zipTempArr && zipTempArr.length > 0){
                                          if(mixQuotaCategoryExist){
                                            quotaArr.push([{quota_id :quotaRecord.quota_id, q_id:quotaCriteria.qualification_code,c_id : zipTempArr}]);
                                          }else{
                                            quotaArr.push({quota_id :quotaRecord.quota_id, q_id:quotaCriteria.qualification_code,c_id : zipTempArr});
                                          }
                                          qualArr.push({ qualification_code :quotaCriteria.qualification_code, id : zipTempArr}) 
                                        }  
                                    }else{
                                        if(mixQuotaCategoryExist){
                                            quotaArr.push([{quota_id :quotaRecord.quota_id, q_id:quotaCriteria.qualification_code,c_id : []}]);
                                          }else{
                                            quotaArr.push({quota_id :quotaRecord.quota_id, q_id:quotaCriteria.qualification_code,c_id : [] });
                                          }
                                         qualArr.push({ qualification_code :quotaCriteria.qualification_code, id : []}) 



                                    }
                                }else if(quotaCriteria.conditions && quotaCriteria.conditions.length >0){
                                    _.filter(quotaCriteria.conditions,function(quotaConditions){
                                        if(mixQuotaCategoryExist){
                                            quotaArr.push([{quota_id :quotaRecord.quota_id, q_id:quotaCriteria.qualification_code,c_id : quotaConditions.id}]);
                                        }else{
                                            quotaArr.push({quota_id :quotaRecord.quota_id, q_id:quotaCriteria.qualification_code,c_id : quotaConditions.id});
                                        }
                                        qualArr.push({ qualification_code :quotaCriteria.qualification_code, id : quotaConditions.id})
                                    });
                                }
                                if(quotaCriteria.range_sets && quotaCriteria.range_sets.length >0){
                                    _.filter(quotaCriteria.range_sets,function(quotaRange){
                                        if(mixQuotaCategoryExist){
                                            quotaArr.push([{
                                                quota_id : quotaRecord.quota_id,
                                                q_id     : quotaCriteria.qualification_code,
                                                c_id      :[quotaRange.from,quotaRange.to],
                                                range    : true
                                            }]);
                                        }
                                        else{
                                            quotaArr.push({
                                                quota_id : quotaRecord.quota_id,
                                                q_id     : quotaCriteria.qualification_code,
                                                c_id      :[quotaRange.from,quotaRange.to],
                                                range    : true
                                            });
                                        }
                                        qualArr.push({ qualification_code :quotaCriteria.qualification_code, id : [quotaRange.from,quotaRange.to], range : true})
                                    });
                                }
                            });

                        }else{
                            autoNestedQuotaExist = true;
                            var tempQuota = [];
                            _.filter(quotaRecord.criteria,function(quotaCriteria){
                                 //check if zipCodes exist in quotaCriteria and push them in array.
                                if(quotaCriteria.hasOwnProperty('qualification_code') && quotaCriteria.qualification_code === 229){

                                    if(surveyData && surveyData.hasOwnProperty('survey') && surveyData.survey.length >0 &&  surveyData.survey[0].hasOwnProperty('locale') && surveyData.survey[0].locale.hasOwnProperty('countryCode') && surveyData.survey[0].locale["countryCode"] === 'US'){  
                                        if(quotaCriteria.conditions && quotaCriteria.conditions.length >0){
                                           var zipTempArr  =   _.pluck(quotaCriteria.conditions,'id');
                                               zipTempArr  =  _.flatten(zipTempArr);
                                            if(zipTempArr && zipTempArr.length > 0){
                                               tempQuota.push({quota_id :quotaRecord.quota_id, q_id:quotaCriteria.qualification_code,c_id : zipTempArr});
                                               qualArr.push({ qualification_code :quotaCriteria.qualification_code, id : zipTempArr})
                                            }    

                                        }
                                    }else{
                                        tempQuota.push({quota_id :quotaRecord.quota_id, q_id:quotaCriteria.qualification_code,c_id : []});
                                        qualArr.push({ qualification_code :quotaCriteria.qualification_code, id : []})

                                    }
                                }else if(quotaCriteria.conditions && quotaCriteria.conditions.length >0){
                                    _.filter(quotaCriteria.conditions,function(quotaConditions){
                                        tempQuota.push({quota_id :quotaRecord.quota_id, q_id:quotaCriteria.qualification_code,c_id : quotaConditions.id});
                                        qualArr.push({ qualification_code :quotaCriteria.qualification_code, id : quotaConditions.id});
                                    });
                                }


                                if(quotaCriteria.range_sets && quotaCriteria.range_sets.length >0){
                                    _.filter(quotaCriteria.range_sets,function(quotaRange){
                                        tempQuota.push({
                                            quota_id : quotaRecord.quota_id,
                                            q_id     : quotaCriteria.qualification_code,
                                            c_id      :[quotaRange.from,quotaRange.to],
                                            range    : true
                                        });
                                        qualArr.push({ qualification_code :quotaCriteria.qualification_code, id : [quotaRange.from,quotaRange.to], range : true})
                                    });
                                }

                            });
                            if(tempQuota.length > 0){
                                quotaArr.push(tempQuota);
                            }
                        }
                    }
                });
            }

            if(surveyData.quotaV2Data.qualifications){
                _.each(surveyData.quotaV2Data.qualifications,function(qualRecord) {
                 
                
                    if(qualRecord.hasOwnProperty('qualification_code')){
                          //code to push zip codes in qual array if they are only in qualifications
                        if(qualRecord.conditions && qualRecord.conditions.length > 0 && qualRecord.qualification_code === 229){
                           if(surveyData && surveyData.hasOwnProperty('survey') && surveyData.survey.length >0 &&  surveyData.survey[0].hasOwnProperty('locale') && surveyData.survey[0].locale.hasOwnProperty('countryCode') && surveyData.survey[0].locale["countryCode"] === 'US'){
                                let qualIndex = _.findIndex(qualArr, {qualification_code: qualRecord.qualification_code});
                                if(qualIndex < 0){
                                    var zipTempArr = _.pluck(qualRecord.conditions,'id');
                                    if(zipTempArr && zipTempArr.length > 0){
                                        qualArr.push({qualification_code: qualRecord.qualification_code , id: zipTempArr})
                                    }
                                }
                             
                           }else{
                                qualRecord.conditions = [{}];
                                qualRecord.conditions[0].qualification_code = qualRecord.qualification_code ;
                                var qualIndex = _.findIndex(qualArr , {qualification_code : qualRecord.qualification_code });
                                if(qualIndex < 0) {
                                    qualArr.push(qualRecord.conditions);

                                }
                            } 
                        }else if(qualRecord.conditions && qualRecord.conditions.length > 0){
                       
                            _.filter(qualRecord.conditions, function (qualConditions) {
                                var data = fetchMasterData(qualRecord.q_name);
                                if(data && data.length !== qualRecord.conditions.length){
                                    qualConditions.qualification_code = qualRecord.qualification_code;
                                    var qualIndex = _.findIndex(qualArr , {qualification_code : qualRecord.qualification_code , id : qualConditions.id });
                                    if(qualIndex < 0) {
                                        qualArr.push(qualConditions);

                                    }
                                }
                            });
                        }

                        if(qualRecord.range_sets && qualRecord.range_sets.length > 0){
                            var addInQual = true;
                            // checking default values of `from` and `to` in Age.
                            if(qualRecord.qualification_code === 212){
                            
                                if(qualRecord.range_sets[0].from === 13 && qualRecord.range_sets[0].to === 99){
                                    addInQual = false;
                                }
                            }
                            // checking default values of `from` and `to` in Income.
                            if(qualRecord.qualification_code === 213){
                                if(qualRecord.range_sets[0].from === 0 && qualRecord.range_sets[0].to === 999999){
                                    addInQual = false;
                                }
                            }
                            if(addInQual){
                                _.filter(qualRecord.range_sets,function(qualRange){
                                    var qualIndex = _.findIndex(qualArr, {qualification_code : qualRecord.qualification_code});

                                    if(qualIndex < 0) {
                                        qualArr.push({
                                            qualification_code: qualRecord.qualification_code,
                                            id: [qualRange.from, qualRange.to],
                                            range: true
                                        });
                                    }
                                });
                            }
                        }
                    }
                });
            }

            var qualArr = _.chain(qualArr)
                           .flatten()
                           .uniq(function(v){ return v.qualification_code + v.id })
                           .value();

            var unUsedQualArr = fetchUnUsedQual(qualArr,quotaArr); /*Fetching the Un-Used Qualifications*/
            feasPayloadRecord.unUsedQualArr = unUsedQualArr;
                    
            var qualRecord= [];
            var qualRepeatChkr =[];
            var qualExist = false;
            
            if(qualArr && qualArr.length > 0){
                // get all the zip Records from qual Array and push zip codes in an array
               var zipQualRecords = _.where(qualArr,{"qualification_code":229})
               if(zipQualRecords && zipQualRecords.length > 0){
                 var zipArr = _.pluck(zipQualRecords, 'id');
               }
                    zipArr =_.flatten(zipArr);
                    zipArr = [...new Set(zipArr)];
                
    
                if(zipQualRecords && zipQualRecords.length > 0 &&  _.has(zipQualRecords[0], "qualification_code")){

                    qualRecord.push({q_id: zipQualRecords[0].qualification_code, c_id: zipArr })
                }
                
                _.each(qualArr, function(data){
                  if(data.qualification_code && data.qualification_code !== 229){   
                   
                    if(qualRecord.indexOf(qualForFeasibilityPayload(qualArr, data.qualification_code)) < 0){
                        qualRecord.push(qualForFeasibilityPayload(qualArr, data.qualification_code));
                    }
                  }
                });
            }

            if(autoNestedQuotaExist === true){

                var quotaIdsTemp = [];
                var q_idTemp     = [];
                _.each(quotaArr,function(quotData){
                    if(quotData instanceof Array){
                        _.filter(quotData,function(quotRecord){
                            quotaIdsTemp.push(quotRecord.quota_id);
                            q_idTemp.push({quota_id:quotRecord.quota_id,q_id:quotRecord.q_id,c_id:quotRecord.c_id});
                        });
                    }
                });

                quotaIdsTemp = _.uniq(quotaIdsTemp);

                q_idTemp     = _.chain(q_idTemp)
                                .flatten()
                                .uniq(function(v){ return v.quota_id + v.q_id + v.c_id })
                                .value();


                var nestedFinalPayload = [];

                _.each(quotaArr,function(quotData){

                    _.filter(quotaIdsTemp,function(quotaIdRecord){
                        var target = [];
                        _.filter(quotData,function(quotRecord){
                            var tempp;
                            if(quotaIdRecord === quotRecord.quota_id){
                                    var tempp = quotaIdRecord;
                                    target.push({q_id:quotRecord.q_id,c_id:quotRecord.c_id});
                            }

                            if(target && target.length > 0)
                            {
                                nestedFinalPayload.push({quota_id:tempp,target:target});
                            }
                        });
                    });
                });

                nestedFinalPayload = _.chain(nestedFinalPayload)
                                      .flatten()
                                      .uniq(function(v){ return v.quota_id + v.target })
                                      .value();


                var qualificationIDsTemp = [];

                _.each(qualArr,function(qualRecord){
                    if(qualRecord.qualification_code){
                        qualificationIDsTemp.push({q_id:qualRecord.qualification_code,c_id:qualRecord.id});
                    }
                });

                qualificationIDsTemp = _.chain(qualificationIDsTemp)
                                        .flatten()
                                        .uniq(function(v){ return v.q_id + v.c_id })
                                        .value();
               
                

                  /* check for Valid Qualification_Code !!!*/
                var nestInfoCombo = [];
                var qualTempArr   = _.pluck(qualificationIDsTemp,"q_id");
                    qualTempArr   = _.uniq(qualTempArr);
                var quotTempArr   = _.pluck(q_idTemp, "q_id");
                    quotTempArr   = _.uniq(quotTempArr);
                var qualdiff      = _.difference(qualTempArr, quotTempArr);
                    qualdiff      = _.union(qualdiff,layeredQuotaInformation);

                if(layeredQuotaInformation  && layeredQuotaInformation.length > 0){

                    var quotaQualDiff   = _.difference(quotTempArr, qualdiff);
                        quotaQualDiff   = _.uniq(quotaQualDiff);
                    var nestedQuotaInfo = _.difference(quotaQualDiff, layeredQuotaInformation);
                        nestedQuotaInfo = _.uniq(nestedQuotaInfo);

                    var nestedQuotaInfoWrapper = _.filter(qualificationIDsTemp,function(obj) { return nestedQuotaInfo.indexOf(obj.q_id) >= 0; });

                    _.each(nestedQuotaInfoWrapper,function(nestedRecord){
                        nestInfoCombo.push(qualForFeasibilityPayload(nestedQuotaInfoWrapper,nestedRecord.q_id));
                    });

                    nestInfoCombo = _.chain(nestInfoCombo)
                                     .flatten()
                                     .uniq(function(v){ return v.q_id + v.c_id })
                                     .value();

                    _.each(nestedFinalPayload,function(finalRecord){
                        _.filter(layeredQuotaData,function(quotaData){

                            if( finalRecord.quota_id === quotaData.quota_id ){
                                _.filter(nestInfoCombo,function(nestedRecord){
                                    finalRecord.target.push(nestedRecord);
                                });
                            }
                        });
                    });
                }
                var validQualification = _.filter(qualificationIDsTemp,function(obj) { return qualdiff.indexOf(obj.q_id) >= 0; });
                      
                var qualIdCombo = [];

                _.each(validQualification,function(qualRecord){
                    qualIdCombo.push(qualForFeasibilityPayload(validQualification,qualRecord.q_id));
                });

                qualIdCombo = _.chain(qualIdCombo)
                               .flatten()
                               .uniq(function(v){ return v.q_id + v.c_id })
                               .value();

                _.each(qualIdCombo,function(qualIdRcrd){
                    qualIdRcrd.c_id = _.sortBy(qualIdRcrd.c_id, function(num) {
                        return num;
                    });
                });

                _.each(qualIdCombo,function(qualIdRcrd){
                    var tempArr = [];
                    if(qualIdRcrd.q_id === 212 || qualIdRcrd.q_id === 213){
                        if(qualIdRcrd.c_id instanceof Array){
                            var len = qualIdRcrd.c_id.length;
                            tempArr.push(qualIdRcrd.c_id[0],qualIdRcrd.c_id[len - 1]);
                        }
                        qualIdRcrd.c_id = tempArr;
                     }

                });

                if(validQualification && validQualification.length > 0){
                    _.each(nestedFinalPayload,function(finalRecord){
                            _.filter(qualIdCombo,function(validQualRecord){
                                   finalRecord.target.push(validQualRecord);
                            });
                    });
                }

                _.each(nestedFinalPayload,function(finalRecord){
                    _.filter(finalRecord.target,function(targetData){
                            targetData = rmRedundantTargetElements(finalRecord.target,finalRecord.target[0].q_id);
                    });
                });

                _.each(nestedFinalPayload,function(finalRecord){
                    _.filter(finalRecord.target,function(targetData){
                        if(targetData.q_id === 212 || targetData.q_id === 213) targetData.range = true;
                    });
                });

                feasPayloadRecord.quotas = nestedFinalPayload;
                

                return feasPayloadRecord;
            }


            var payloadArray = [];

            _.each(qualRecord,function(qualData){
                if(qualData.q_id === 212 || qualData.q_id === 213 ){
                    qualData.range = true;
                }
            });

            var quotaArrLen = quotaArr.length;
            _.each(quotaArr, function (quotaRecord,index){
                if(index < quotaArrLen){
                    var qualData =[];
                    _.map(qualRecord, function (item) {
                        qualData.push(item);
                    });
                    //Handle Grouping and layerd Feasiability
                    if(quotaRecord instanceof Array) {
                        if(quotaRecord[0].quota_id && quotaRecord[0].q_id && quotaRecord[0].c_id) {
                            if(quotaRecord[0].c_id instanceof Array){
                                payloadArray.push([quotaRecord[0].quota_id,{q_id : parseInt(quotaRecord[0].q_id), c_id : quotaRecord[0].c_id,range:quotaRecord[0].range},qualData]);
                            }else{
                                payloadArray.push([quotaRecord[0].quota_id,{q_id : parseInt(quotaRecord[0].q_id), c_id : parseInt(quotaRecord[0].c_id)}, qualData]);
                            }
                        }
                    }
                    else {
                        if(quotaRecord.quota_id && quotaRecord.q_id && quotaRecord.c_id) {
                            if(quotaRecord.c_id instanceof Array){
                                payloadArray.push([quotaRecord.quota_id,{q_id : parseInt(quotaRecord.q_id), c_id : quotaRecord.c_id,range:quotaRecord.range},qualData]);
                            }else{
                                payloadArray.push([quotaRecord.quota_id,{q_id : parseInt(quotaRecord.q_id), c_id : parseInt(quotaRecord.c_id)}, qualData]);
                            }
                        }
                    }
                }
            });

           var payloadArray =  bindQualificationIntoQuotas(payloadArray);

            _.each(quotaArr,function(quota){
                _.filter(payloadArray,function(qualData){
                    //Handle Grouping and layerd Feasiability
                    if(quota instanceof Array) {
                        if(qualData.indexOf(quota[0].quota_id) >=0){
                            qualData.splice(qualData.indexOf(quota[0].quota_id), 1);
                            quotas.push({quota_id: quota[0].quota_id, target: qualData});
                        }  
                    }
                    else {
                        if(qualData.indexOf(quota.quota_id) >=0){
                            qualData.splice(qualData.indexOf(quota.quota_id), 1);
                            quotas.push({quota_id: quota.quota_id, target: qualData});
                        }
                    }
                });

            });


            _.each(quotas,function(quotasRecord){
                _.filter(quotasRecord.target,function(targetData){
                    if(targetData.range){
                        if(targetData.q_id === 212 || targetData.q_id === 213){
                            targetData.c_id = _.sortBy(targetData.c_id, function(num) {
                                return num;
                            });
                            var len = targetData.c_id.length;
                            targetData.c_id = [targetData.c_id[0],targetData.c_id[len - 1]];
                        }
                    }
                });

            });

			feasPayloadRecord.quotas = quotas;
           // $scope.loader.show = false;
            return feasPayloadRecord;
        }



        /* Remove Reduntant Target's entry*/
        function rmRedundantTargetElements(targets,q_id){
            var indexTemp       = -1;
            var qualIndxCounter =  0;

            _.each(targets,function(targetRecord,index){

                /* handling for Age & Income Quotas*/
                if(q_id === 212 ||  q_id === 213){

                    if(targetRecord.q_id === q_id){

                        if(targetRecord.c_id instanceof Array){
                            qualIndxCounter++;
                            if(qualIndxCounter > 1){
                                indexTemp = index;
                            }
                        }
                    }
                }else{
                    if(targetRecord.q_id === q_id){

                        if(targetRecord.c_id instanceof Array){
                            indexTemp = index;
                        }
                    }
                }
            });
            if(indexTemp !== -1){
                targets.splice(indexTemp,1);
            }
            return targets;
        }


        /** Combine quotas and qualification for payload **/

        function bindQualificationIntoQuotas(payloadData) {
            _.each(payloadData, function (payloadRecord) {
                _.filter(payloadRecord, function (payloadInfo) {
                    if(payloadRecord.indexOf(payloadInfo) >= 0 &&  payloadInfo instanceof Array) {
                        var tempRecord = payloadInfo;
                        payloadRecord.splice(payloadRecord.indexOf(payloadInfo), 1);
                        _.map(tempRecord, function(item){

                            
                            var data = _.where(payloadRecord ,  {q_id : item.q_id});

                            if(data.length === 0){
                                payloadRecord.push(item);
                            }
                        })
                    }
                });
            });

            return payloadData;

        }

        /* Fetching Qualification for Feasibility Payload */
        function qualForFeasibilityPayload(qualifications, qualId) {
            var qualArr = [];
            var finalResp = {};
            _.each(qualifications, function (qualificationRecord) {
                if(qualificationRecord.qualification_code === qualId ){
                    if(qualificationRecord.id instanceof Array){

                        _.map(qualificationRecord.id, function(id){
                            qualArr.push(id);
                        })

                    }else{
                          if(qualId === 229){
                           qualArr.push((qualificationRecord.id));
                          }else{
                            qualArr.push(parseInt(qualificationRecord.id));
                          }

                        
                    }
                }
                if(qualificationRecord.q_id === qualId ){

                    if(qualificationRecord.c_id instanceof Array){

                        _.map(qualificationRecord.c_id, function(id){
                            qualArr.push(id);
                        })

                    }else{
                        if(qualId === 229){
                          qualArr.push((qualificationRecord.id));  
                        }
                        else{
                          qualArr.push(parseInt(qualificationRecord.c_id));
                        }
                    }
                }
            });
            if(qualArr.length === 0){
                finalResp['q_id'] = qualId;
                finalResp['c_id'] = qualArr[0];
            }else{
                finalResp['q_id'] = qualId;
                finalResp['c_id'] = qualArr;
            }
            return finalResp;
        }


        /** Fetch MasterData on the basis of Qualification Name. **/
        function  fetchMasterData(qualName){
            var countryCode  = surveyData.survey[0].locale.countryCode;
            var languageCode = surveyData.survey[0].locale.languageCode;
            var countryData = _.where(masterDatas,{masterKey:qualName});
            if(countryData && countryData.length > 0){
                if(countryData[0].hasOwnProperty('data') && countryData[0].data[countryCode] && countryData[0].data[countryCode][languageCode]){
                    return (countryData[0].data[countryCode][languageCode]);
                }else{
                    return countryData[0];
                }
            }else{
                return countryData;
            }
        }


        /** PD-1066  Begins Here**/
        function calculateFeasibility(supplier) {
            //$scope.loader.show = true;

            feasibilityService.getFeasibility(supplier).success(function(feasibiltyData) {
                if(feasibiltyData.apiStatus ===  200){
                    if(feasibiltyData && feasibiltyData.hasOwnProperty('feasibility') && feasibiltyData.feasibility.length > 0 && feasibiltyData.feasibility[0].hasOwnProperty('unUsedQual')){
                         var unUsedQualArr      = [];
                             unUsedQualArr      = feasibiltyData.feasibility[0].unUsedQual;
                         var exactUnusedQualArr = [];
                        _.each(unUsedQualArr, function(qualId){
                            var masterRecord;
                            var qualName;
                          masterRecord= _.findWhere( masterDatas ,{id : qualId});
                            if(!_.isUndefined(masterRecord) && masterRecord.hasOwnProperty('masterKey')){
                                qualName    = masterRecord.masterKey;
                                if(qualName === 'csa') {
                                  qualName = 'Cbsa';
                                }
                                if(qualName && !_.isUndefined(qualName)){
                                  qualName = qualName.toLowerCase();
                                  exactUnusedQualArr.push(qualName.charAt(0).toUpperCase() + qualName.substr(1));
                                }
                            }
                        })
                        exactUnusedQualArr = exactUnusedQualArr.join(', ');
                        _.each(feasibiltyData.feasibility, function(feasRecord){
                            feasRecord.unUsedQual = exactUnusedQualArr;
                        })
                    }
                    _.each(feasibiltyData.feasibility,function(feasRecord){
                        var supplierId     = feasRecord.s_id;
                        var feas           = 0;
                        var feasHolder     = []; /* It contains the `qualCode` & `feasMin` for each qualification_code present inside Quota'scriteria */
                        var feasCodesSet   = [];
                        var estimatedFeasibility;
                        var quotaId;
                        var quotasMax;
                        var intermediaFeas = [];
                        var unUsedQual     = feasRecord.unUsedQual;
                        var incidence_rate;
                        //PD-1386 add CSA 
                        if(_.contains(unUsedQual, "CSA")) {
                            var findIndex = _.indexOf(unUsedQual, "CSA");
                            unUsedQual[findIndex] = "CBSA";
                        }
                        
                        if(supplierId && feasRecord.max_feas && feasRecord.quotas.length === 0){
                            if($scope.supplier){
                                _.each($scope.suppliers,function(supplier){
                                    if(supplier.id === supplierId ){
                                        if(surveyData.survey[0].incidence){
                                          incidence_rate = surveyData.survey[0].incidence;
                                            if(!_.isUndefined(surveyManagementIR)){
                                               incidence_rate = surveyManagementIR;
                                            }
                                            feasRecord.max_feas  *=  incidence_rate / 100;
                                            if(Math.ceil(feasRecord.max_feas) === 0){
	                                            supplier.feasibility = 'N/A';
                                            }else{
	                                            supplier.feasibility  =  Math.ceil(feasRecord.max_feas);
                                            }
                                        }
                                        if(unUsedQual && unUsedQual.length > 0) supplier.unUsedQual = unUsedQual;
                                        else supplier.unUsedQual = 0; // hide the 'tooltip'
                                    }
                                });
                            }
                        }
                        if(supplierId && feasRecord.quotas.length > 0 && !feasRecord.max_feas){
                            _.each(feasRecord.quotas,function(quotaRecord){
                                quotaId              = quotaRecord.quota_id;
                                estimatedFeasibility = quotaRecord.feas;

                                /*if Incidence exist then multiply it by EstimatedFeasibility from Backend*/
                                if(surveyData.survey[0].incidence){
                                    incidence_rate = surveyData.survey[0].incidence;
                                   if(!_.isUndefined(surveyManagementIR)){
                                      incidence_rate = surveyManagementIR;
                                    }
                                    estimatedFeasibility *=  incidence_rate / 100;
                                    /*estimatedFeasibility  =  Math.ceil(estimatedFeasibility);*/
                                }

                                if(surveyData.quotaV2Data.quotas){

                                    /* It contains the `qualification_codes` for each Quota from `quotaManagementV2` Database */
                                    var qualCodes    = [];

                                    _.filter(surveyData.quotaV2Data.quotas,function(quotaData){

                                        if(quotaData.quota_id === quotaId){
                                            quotasMax = quotaData.quantities.maximum;
                                            _.filter(quotaData.criteria,function(quotaCriteria){
                                                qualCodes.push(quotaCriteria.qualification_code);
                                            });
                                        }
                                    });
                                }
                                
                                /*  Logic for finalFeas Calculation. */
                                if(!isNaN(quotasMax)){
                                    if(estimatedFeasibility && quotasMax ){
                                        if(estimatedFeasibility < quotasMax){
                                            feas = estimatedFeasibility;
                                        }else{
                                            feas = quotasMax;
                                        }
                                    }

                                    _.filter(qualCodes,function(qData){
                                        feasHolder.push({qualCode:qData,feasMin:feas});
                                        feasCodesSet.push(qData);
                                    });

                                }
                            });
                            var feasCodesSet = _.uniq(feasCodesSet);

                            _.filter(feasCodesSet,function(feasCodeData){

                                var feasTemp = _.where(feasHolder,{ qualCode : feasCodeData });

                                var  totalFeasTemp = 0; /* contains the total Sum for feas for Each Uniques Qualification-Code*/
                                var  totalFeasTempId;
                                _.filter(feasTemp,function(feasRecord){
                                    totalFeasTemp   += feasRecord.feasMin;
                                    totalFeasTempId = feasRecord.qualCode;
                                });

                                intermediaFeas.push({qualCode : totalFeasTempId,feasMinimum : totalFeasTemp});
                            });
                             
                            //Exception Handling for Age which ensures age feas must have to be less than 100
                            /*_.filter(intermediaFeas,function(interMediateRecord){

                                if(interMediateRecord.qualCode === 212 && interMediateRecord.feasMinimum  > 100){
                                    interMediateRecord.feasMinimum = 100;
                                }

                            });*/
                            var intermediaFeasStatus = _.isEmpty(intermediaFeas);
                            var finalFeasibilityArr = [];
                            var finalFeasMin;
                            if(!intermediaFeasStatus){
                                _.filter(intermediaFeas,function(feasRecord){
                                    finalFeasibilityArr.push(feasRecord.feasMinimum);
                                });
                                finalFeasMin = _.min(finalFeasibilityArr);
                            }

                            if(isNaN(finalFeasMin)){ finalFeasMin = 0;}  //if totalFeas is NaN
                            if($scope.supplier && !isNaN(finalFeasMin)){
                                _.each($scope.suppliers,function(supplier){
                                    if(supplier.id === supplierId ){
                                        if(finalFeasMin === 0){
	                                        supplier.feasibility = 'N/A';
                                        }else{
	                                        supplier.feasibility = Math.ceil(finalFeasMin);
                                        }
                                        if(unUsedQual && unUsedQual.length > 0) supplier.unUsedQual = unUsedQual;
                                        else supplier.unUsedQual = 0; // hide the 'tooltip'
                                    }
                                });
                            }
                        }
                    });
                     //PD-1207
                     $scope.totalFeasibility = 0;
                    _.each($scope.suppliers,function(supplier){
                         var hasFeasbility = _.has(supplier, "feasibility");
                         if(hasFeasbility){
                            if(_.isNumber(supplier.feasibility)) {
                             $scope.totalFeasibility += supplier.feasibility;
                            }
                         }
                         else {
                             supplier.feasibility = "-";
                         }
                    });
                    //$scope.loader.show = false;
                }else{
                   // $scope.loader.show = false;
                    notify({message: "Error in getFeasibility Service", classes: 'alert-danger', duration: 3000});
                }
            }).error(function (err) {
	            if($scope.supplier){
		            _.each($scope.suppliers,function(supplier){
				            supplier.feasibility = '-';
		            });
	            }
                //$scope.loader.show = false;
                /*notify({message: err.msg, classes: 'alert-danger', duration: 2000});*/

            });

        }
        /** PD-1066  Ends   Here**/

        /* Fetch Un-used Qualification by comparing the Used Qualification with MasterData*/
        function fetchUnUsedQual(usedQual,usedQuota){
          let qualIds =[];
          let quotaIds= [];
          let unionIds= [];
          qualIds  =  _.pluck(usedQual ,'qualification_code');
          qualIds  =  _.without(qualIds, 219);
          _.each(usedQuota, function(record){
              if(record &&  record instanceof Array && record.length > 0 ){
                quotaIds.push(_.pluck(record, 'q_id'));
              }else if(record &&  record.q_id){
                quotaIds.push(record.q_id);
              }
          })
          quotaIds = _.flatten(quotaIds)
          quotaIds =  _.without(quotaIds, 219);
          unionIds =  _.union(qualIds,quotaIds);
          return unionIds;
        }
           
        
        /**PD-844-B Ends */

        function calculateTotalCost() {
            var tol = ($scope.headerValues.completes * $scope.headerValues.cpi);
            $scope.headerValues.total = parseFloat(tol).toFixed(2);
        }

        $scope.reCalculateCPI = function reCalculateCPI(callback) {
            if ($scope.reCalculateTimeOut)
                $timeout.cancel($scope.reCalculateTimeOut);
            $scope.reCalculateTimeOut = $timeout(function() {
                var formData = {'suppliers': $scope.suppliers, completes: $scope.headerValues.completes};
                createSurvey.getAllocationCPI(formData).success(function (data) {
                    if (data.apiStatus == "Success") {
                        if($stateParams.edit == '') {
                            // In case of augument Survey
                            $scope.headerValues.cpi = isNaN(parseFloat(data.cpi).toFixed(2))? 0:parseFloat(data.cpi).toFixed(2);
                             //Store new CPI for Live Clone
                            $rootScope.liveCloneCPI = isNaN(parseFloat(data.cpi).toFixed(2))? 0:parseFloat(data.cpi).toFixed(2);
                        }
                       
                        calculateTotalCost();

                        if(callback != undefined) {
                            callback();
                        }
                    }
                });
            }, 500); // delay 250 ms
        };

        $scope.setPriceOverride = function() {
            console.log("$scope.operatorOverrideMdl ",$scope.operatorOverrideMdl)
            if($scope.operatorOverrideMdl !== undefined && $scope.operatorOverrideMdl !== '' && !(isNaN(parseFloat($scope.operatorOverrideMdl)))) {
                $scope.surveyPauseThreshold = '';
                if(!$scope.manualOperatorOverride){
                    angular.forEach($scope.suppliers, function(value, index){
                        $scope.suppliers[index]["cpi"] = parseFloat($scope.operatorOverrideMdl ).toFixed(2);
                    });
                    $scope.reCalculateCPI();
                }
               
            } else {
                /*$scope.operatorOverrideMdl = '';*/
                var isFlexibilityUpdate = false;
                getBuyerCPI(isFlexibilityUpdate);
            }
        };

        

        $scope.allocationValueUpdate = function (index) {
            var value = $scope.suppliers[index].allocations.allocationValue;

            if (isNaN(parseInt(value))) {
                $scope.suppliers[index].allocations.allocationValue = 0;
            }
            else if(value == null || value == undefined || value == "") {
                $scope.suppliers[index].allocations.allocationValue = 0;
            }
            else {
                $scope.suppliers[index].allocations.allocationValue = parseInt(value);
            }

            $scope.suppliers[index].allocations.allocationPercentile = ($scope.suppliers[index].allocations.allocationValue * 100) / $scope.completesNeeded;
            $scope.suppliers[index].allocations.actualPercentile = parseFloat($scope.suppliers[index].allocations.allocationPercentile).toFixed(2);
            $scope.suppliers[index].allocations.allocationPercentile = parseInt($scope.suppliers[index].allocations.actualPercentile);
            $scope.totalAllocations = 0;

            for (var i = 0; i < $scope.suppliers.length; i++) {
                /*Commented this code to prevent make values 0*/
                /*-------On first change make other values 0-------*/
                /*if ($scope.manualAllocationEdit == false && i != index) {
                    $scope.suppliers[i].allocations.allocationValue = 0;
                    $scope.suppliers[i].allocations.allocationPercentile = 0;
                }*/
                $scope.totalAllocations += parseInt($scope.suppliers[i].allocations.allocationValue);
            }

            $scope.totalAllocations = parseInt($scope.totalAllocations);
            $scope.totalRemaining = parseInt(parseInt($scope.completesNeeded) - $scope.totalAllocations);
            $scope.manualAllocationEdit = true;

            $scope.calculateFlexibility();
        };

        $scope.allocationPercentileUpdate = function (index) {
            var value = $scope.suppliers[index].allocations.allocationPercentile;

            if (isNaN(parseFloat(value))) {
                $scope.suppliers[index].allocations.allocationPercentile = 0;
                $scope.suppliers[index].allocations.actualPercentile = 0;
            } else {
                $scope.suppliers[index].allocations.actualPercentile = parseFloat(value).toFixed(2);
                $scope.suppliers[index].allocations.allocationPercentile = parseInt(value);
            }

            $scope.suppliers[index].allocations.allocationValue = parseInt(($scope.suppliers[index].allocations.actualPercentile * $scope.completesNeeded) / 100);
            $scope.suppliers[index].allocations.allocationValue = parseInt($scope.suppliers[index].allocations.allocationValue);
            $scope.totalAllocations = 0;

            for (var i = 0; i < $scope.suppliers.length; i++) {
                $scope.totalAllocations = $scope.totalAllocations + parseInt($scope.suppliers[i].allocations.allocationValue);
            }

            $scope.totalAllocations = parseInt($scope.totalAllocations);
            $scope.totalRemaining = parseInt(parseInt($scope.completesNeeded) - $scope.totalAllocations);

            $scope.calculateFlexibility();
        };
        
        $scope.saveChoosedSuppliers = function (status) {
            // Pause Threshold should be greater than calculated
            // Comment it for now as it is stopping supplier resetting after pause.
            /*if(($scope.surveyPauseThreshold !== undefined && $scope.surveyPauseThreshold !== '' && $scope.surveyPauseThreshold !== 0) && $scope.surveyPauseThreshold < $scope.headerValues.cpi) {
               notify({message: "Pause Threshold value should be greater than calucalted cpi", classes: 'alert-danger', duration: 3000});
                return false; 
            }*/
            // Do not save if flexibility is greater than 100
            if($scope.flexibleValue > 100){
                notify({message: "Flexibility can't be greater than 100", classes: 'alert-danger', duration: 3000});
                return false;
            }
            //Commented due to PD-979
            // Do not save if allocations less than their achieved
            /*if(status == 'goToManageSurvey'){
                for(var i in $scope.tempSupplier){
                    for(var j in $scope.suppliers){
                        if($scope.tempSupplier[i].id == $scope.suppliers[j].id && $scope.tempSupplier[i].fielded > $scope.suppliers[j].allocations.allocationValue){
                            notify({message: "Please enter allocations greater than the achieved", classes: 'alert-danger', duration: 3000});
                            return false;
                        }
                    } 
                }
            }*/
            $scope.showLoader = 'DataLoading';
            $filter.reCalculateTimeOut = 0;
            $scope.reCalculateCPI(function () {
                $scope.saveSuppliersData.survey_id = $stateParams.surveyid;
                $scope.saveSuppliersData.goal = $scope.arr.number;
                if ($scope.totalAllocations == $scope.completesNeeded) {
                    $scope.supplier = [];
                    if($scope.operatorOverrideMdl === undefined || $scope.operatorOverrideMdl === '' || $scope.operatorOverrideMdl === null){
                        $scope.operatorOverrideMdl = '';
                    }
                    
                    if ($scope.suppliers) {

                        /* If feasibility = '-' then remove it with Zero */
                        _.each($scope.suppliers,function(suppRecord){
                            if(suppRecord.feasibility === '-'){
                                suppRecord.feasibility = 0;
                            }
                        });

                        for (var i in $scope.suppliers) {
                            var item = {
                                "id": $scope.suppliers[i].id,
                                "quantity": parseInt($scope.suppliers[i].allocations.allocationValue),
                                "percentile": Math.round(parseFloat($scope.suppliers[i].allocations.actualPercentile).toFixed(2) * 100)/100 ,
                                "cpi": parseFloat($scope.suppliers[i].cpi).toFixed(2),
                                "feasibility": $scope.headerValues.completes,
                                "total": $scope.totalAllocations,
                                "min" : parseInt($scope.suppliers[i].allocations.min),
                                "max" : parseInt($scope.suppliers[i].allocations.max),
                                "flexValue" : parseInt($scope.flexibleValue),
                                "isFlexibility" : $scope.isSupplierFlexibility,
                                "suppFeas": $scope.suppliers[i].feasibility,
                                "margin": $scope.suppliers[i].margin,
                                "oldSurveyQuantity": $scope.suppliers[i].allocations.oldAllocationValue,
                                "oldCpi": parseFloat($scope.suppliers[i]['oldCpi']).toFixed(2),
                                "supplierName": $scope.suppliers[i]['name']
                            };
                            if($scope.suppliers[i].CR) {
                                item['CR'] = $scope.suppliers[i].CR
                            }
                            if($scope.suppliers[i].BCPI) {
                                item['BCPI'] = $scope.suppliers[i].BCPI
                            }
                            $scope.supplier.push(item);
                        }
                        $scope.saveSuppliersData.suppliers = $scope.supplier;
                    }

                    $scope.saveSuppliersData.cpi = $scope.headerValues.cpi;

                    if($scope.surveyPauseThreshold !== undefined && $scope.surveyPauseThreshold !==  null) {
                        $scope.saveSuppliersData.pause_threshold = ($scope.surveyPauseThreshold !== '') ? parseFloat($scope.surveyPauseThreshold).toFixed(2) : '';
                    }
                    if($scope.operatorOverrideMdl !== undefined && $scope.operatorOverrideMdl !==  null) {
                        $scope.saveSuppliersData.price_override = ($scope.operatorOverrideMdl !== '') ? parseFloat($scope.operatorOverrideMdl).toFixed(2) : '';
                    }

                    $scope.saveSuppliersData.manual_override = false;
                    $scope.saveSuppliersData.oldSurveyPauseThreshold = $scope.oldSurveyPauseThreshold;
                    if($scope.manualOperatorOverride !== undefined && $scope.manualOperatorOverride ==  true) {
                        $scope.saveSuppliersData.manual_override = true;
                    }
                    if (status == 'goToManageSurvey' || status == 'saveAndNew' || status == 'saveAndClone' || status == 'save') {
                        createSurvey.updateSurveyFromManageStep2($stateParams.surveyid, $scope.saveSuppliersData).success(function (data) {
                            if(status == 'saveAndNew' || status == 'saveAndClone' || status == 'save') {
                                if(status == 'saveAndNew') {
                                    $scope.showLoader = '';
                                    $rootScope.clone = false;
                                    notify({message: 'Survey Saved', classes: 'alert-success', duration: 3000});
                                    $state.go('dynstate', {id: 'CreateSurveys'});
                                }else if(status == 'save'){
                                    $scope.showLoader = '';
                                    notify({message: 'Survey Saved', classes: 'alert-success', duration: 3000});
                                }else {
                                    $scope.showLoader = '';
                                    notify({message: 'Survey Saved', classes: 'alert-success', duration: 3000});
                                    $rootScope.newId = $stateParams.surveyid;
                                    $rootScope.clone = true;
                                    
                                    $state.go('dynstate', {id: 'CreateSurveys', 'locale':$scope.survey_locale});  
                                }
                            }
                            else {
                                notify({message: data.msg, classes: 'alert-success', duration: 3000});
                                $state.go('editSurvey', {key: $stateParams.surveyid});
                            }

                        }).error(function (err) {
                            //$scope.loader.show = false;
                            $scope.showLoader = '';
                            $scope.supplier = [];
                            notify({message: err.msg, classes: 'alert-danger', duration: 3000});
                        });

                    } else {

                        createSurvey.updateSurveyById($scope.saveSuppliersData).success(function (data) {
                            if (status == 'moveToNext') {
                                $state.go('launchsurvey', {surveyid: $stateParams.surveyid});
                            }
                            notify({message: data.msg, classes: 'alert-success', duration: 3000});
                        }).error(function (err) {
                            //$scope.loader.show = false;
                            $scope.showLoader = '';
                            $scope.supplier = [];
                            notify({message: err.msg, classes: 'alert-danger', duration: 3000});
                        });
                    }
                } else {
                    $scope.showLoader = '';
                    notify({message: 'Allocations must be equal to Completes', classes: 'alert-danger', duration: 3000});
                }
            });
        };

        $scope.closeManage = function (key) {
            $state.go('editSurvey', {key: key});
        };

        $scope.clearFields = function() {
            $rootScope.$emit("CallMethod", {});
        };

        $scope.calculateFlexibility = function () {
            var allocationValue;
            // Case 1 when flexibility off then set min/max to allocation
            if(!$scope.isSupplierFlexibility || $scope.isSupplierFlexibility == '' || $scope.isSupplierFlexibility == undefined || $scope.isSupplierFlexibility == null) {
                _.each($scope.suppliers, function(supp){
                    supp.allocations.min = supp.allocations.allocationValue;
                    supp.allocations.max = supp.allocations.allocationValue;
                });
            // Case 2 when flexibility is 100%  
            }else if($scope.flexibleValue >= 100){
                _.each($scope.suppliers, function(supp){
                    if(supp.allocations.allocationValue > 0 && supp.allocations.allocationValue != $scope.completesNeeded){
                        supp.allocations.min = 0;
                        supp.allocations.max = $scope.completesNeeded;
                    }else if(supp.allocations.allocationValue == $scope.completesNeeded){
                        supp.allocations.min = $scope.completesNeeded;
                        supp.allocations.max = $scope.completesNeeded;
                    }else{
                        supp.allocations.min = 0;
                        supp.allocations.max = 0;
                    }  

                });
            // Normal case of flexibility                  
            }else{
                var totalMin = 0;
                //first calculate min
                _.each($scope.suppliers, function(supp){
                    allocation = supp.allocations.allocationValue;
                    allocation = (!isNaN(allocation) && allocation != undefined) ? allocation : 0;
                    
                    // If total completes are allocated to single supplier the min ansd max are equal
                    if(supp.allocations.allocationValue == $scope.completesNeeded){
                        supp.allocations.min = supp.allocations.allocationValue;
                    }else{
                        var min = allocation - (allocation * ($scope.flexibleValue / 100) );
                        min = Math.ceil((min > 0) ? min : 0);

                        totalMin = totalMin + min;
                        supp.allocations.min = min;
                    }
                });
                // Calculate max
                _.each($scope.suppliers, function(supp){
                    allocation = supp.allocations.allocationValue;
                    allocation = (!isNaN(allocation) && allocation != undefined) ? allocation : 0;

                    // If total completes are allocated to single supplier the min ansd max are equal
                    if(supp.allocations.allocationValue == $scope.completesNeeded){
                        supp.allocations.max = supp.allocations.allocationValue;
                    }else{
                        var max1 = allocation + (allocation * ($scope.flexibleValue / 100));
                        var max2 = parseInt($scope.completesNeeded) - (totalMin - supp.allocations.min);

                        var max = Math.ceil(Math.min(max1, max2));
                        supp.allocations.max = max;
                    }
                });
            }

            $scope.reCalculateCPI();
        };

        $scope.getId = function() {
            $rootScope.newId = $stateParams.surveyid;
            $rootScope.clone = true;
        }

        $scope.checkAllocationWithAchieved = function(value, id){
            if($scope.tempSupplier.length > 0){
                _.each($scope.tempSupplier, function(tmpSupp){
                    if(tmpSupp.id == id){
                        if(value < tmpSupp.fielded){
                            notify({message: 'Please select a value that is greater than '+tmpSupp.fielded, classes: 'alert-danger', duration: 2000});
                            allocationsGreaterThanAcheived = false;
                        }else{
                            allocationsGreaterThanAcheived = true;
                        }
                    }
                });
            }
        }

        /*Supplier Edit*/
        
        $scope.changeManualOverrideCB = function() {
            if($scope.manualOverrideMdl) {
                $scope.operatorOverrideMdl = '';
                $scope.disableSupCpiInput = false;
                $scope.manualOperatorOverride = true;
                $scope.isOperatorOverideEdit = true;
            }
            else {
                $scope.disableSupCpiInput = true;
                //$scope.operatorOverrideMdl = '';
                $scope.manualOperatorOverride = false;
                $scope.isOperatorOverideEdit = false;
            }
            var isFlexibilityUpdate = false;
            getBuyerCPI(isFlexibilityUpdate);
            //getFlexibilityPricesParams($scope.srvId, isFlexibilityUpdate);
        }
       

        /*function to Reset allocation*/
        $scope.resetAllocation = function() {
            if($scope.totalAllocations > 0) {
                for(var i = 0; i < $scope.suppliers.length; i++) {
                    var allocationData = {
                        allocationValue: 0,
                        oldAllocationValue: $scope.suppliers[i].allocations.allocationValue,
                        allocationPercentile: 0,
                        fielded : $scope.suppliers[i].allocations.fielded
                    };
                    $scope.suppliers[i].allocations = allocationData;
                    $scope.totalAllocations += parseInt($scope.suppliers[i].allocations.allocationValue);
                    if($scope.suppliers[i].setActive && $scope.suppliers[i].setActive == true) {
                        delete $scope.suppliers[i].setActive;
                    }
                }
                if($scope.totalAllocations < $scope.completesNeeded) {
                    $scope.totalRemaining = parseInt($scope.completesNeeded);
                }
                else {
                    $scope.totalRemaining = parseInt($scope.totalAllocations);
                }
                $scope.totalAllocations = 0;
            }
        }

        /*Function Select all on chooseSupplier dashboard PD-1596*/
        function selectAndDivideAllocation() {
            $scope.totalRemaining = 0;
            $scope.totalAllocations = 0;
            $scope.suppliersCount = 0;
            for(var i = 0; i < $scope.suppliers.length; i++) {
                if($scope.suppliers[i].isValid == true) {
                    $scope.suppliersCount ++;
                }
            }
            // Dividing Allocations
            for(var i = 0; i < $scope.suppliers.length; i++) {
                if($scope.suppliers[i].isValid == true){
                    var allocation = parseInt($scope.completesNeeded / $scope.suppliersCount);
                    var allocationPercentage = parseFloat((allocation / parseInt($scope.completesNeeded)) * 100).toFixed(2);
                    var allocationData = {
                        allocationValue: allocation,
                        oldAllocationValue: $scope.suppliers[i].allocations.allocationValue,
                        allocationPercentile: parseInt(allocationPercentage),
                        actualPercentile: allocationPercentage,
                        min : '',
                        max : '',
                        fielded : $scope.suppliers[i].allocations.fielded
                    };

                    $scope.suppliers[i].allocations = allocationData;
                    $scope.totalAllocations = parseInt($scope.totalAllocations + $scope.suppliers[i].allocations.allocationValue);
                }
                if($scope.suppliers[i].setActive && $scope.suppliers[i].setActive == true) {
                    delete $scope.suppliers[i].setActive;
                }
            }
            // For checking the first valid supplier and giving the remaining allocation to him
            for(var i=0; i < $scope.suppliers.length; i++){
                if($scope.suppliers[i].isValid == true){
                    $scope.suppliers[i].allocations.allocationValue = $scope.suppliers[i].allocations.allocationValue + ($scope.completesNeeded - $scope.totalAllocations);
                    $scope.totalAllocations = parseInt($scope.totalAllocations + ($scope.completesNeeded % $scope.suppliersCount));
                    break;
                }
            }
            $scope.calculateFlexibility();
            $scope.totalRemaining = parseInt(parseInt($scope.completesNeeded) - parseInt($scope.totalAllocations));
        }
	
        $scope.SelectAllDividingEvenly = function() {
            if($scope.completesNeeded > 0 && $scope.totalRemaining) {
                selectAndDivideAllocation();
            }
            else if($scope.completesNeeded <= 0) {
                 selectAndDivideAllocation();
            }
            else {
                notify({message: "Total Remaning are zero, Please click on Clear All button before Select All", classes: 'alert-danger', duration: 3000});
            }
        }
        
        //Function to distribute the completes among selected suppliers only 
        $scope.selectedSupplierStatus = function() {
            $scope.suppliersCount = 0;
            $scope.supplierIsSelect = false;
            for(var i = 0; i < $scope.suppliers.length; i++) {
                if($scope.suppliers[i].setActive && $scope.suppliers[i].isValid == true && $scope.suppliers[i].setActive == true) {
                    $scope.suppliersCount ++;
                    $scope.supplierIsSelect = true;
                }
            }
            if($scope.supplierIsSelect) {
                $scope.totalRemaining = 0;
                $scope.totalAllocations = 0;
                //$scope.loader.show = true;//PD-955
                // Dividing Allocations
                for(var i = 0; i < $scope.suppliers.length; i++) {
                    if($scope.suppliers[i].setActive && $scope.suppliers[i].isValid == true && $scope.suppliers[i].setActive == true){
                        var allocation = parseInt($scope.completesNeeded / $scope.suppliersCount);
                        var allocationPercentage = parseFloat((allocation / parseInt($scope.completesNeeded)) * 100).toFixed(2);
                        var allocationData = {
                            allocationValue: allocation,
                            oldAllocationValue: $scope.suppliers[i].allocations.allocationValue,
                            allocationPercentile: parseInt(allocationPercentage),
                            actualPercentile: allocationPercentage,
                            min : '',
                            max : '',
                            fielded : $scope.suppliers[i].allocations.fielded
                        };

                        $scope.suppliers[i].allocations = allocationData;
                        $scope.totalAllocations = parseInt($scope.totalAllocations + $scope.suppliers[i].allocations.allocationValue);
                    }
                    else {
                        var allocationData = {
                            allocationValue: 0,
                            oldAllocationValue: $scope.suppliers[i].allocations.allocationValue,
                            allocationPercentile: 0,
                            actualPercentile: 0,
                            fielded : $scope.suppliers[i].allocations.fielded
                        };
                        $scope.suppliers[i].allocations = allocationData;
                        $scope.totalAllocations += parseInt($scope.suppliers[i].allocations.allocationValue);
                    }

                }
                // For checking the first valid supplier and giving the remaining allocation to him
                for(var i=0; i < $scope.suppliers.length; i++){
                    if($scope.suppliers[i].setActive && $scope.suppliers[i].isValid == true && $scope.suppliers[i].setActive == true){
                        $scope.suppliers[i].allocations.allocationValue = $scope.suppliers[i].allocations.allocationValue + ($scope.completesNeeded - $scope.totalAllocations);
                        $scope.totalAllocations = parseInt($scope.totalAllocations + ($scope.completesNeeded % $scope.suppliersCount));
                        break;
                    }
                }
                for(var i=0; i < $scope.suppliers.length; i++){
                    if($scope.suppliers[i].setActive && $scope.suppliers[i].setActive == true) {
                        delete $scope.suppliers[i].setActive;
                    }
                }   
                
                $scope.calculateFlexibility();
                $scope.reCalculateCPI();
                $scope.totalRemaining = parseInt(parseInt($scope.completesNeeded) - parseInt($scope.totalAllocations));
                //$scope.loader.show = false; //PD-955
            }
            else {
                notify({message: "Please select suppliers to allocate Quantity and percentage", classes: 'alert-danger', duration: 3000});
            }
        }

        //Avoid to select row on click lock/unlock
        $scope.avoidClick = function( e ) { 
           e.stopPropagation();
        }

    }]);

/**
 * Created by Parveen on 3/8/2016.
 */
//angular.module('pureSpectrumApp')

psApp.controller('surveyCtrl', ['$scope', '$http', '$state', '$cookies', '$window', 'config', 'commonApi', 'createSurvey', 'notify', 'user', 'localStorageService', 'ngProgressLite', '$stateParams', '$rootScope', 'Upload', '$timeout','$translate', '$location', 'encodeDecodeFactory', '$filter', function($scope, $htpt, $state, $cookies, $window, config, commonApi, createSurvey, notify, user, localStorageService, ngProgressLite, $stateParams, $rootScope, Upload, $timeout, $translate, $location, encodeDecodeFactory, $filter) {
    var userData = localStorageService.get('logedInUser');
    $scope.cntryCombo = new Object();
    $scope.sltGender = new Array();
    $scope.sltDevice = new Array();
    $scope.sltRelation = new Array();
    $scope.sltEducation = new Array();
    $scope.sltEmployment = new Array();
    $scope.sltRelation = new Array();
    $scope.sltRace = new Array();
    $scope.sltChildren = new Array();

    $scope.sltRaceBera = new Array();
    $scope.hispanicOrigin = new Array();
    var saveAllThreePageData = new Array(); //PD-1003

    $scope.cpi = 0;
    $scope.completes = 0;
    $scope.total = 0;
    $scope.currency_symbol = '';
    $scope.currencyFx = {fx: 321,symbol: '$'};
    $scope.blrFld = {};
    //when creating survey status is 00
    $scope.surveyStatus = 00;
    $scope.totalCompletes = 0;
    $scope.ageData = {
        "min": 18,
        "max": 99
    };
    $scope.houseHoldIncome = {
        "min": 0,
        "max": 999999
    };

    //show loader icon
    $scope.loader = {
        show : false
    };
    $scope.manageEdit = false;
    if($stateParams.edit){
        if($stateParams.edit == 'editStep1'){
            $scope.manageEdit = true;
        }else{
            $state.go('home');
        }
    }
    $scope.field_time = 0; //PD-569

    // Quota Related Flags
    $scope.raceQuotaFlag = {
        resetRace : true,
        hasRaceFlag: false,
        editRaceFlag: false,
        raceFlxValue: '0',
        raceFlx: true
    }
    $scope.gndrQuotaFlag = {
        resetGen : true,
        hasGndrFlag: false,
        editGndrFlag: false,
        gndrFlxValue: '0',
        gndrFlx: true
    }
    $scope.rlnQuotaFlag = {
        resetRel : true,
        hasRlnFlag: false,
        editRlnFlag: false,
        rlnFlxValue: '0',
        rlnFlx: true
    } 
    $scope.empQuotaFlag = {
        resetEmp : true,
        hasEmpFlag: false,
        editEmpFlag: false,
        empFlxValue: '0',
        empFlx: true
    } 
    $scope.eduQuotaFlag = {
        resetEdu : true,
        hasEduFlag: false,
        editEduFlag: false,
        eduFlxValue: '0',
        eduFlx: true
    } 
    $scope.dvcQuotaFlag = {
        resetDev : true,
        hasDeviceFlag: false,
        editDvcFlag: false,
        dvcFlxValue: '0',
        dvcFlx: true
    }
    $scope.rbQuotaFlag = {
        resetRb : true,
        hasRbFlag: false,
        editRbFlag: false,
        rbFlxValue: '0',
        raceBeraFlx: true
    }   
    $scope.hisQuotaFlag = {
        resetHisOri : true,
        hasHisOriFlag: false,
        editHisOriFlag: false,
        hispanicFlxValue: '0',
        hispanicFlx: true
    }
    $scope.regQuotaFlag = {
        resetReg : true,
        hasRegionFlag: false,
        editRegionFlag: false,
        regionFlxValue: '0',
        regionFlx: true
    } 
    $scope.dvsnQuotaFlag = {
        resetDivi : true,
        hasDivisionFlag: false,
        editDivisionFlag: false,
        divisionFlxValue: '0',
        divisionFlx: true
    }
    $scope.childQuotaFlag = {
        resetChild: true,
        hasChldFlag: false,
        editChldFlag: false,
        chldFlxValue : '0',
        chldFlx: true
    }
    $scope.ageQuotaFlag = {
        resetAge: true,
        hasAgeFlag: false,
        editAgeFlag: false,
        ageFlxValue : '0',
        ageFlx: true,
        clearAgeFlag: false
    }
    $scope.incomeQuotaFlag = {
        resetInc: true,
        hasIncomeFlag: false,
        editIncomeFlag: false,
        incomeFlxValue : '0',
        incFlx: true,
        clearIncomeFlag: false
    }

    //PD-1130
    $scope.censusRepoFlag = {
        hasCensusRepoGndr : false,
        hasCensusRepoAge : false,
        hasCensusRepoIncome : false,
        hasCensusRepoRace : false,
        hasCensusRepoHis : false,
        hasCensusRepoEdu : false,
        hasCensusRepoEmploy : false
    }

    $scope.ageTlt = true;
    $scope.incmTlt = true;
   
    $scope.goFinalSurvey = false;

    $scope.ageTempArr = new Array();
    $scope.incomeTempArr = new Array();
    $scope.chldTempArr = new Object();
    $scope.lngFlag = false;
    
    
    $scope.diableAdvanceTarget = false;
    
    $scope.totalRemRace = 0;
    $scope.selectionRegion = true;
    $scope.selectionDivision = true;
    $scope.selectionState = true;

    $scope.sltDivision = [];
    $scope.division = [];

    $scope.sltRegion = [];
    $scope.region = [];

    $scope.properties = {};
    $scope.properties.clickBalance = 0;
    $scope.properties.quotas = new Array();
    $scope.allProperties = {};
    $scope.countryCh = new Array();
    //$scope.age = new Array();
    //$scope.houseHoldIncome=[];

    $scope.comArray = [];
    $scope.srvId = $stateParams.key;

    $scope.incomeInputBoxVal = {
        "maxlength":6,
        "placeholder":999999
    }

    //Reset modal
    $scope.resetStateQuotas = true;


    //Variable used for grouping
    $scope.raceGrouping = {check: false};
    $scope.empGrouping = {check: false};
    $scope.eduGrouping = {check: false};
    $scope.rlnGrouping = {check: false};
    //PD-1402
    $scope.raceBeraGrouping = {check: false};
    $scope.deviceGrouping = {check : false};
    $scope.censusRegnGrouping = {check : false};
    $scope.devisionGrouping = {check: false};
    $scope.stateGrouping = {check: false};
    $scope.dmaGrouping = {check: false};
    $scope.csaGrouping = {check: false};
    $scope.msaGrouping = {check: false};
    $scope.countyGrouping = {check: false};
    $scope.AdvGrouping = {check: false};

    getCountries();
    getSampleTitle();

    $scope.mainSettings = {
        scrollableHeight: '200px',
        scrollable: true
    };

    $scope.location = {
        zipcode: {
            values: []
        }
    };

    //Variables used for condition grouping PD-961
    $scope.conditionGroupingArray = new Object();
    $scope.newraceModal = new Array();
    $scope.newrelationModal = new Array();
    $scope.groupingemploymentModal = new Array();
    $scope.groupingeducationModal = new Array();
    var raceModelLiveEdit = new Array();
    var relationModelLiveEdit = new Array();
    var employmentModelLiveEdit = new Array();
    var educationModelLiveEdit = new Array();
    //PD-1402
    $scope.groupingRaceBeraModel = new Array();
    var raceBeraModelLiveEdit = new Array();
    $scope.groupingDeviceModel = new Array();
    var deviceModelLiveEdit = new Array();
    $scope.groupingCensusRgnModel = new Array();
    var censusRgnModelLiveEdit = new Array();
    $scope.groupingDivisionModel = new Array();
    var divisionModelLiveEdit = new Array();
    $scope.groupingStateModel = new Array();
    $scope.groupingDmaModel = new Array();
    $scope.groupingCsaModel = new Array();
    $scope.groupingMsaModel = new Array();
    $scope.groupingCountyModel = new Array();

    
    //Check fielded value less than Allocations in quota modal
    $scope.gndrAllocationsLessThanFielded = false;
    $scope.ageAllocationsLessThanFielded = false;
    $scope.incomeAllocationsLessThanFielded = false;
    $scope.raceAllocationsLessThanFielded = false;
    $scope.rlnAllocationsLessThanFielded = false;
    $scope.chldAllocationsLessThanFielded = false;
    $scope.eduAllocationsLessThanFielded = false;
    $scope.empAllocationsLessThanFielded = false;
    $scope.deviceAllocationsLessThanFielded = false;
    $scope.rgnAllocationsLessThanFielded = false;
    $scope.dvsnAllocationsLessThanFielded = false;
    $scope.dmaAllocationsLessThanFielded = false;
    $scope.csaAllocationsLessThanFielded = false;
    $scope.msaAllocationsLessThanFielded = false;
    $scope.countyAllocationsLessThanFielded = false;
    $scope.stateAllocationsLessThanFielded = false;
    $scope.zipcodeAllocationsLessThanFielded = false;

    $scope.liveSurveyEditingStep = $state.params.edit;
    //zipcodes values out scope
    var zipcodesDataArr = [];
    var zipcodeFilePath = "";
    //call this method after completing getMasterData call 
    //getSurveyDetailsForUpdate($stateParams.key);
    $scope.disableQualification = true;

    $scope.properties.country = 1; //US
    $scope.properties.language = 1; //english
    $scope.blrFld.cntry = 1;
    $scope.blrFld.lang = 1;
    $scope.languageValue = "";

    //make child drop-down enable only in UAT
    $scope.childDisabled = true;
    /*if(config.app == "pureSpectrumApp-Staging"){
        $scope.childDisabled = false;
    }*/

    // PD-711 Quota Management V2
    var genderQual = new Array();
    var ageQual = new Array();
    var incomeQual = new Array();
    var raceQual = new Array();
    var relationQual = new Array();
    var empQual = new Array();
    var eduQual = new Array();
    var devQual = new Array();
    var statesQual = new Array();
    var csaQual = new Array();
    var msaQual = new Array();
    var dmaQual = new Array();
    var countyQual = new Array();
    var regionQual = new Array();
    var divisionQual = new Array();
    var raceBeraQual = new Array();
    var hispanicQual = new Array();
    var childQual = new Array();

    /*-------Auto Nesting Variables-------*/

    $scope.nestingQuotasArr = new Array();   // Only Stores the names of the nested quotas
    $scope.nestingQuotasArrFinal = new Array(); // Stores Nested Array names which are applied
    var nestingQuotasDetailObj = new Object();  //Stores Raw Data for making Cartesian product of Arrays
    var nestingResults = new Array();    // Store the data comes after catesian product
    $scope.nestedQuotasUiObj = new Array();     // Used to show Data on UI 
    $scope.nestedQuota = {has : false};
    var nestedTempQuotaData = new Array();    // temp array to hold all nested Quotas till saving

    /*-------Auto Nesting Variables Ends-------*/

    /*--------Advance targeting Variables------*/
    $scope.selectedOptions = new Array();  // Hold selected Options
    var advanceQual = new Array();       // Used for the advance qualifications
    var advanceData = new Array();      // Using for creating payload
    $scope.tempAdvArray = new Array();   // Using for showing buttons and their data
    var advQuota = new Array();
    /*-----Advance targeting Variables Ends----*/

    var surveyLocale = ($location.search().locale !== undefined ? encodeDecodeFactory.decode($location.search().locale) : '');
    $scope.properties.countryCode = (surveyLocale !== '' ? surveyLocale.countryCode : 'US' ); // set in query string of update survey
    $scope.properties.countryName = (surveyLocale !== '' ? surveyLocale.countryName : 'United States' );//'United States';
    setLocationViews($scope.properties.countryCode);

    $scope.properties.languageCode = (surveyLocale !== '' ? surveyLocale.languageCode : 'eng' );
    $scope.properties.languageName = (surveyLocale !== '' ? surveyLocale.languageName : 'English' ); 
    $scope.properties.languageTranslate = (surveyLocale !== '' ? surveyLocale.languageTranslate : 'en' );

    //get survey id of survey
    //console.log("$location.search().survey_id ",$location.search().survey_id)
    if($location.search().survey_id !== undefined) {
        $scope.newId = parseInt($location.search().survey_id);
        $rootScope.clone = true;
    }

    $scope.setSample = function(id) {
        $scope.properties.samplesType = id;
    };

    //toggle flags for fields
    $scope.fieldsFlags = {
        relationship : true,
        race : true,
        children : true,
        employment : true,
        education : true,
        device : true,
        advTarget : false,
        location : true,
        bera: false,  // Added for Bera
        census: true,
        clickBal: false
    };

    /*---For Bera-----*/
    if(_.contains(config.bera, userData.cmp) || userData.operatorAcssLvls == 'admin'){
        $scope.fieldsFlags.bera = true;
    }
    /*---For Adavnce Targetting----PD-1344*/
    var adavnceTargetEnableDisable = function() {
        if(_.contains(config.advanceTarget, userData.cmp) || userData.operatorAcssLvls == 'admin' || config.app == "pureSpectrumApp-Dev"){
            $scope.fieldsFlags.advTarget = true;
        }
    }
    //options to show when country is selected
    var optionsToDisplay = function(country) {
        $scope.fieldsFlags.gender = _.contains(config.countryInQuals.gender, country)? true:false;
        $scope.fieldsFlags.age = _.contains(config.countryInQuals.age, country)?true:false;
        $scope.fieldsFlags.hhi = _.contains(config.countryInQuals.hhi, country)?true:false;
        $scope.fieldsFlags.race = _.contains(config.countryInQuals.race, country)?true:false;
        $scope.fieldsFlags.relationship = _.contains(config.countryInQuals.relationship, country)?true:false;
        $scope.fieldsFlags.children = _.contains(config.countryInQuals.children, country)?true:false;
        $scope.fieldsFlags.employment = _.contains(config.countryInQuals.employment, country)?true:false;
        $scope.fieldsFlags.education = _.contains(config.countryInQuals.education, country)?true:false;
        $scope.fieldsFlags.device = _.contains(config.countryInQuals.device, country)?true:false;
        $scope.fieldsFlags.location = _.contains(config.countryInQuals.location, country)?true:false;

        $scope.fieldsFlags.census = _.contains(config.countryInQuals.census, country)?true:false;
        if(_.contains(config.countryInQuals.bera, country)){
            if(_.contains(config.bera, userData.cmp) || userData.operatorAcssLvls == 'admin' || config.app == "pureSpectrumApp-Dev" || config.app == "pureSpectrumApp-Staging"){
                $scope.fieldsFlags.bera = true;
            }else{
                $scope.fieldsFlags.bera = false;
            }
        }else{
            $scope.fieldsFlags.bera = false;
        }
        if(_.contains(config.clickBal, userData.cmp) || userData.operatorAcssLvls == 'admin' || config.app == "pureSpectrumApp-Dev" || config.app == "pureSpectrumApp-Staging"){
            $scope.fieldsFlags.clickBal = true;
        }
        adavnceTargetEnableDisable();//PD-1344
    };

    //reset survey data
    var resetSurveyData = function() {
        $scope.clearAllLocation();

        $scope.raceQuotaFlag = {
            resetRace : true,
            hasRaceFlag: false,
            editRaceFlag: false,
            raceFlxValue: '0',
            raceFlx: true
        }
        $scope.gndrQuotaFlag = {
            resetGen : true,
            hasGndrFlag: false,
            editGndrFlag: false,
            gndrFlxValue: '0',
            gndrFlx: true
        }
        $scope.rlnQuotaFlag = {
            resetRel : true,
            hasRlnFlag: false,
            editRlnFlag: false,
            rlnFlxValue: '0',
            rlnFlx: true
        } 
        $scope.empQuotaFlag = {
            resetEmp : true,
            hasEmpFlag: false,
            editEmpFlag: false,
            empFlxValue: '0',
            empFlx: true
        } 
        $scope.eduQuotaFlag = {
            resetEdu : true,
            hasEduFlag: false,
            editEduFlag: false,
            eduFlxValue: '0',
            eduFlx: true
        } 
        $scope.dvcQuotaFlag = {
            resetDev : true,
            hasDeviceFlag: false,
            editDvcFlag: false,
            dvcFlxValue: '0',
            dvcFlx: true
        }
        $scope.rbQuotaFlag = {
            resetRb : true,
            hasRbFlag: false,
            editRbFlag: false,
            rbFlxValue: '0',
            raceBeraFlx: true
        }   
        $scope.hisQuotaFlag = {
            resetHisOri : true,
            hasHisOriFlag: false,
            editHisOriFlag: false,
            hispanicFlxValue: '0',
            hispanicFlx: true
        }
        $scope.regQuotaFlag = {
            resetReg : true,
            hasRegionFlag: false,
            editRegionFlag: false,
            regionFlxValue: '0',
            regionFlx: true
        } 
        $scope.dvsnQuotaFlag = {
            resetDivi : true,
            hasDivisionFlag: false,
            editDivisionFlag: false,
            divisionFlxValue: '0',
            divisionFlx: true
        }
        $scope.childQuotaFlag = {
            resetChild: true,
            hasChldFlag: false,
            editChldFlag: false,
            chldFlxValue : '0',
            chldFlx: true
        }
        $scope.ageQuotaFlag = {
            resetAge: true,
            hasAgeFlag: false,
            editAgeFlag: false,
            ageFlxValue : '0',
            ageFlx: true,
            clearAgeFlag: false
        }
        $scope.incomeQuotaFlag = {
            resetInc: true,
            hasIncomeFlag: false,
            editIncomeFlag: false,
            incomeFlxValue : '0',
            incFlx: true,
            clearIncomeFlag: false
        }

        //PD-1130
        $scope.censusRepoFlag = {
            hasCensusRepoGndr : false,
            hasCensusRepoAge : false,
            hasCensusRepoIncome : false,
            hasCensusRepoRace : false,
            hasCensusRepoHis : false,
            hasCensusRepoEdu : false,
            hasCensusRepoEmploy : false
        }
        //$scope.resetGen = true;
        //$scope.resetInc = true;

        $scope.ageSltBoxVal();
        $scope.incomeSltBoxVal();
        
        $scope.genderResetModal();
        $scope.empResetModal();
        $scope.raceResetModal();
        $scope.relationResetModal();
        $scope.eduResetModal();
        $scope.childResetModal();
        $scope.deviceResetModal();
        $scope.rbResetModal();
        $scope.hispanicResetModal();

        $scope.clearFields();
        $scope.clearNesting();
        $scope.removeAllAdvTarget();
    }

    //selected country
    var selctdCountry = {};
    var setSelectedCountry = function(item) {
        $scope.lngFlag = true;
        $scope.properties.country = item.id;
        $scope.properties.countryCode = item.short_Code;
        $scope.properties.countryName =  item.name;
        
        $timeout(function() {
            $scope.countryValue = item.name;
        },0);
        
    
        $scope.blrFld.cntry = item.id;

        if ($scope.blrFld.lang && $scope.blrFld.cntry && $scope.blrFld.LOI && $scope.blrFld.incd) {
            getSurveyHeaderPricingValue($scope.blrFld.lang, $scope.blrFld.cntry, $scope.blrFld.LOI, $scope.blrFld.incd)
        }

        commonApi.getLanguageByCountry(item.id).success(function(data) {
            //$scope.languageValue = 'Select Language';
            $scope.lang = [];
            // $scope.properties.countryCode = data.short_Code;
            //$scope.properties.countryName =  data.name;
            setLocationViews($scope.properties.countryCode);
            if (data && data.languages && data.languages.length > 0) {

                //$scope.lang.concat(data.languages.values[0].lang);
                $scope.lang = data.languages;
                $scope.setLanguage(data.languages[0].id);

                $scope.disableQualification = false;
                getMasterDataByCountryLang($scope.properties.countryCode, data.languages[0].short_code);
                optionsToDisplay($scope.properties.countryCode);
            }
        }).error(function(err) {
            notify({
                message: "Something went wrong in fetching Languages",
                classes: 'alert-danger',
                duration: 2000
            });
        });

        selctdCountry = {};
        resetSurveyData();
    }
    
    $scope.checkDirty = false;
    
    $scope.setCountry = function(event, item) {
        event.preventDefault();
        event.stopPropagation();
        selctdCountry = item;
        // When Country changes remove the current Location Data
        $scope.locationData = {"type":"","selected":false,"currentClickItem":"","currIndex":0,"currItem":{},"achieved":0};
        if($scope.checkDirty) {
            if($scope.properties.country != item.id) {
                $timeout(function() {
                    angular.element('#cntryModal').trigger('click');
                },0);
            }else{
                setSelectedCountry(item);
            }
        }else {
            setSelectedCountry(item);
        }
        angular.element('#Survey_Country').attr('aria-expanded','false');
        angular.element('#Survey_Country').parent('.dropdown').removeClass('open');
        //clear selected locations

    }

    $scope.setCountrySelected = function() {
        if(selctdCountry && selctdCountry.id) {
            setSelectedCountry(selctdCountry);
            // resetSurveyData();
            $scope.checkDirty = false;
        }
    };

    $scope.cancelCountrySelected = function() {
        selctdCountry = {};
        var item = _.find($scope.country, function(n) {
            return (n.id == $scope.properties.country)
            
        });
        setSelectedCountry(item);   
    }

    $scope.setLanguage = function(id) {
        $scope.blrFld.lang = id;
        $scope.properties.language = id;
        if($scope.lang.length > 0) {
            $scope.lang.forEach(function(singleLang){
                if(singleLang.id !== undefined && singleLang.id == id && singleLang.short_code !== undefined) {
                    $scope.properties.languageCode = singleLang.short_code;
                    $scope.properties.languageName = singleLang.name;
                    document.getElementById("languagedrop").innerHTML = singleLang.name; //update value in UI
                    $scope.properties.languageTranslate = singleLang.transalte_code;
                    $translate.use($scope.properties.languageTranslate);
                }
            })
        }
        if ($scope.blrFld.lang && $scope.blrFld.cntry && $scope.blrFld.LOI && $scope.blrFld.incd) {
            getSurveyHeaderPricingValue($scope.blrFld.lang, $scope.blrFld.cntry, $scope.blrFld.LOI, $scope.blrFld.incd)
        }


    }


    function setLocationViews(countryCode) {
        var locationViews = {
            "US" :{
                "netrep": {
                    "name":"Nat Rep",
                    "isVisible":true,
                },
                "region": {
                    "name":"Census Region",
                    "isVisible":true,
                },
                "division": {
                    "name":"Census Division",
                    "isVisible":true,
                },
                "state": {
                    "name":"State",
                    "isVisible":true,
                },
                "dma": {
                    "name":"DMA",
                    "isVisible":true,
                },
                "csa": {
                    "name":"CSA",
                    "isVisible":true,
                },
                "msa": {
                    "name":"MSA",
                    "isVisible":true,
                },
                "county": {
                    "name":"County",
                    "isVisible":true,
                },
                "zipcode": {
                    "name":"Zipcode",
                    "isVisible":true,
                }
            },
            "CA" :{
                "netrep": {
                    "name":"Nat Rep",
                    "isVisible":false,
                },
                "region": {
                    "name":"Census Region",
                    "isVisible":false,
                },
                "state": {
                    "name":"Province",
                    "isVisible":true,
                },
                "zipcode": {
                    "name":"Postal Codes",
                    "isVisible":true,
                }
            },
            "IN" :{
                "netrep": {
                    "name":"Nat Rep",
                    "isVisible":false,
                },
                "region": {
                    "name":"Census Region",
                    "isVisible":false,
                },
                "state": {
                    "name":"State",
                    "isVisible":true,
                },
                "zipcode": {
                    "name":"Pin Codes",
                    "isVisible":true,
                },
                "dma": {
                    "name":"District",
                    "isVisible":true,
                }
            },
            "UK" :{
                "netrep": {
                    "name":"Nat Rep",
                    "isVisible":false,
                },
                "region": {
                    "name":"UK Region",
                    "isVisible":true,
                },
                "state": {
                    "name":"State",
                    "isVisible":false,
                },
                "zipcode": {
                    "name":"Postcodes",
                    "isVisible":true,
                },
                "dma": {
                    "name":"District",
                    "isVisible":false,
                }
            }
        };
        $scope.locationViews = locationViews[countryCode];
    }

    // Defining masterData globally to use in quota Structures V2
    var masterData = [];
    var currency_units = new Number();
    var age_units = new Object();
    function getMasterDataByCountryLang(countryCode, languageCode){
        ngProgressLite.start();
        $scope.loader.show = true;
        createSurvey.getMasterDataByCountryLang(countryCode, languageCode).success(function(data){
            ngProgressLite.done();
            $scope.loader.show = false;
            if(data.apiStatus == "Success"){
                var defaultLanguage = 'eng'; // to show all the options in create survey page in english only whether selected language may be different
                masterData = data.values;  // MasterData Values stored in this variable for further use
                _.each(masterData, function(elm){
                    if(elm.data && elm.data[countryCode] && elm.data[countryCode][defaultLanguage] && elm.category == 'simple') {
                        if(elm.masterKey == "gender"){
                            $scope.sltGender = [];
                            $scope.genderInfo = elm.data[countryCode][defaultLanguage];
                            $scope.app.gender = elm.data[countryCode][defaultLanguage];
                            genderQual.push({
                                "qualification_code": elm.id,
                                "q_type": "normal",
                                "q_category": "basic",
                                "q_name": elm.masterKey,
                                "is_default":true,
                                "conditions":[]
                            });
                            _.each($scope.genderInfo, function(gender){
                                gender.selected = true;
                                gender.fieldName = "Gender";
                                gender.qual_id = elm.id;
                                gender.qual_name = elm.masterKey;
                                $scope.sltGender.push({
                                    "id": gender.id,
                                    "qual_id":elm.id
                                });
                                //genderQual[0].conditions.push(gender.id);
                            });
                        } 
                        if(elm.masterKey == "race"){
                            $scope.sltRace = [];
                            $scope.race = elm.data[countryCode][defaultLanguage];
                            $scope.app.race = elm.data[countryCode][defaultLanguage];
                            raceQual.push({
                                "qualification_code": elm.id,
                                "q_type": "normal",
                                "q_category": "basic",
                                "q_name": elm.masterKey,
                                "is_default":true,
                                "conditions":[]
                            });
                            _.each($scope.race, function(race){
                                race.selected = true;
                                race.fieldName = "Race";
                                race.qual_id = elm.id;
                                race.qual_name = elm.masterKey;
                                $scope.sltRace.push({
                                    "id": race.id,
                                    "qual_id":elm.id
                                });
                                //raceQual[0].conditions.push(race.id);
                            });

                        } 
                        if(elm.masterKey == "relationships"){
                            $scope.sltRelation = [];
                            $scope.relation = elm.data[countryCode][defaultLanguage];
                            $scope.app.relation = elm.data[countryCode][defaultLanguage];
                            relationQual.push({
                                "qualification_code": elm.id,
                                "q_type": "normal",
                                "q_category": "basic",
                                "q_name": elm.masterKey,
                                "is_default":true,
                                "range_sets":[]
                            });
                            _.each($scope.relation, function(relation){
                                relation.selected = true;
                                relation.fieldName = "Relationship";
                                relation.qual_id = elm.id;
                                relation.qual_name = elm.masterKey;
                                $scope.sltRelation.push({
                                    "id": relation.id,
                                    "qual_id":elm.id
                                });
                                //relationQual[0].conditions.push(relation.id);
                            });
                        } 
                        if(elm.masterKey == "children"){
                            $scope.chldTempArr = {};
                            $scope.children = elm.data[countryCode][defaultLanguage];
                            $scope.app.children = elm.data[countryCode][defaultLanguage];
                            childQual.push({
                                "qualification_code": elm.id,
                                "q_type": "normal",
                                "q_category": "basic",
                                "q_name": elm.masterKey,
                                "is_default":true,
                                "conditions":[]
                            });
                            _.each($scope.children, function(children){
                                children.selected = true;
                                children.fieldName = "Children";
                                children.qual_id = elm.id;
                                children.qual_name = elm.masterKey;
                                $scope.sltChildren.push({
                                    "id": children.id,
                                    "qual_id":elm.id
                                });
                            });
                            $scope.chldTempArr = {
                                'no':[{ 'flexPer':0, 'min':'', 'max':'', 'id':111, 'qual_id': elm.id, 'qual_name': elm.masterKey}],
                                'have':[{'flexPer':0, 'min':'', 'max':'', 'id':112, 'qual_id': elm.id, 'qual_name': elm.masterKey}]
                            };
                        } 
                        if(elm.masterKey == "employments"){
                            $scope.sltEmployment = [];
                            $scope.employement = elm.data[countryCode][defaultLanguage];
                            $scope.app.employement = elm.data[countryCode][defaultLanguage];
                            empQual.push({
                                "qualification_code": elm.id,
                                "q_type": "normal",
                                "q_category": "basic",
                                "q_name": elm.masterKey,
                                "is_default":true,
                                "conditions":[]
                            });
                            _.each($scope.employement, function(employement){
                                employement.selected = true;
                                employement.fieldName = "Employment";
                                employement.qual_id = elm.id;
                                employement.qual_name = elm.masterKey;
                                $scope.sltEmployment.push({
                                    "id": employement.id,
                                    "qual_id":elm.id
                                });
                                //empQual[0].conditions.push(employement.id);
                            });
                        } 
                        if(elm.masterKey == "educations"){
                            $scope.sltEducation = [];
                            $scope.education = elm.data[countryCode][defaultLanguage];
                            $scope.app.education = elm.data[countryCode][defaultLanguage];
                            eduQual.push({
                                "qualification_code": elm.id,
                                "q_type": "normal",
                                "q_category": "basic",
                                "q_name": elm.masterKey,
                                "is_default":true,
                                "conditions":[]
                            });
                            _.each($scope.education, function(education){
                                education.selected = true;
                                education.fieldName = "Education";
                                education.qual_id = elm.id;
                                education.qual_name = elm.masterKey;
                                $scope.sltEducation.push({
                                    "id": education.id,
                                    "qual_id":elm.id
                                });
                                //eduQual[0].conditions.push(education.id);
                            });
                        } 
                        if(elm.masterKey == "device"){
                            $scope.sltDevice = [];
                            $scope.deviceInfo = elm.data[countryCode][defaultLanguage];
                            $scope.app.device = elm.data[countryCode][defaultLanguage];
                            devQual.push({
                                "qualification_code": elm.id,
                                "q_type": "normal",
                                "q_category": "basic",
                                "q_name": elm.masterKey,
                                "is_default":true,
                                "conditions":[]
                            });
                            _.each($scope.deviceInfo, function(device){
                                device.selected = true;
                                device.fieldName = "Device";
                                device.qual_id = elm.id;
                                device.qual_name = elm.masterKey;
                                $scope.sltDevice.push({
                                    "id": device.id,
                                    "qual_id":elm.id
                                });
                                //devQual[0].conditions.push(device.id);
                            });
                        } 
                        // add race-bera and hispanic- origin for Bera project.
                        if(elm.masterKey == "raceBera"){
                            $scope.sltRaceBera = [];
                            $scope.raceBera = elm.data[countryCode][defaultLanguage];
                            $scope.app.raceBera = elm.data[countryCode][defaultLanguage];

                            raceBeraQual.push({
                                "qualification_code": elm.id,
                                "q_type": "normal",
                                "q_category": "basic",
                                "q_name": elm.masterKey,
                                "is_default":true,
                                "conditions":[]
                            });
                            _.each($scope.raceBera, function(raceBera){
                                raceBera.selected = true;
                                raceBera.fieldName = "raceBera";
                                raceBera.qual_id = elm.id;
                                raceBera.qual_name = elm.masterKey;
                                $scope.sltRaceBera.push({
                                    "id": raceBera.id,
                                    "qual_id":elm.id
                                });
                            });
                        }
                        if(elm.masterKey == "hispanicOrigin"){
                            $scope.hispanicOrigin = [];
                            $scope.hispanic = elm.data[countryCode][defaultLanguage];
                            $scope.app.hispanic = elm.data[countryCode][defaultLanguage];
                            hispanicQual.push({
                                "qualification_code": elm.id,
                                "q_type": "normal",
                                "q_category": "basic",
                                "q_name": elm.masterKey,
                                "is_default":true,
                                "conditions":[]
                            });
                            _.each($scope.hispanic, function(hispanic){
                                hispanic.selected = true;
                                hispanic.fieldName = "hispanic";
                                hispanic.qual_id = elm.id;
                                hispanic.qual_name = elm.masterKey;
                                $scope.hispanicOrigin.push({
                                    "id": hispanic.id,
                                    "qual_id":elm.id
                                });
                            });
                        }
                        if(elm.masterKey == "regions"){
                            $scope.region = elm.data[countryCode][defaultLanguage];
                            regionQual.push({
                                "qualification_code": elm.id,
                                "q_type": "normal",
                                "q_category": "basic",
                                "q_name": elm.masterKey,
                                "is_default":false,
                                "conditions":[]
                            });
                            _.each($scope.region, function(region){
                                region.qual_id = elm.id;
                                region.qual_name = elm.masterKey;
                            });
                        } 
                        if(elm.masterKey == "divisions"){
                            $scope.division = elm.data[countryCode][defaultLanguage];
                            divisionQual.push({
                                "qualification_code": elm.id,
                                "q_type": "normal",
                                "q_category": "basic",
                                "q_name": elm.masterKey,
                                "is_default":false,
                                "conditions":[]
                            });
                            _.each($scope.division, function(division){
                                division.qual_id = elm.id;
                                division.qual_name = elm.masterKey;
                            });
                        }
                        
                    }
                    //PD-711 For adding qualification code according to quota V2
                    if(elm.masterKey == "age"){
                        ageQual.push({
                            "qualification_code": elm.id,
                            "q_type": "range",
                            "q_category": "basic",
                            "q_name": elm.masterKey,
                            "is_default":true,
                            "range_sets":[]
                        });
                    } 
                    if(elm.masterKey == "houseHoldIncome"){
                        incomeQual.push({
                            "qualification_code": elm.id,
                            "q_type": "range",
                            "q_category": "basic",
                            "q_name": elm.masterKey,
                            "is_default":true,
                            "range_sets":[]
                        });
                    } 
                    if(elm.masterKey == "states"){
                        statesQual.push({
                            "qualification_code": elm.id,
                            "q_type": "normal",
                            "q_category": "basic",
                            "q_name": elm.masterKey,
                            "is_default":false,
                            "conditions":[]
                        });
                    }
                    if(elm.masterKey == "csa"){
                        csaQual.push({
                            "qualification_code": elm.id,
                            "q_type": "normal",
                            "q_category": "basic",
                            "q_name": elm.masterKey,
                            "is_default":false,
                            "conditions":[]
                        });
                    }
                    if(elm.masterKey == "msa"){
                        msaQual.push({
                            "qualification_code": elm.id,
                            "q_type": "normal",
                            "q_category": "basic",
                            "q_name": elm.masterKey,
                            "is_default":false,
                            "conditions":[]
                        });
                    }
                    if(elm.masterKey == "county"){
                        countyQual.push({
                            "qualification_code": elm.id,
                            "q_type": "normal",
                            "q_category": "basic",
                            "q_name": elm.masterKey,
                            "is_default":false,
                            "conditions":[]
                        });
                    }
                    if(elm.masterKey == "dma"){
                        dmaQual.push({
                            "qualification_code": elm.id,
                            "q_type": "normal",
                            "q_category": "basic",
                            "q_name": elm.masterKey,
                            "is_default":false,
                            "conditions":[]
                        });
                    }
                    // 
                    if(elm.masterKey == "units"){
                        currency_units = elm.data.currency_cd[countryCode];
                        age_units = elm.data.age_cd;
                        $scope.houseHoldIncome.units = currency_units;
                        if(currency_units == 325){
                            $scope.incomeInputBoxVal = {
                                "maxlength":9,
                                "placeholder":100000000
                            }
                        }else if(currency_units == 326){
                            $scope.incomeInputBoxVal = {
                                "maxlength":8,
                                "placeholder":10000000
                            }
                        }else if(currency_units == 327 || currency_units == 328 || currency_units == 331 || currency_units == 344 || currency_units == 345 || currency_units == 349 || currency_units == 350 || currency_units == 353 || currency_units == 352){
                            $scope.incomeInputBoxVal = {
                                "maxlength":7,
                                "placeholder":9999999
                            }
                        }else if(currency_units == 329 || currency_units == 351){
                            $scope.incomeInputBoxVal = {
                                "maxlength":8,
                                "placeholder":99999999
                            }
                        }else if(currency_units == 330 || currency_units == 337 || currency_units == 339){
                            $scope.incomeInputBoxVal = {
                                "maxlength":9,
                                "placeholder":999999999
                            }
                        }else if(currency_units == 334){
                            $scope.incomeInputBoxVal = {
                                "maxlength":10,
                                "placeholder":9999999999
                            }
                        }
                    }
                });
            }
            //get survey data after finishing getMasterData Call- Place here to support Draft clone and live clone
            if($stateParams.id == 'CreateSurveys' && ($scope.newId != undefined || $scope.newId != null ||  $scope.newId != "") && $rootScope.clone == true){   
                    //console.log(" if of create getSurveyDetailsForUpdate ")
                    getSurveyDetailsForUpdate($scope.newId);
            }else{
                //console.log(" else of create getSurveyDetailsForUpdate ")
                getSurveyDetailsForUpdate($stateParams.key);
            }
        }).error(function(err){
            $scope.loader.show = false;
            ngProgressLite.done();
            notify({
                message: "Something went wrong in fetching MasterData",
                classes: 'alert-danger',
                duration: 2000
            });
        })
    }

    //child age unit
    $scope.childAgeUnit = {
        name : 'month',
        value : 312
    };
    $scope.onChangeChildAgeUnit = function(unitname) {
        var name = $scope.childAgeUnit.name ;
        $scope.childAgeUnit.name = unitname;
        if(name != $scope.childAgeUnit.name && $scope.chldTempArr.have.length >1){
            if(!confirm("Modifying the Unit Name will delete the quotas")){
                $scope.childAgeUnit.name = name;
            }else{
                _.each($scope.chldTempArr.have, function(value,index){
                    if(index != 0){
                         $scope.chldTempArr.have.splice([index]);
                    }else{
                        $scope.chldTempArr.have[index].min="";
                    }
                })
                $scope.chldTotalRemRace = $scope.completesNeeded;
            }
        }
        $scope.childAgeUnit.value = age_units[unitname.toLowerCase()];
    };

    function getCountries() {
        ngProgressLite.start();
        $scope.loader.show = true;
        $scope.country = new Array();
        commonApi.countries().success(function(data) {
            ngProgressLite.done();
            $scope.loader.show = false;
            if (data.countries != null) {
                var arr1 = new Array();
                var arr2 = new Array();
                // For making US Canada at top and other are in alphabetical order
                    angular.forEach(data.countries.values, function(value){
                        if(value.short_Code == 'US' || value.short_Code == 'CA'){
                            arr1.push(value);
                        }else{
                            arr2.push(value);
                        }
                    });
                    arr1 = $filter('orderBy')(arr1, '-name');
                    arr2 = $filter('orderBy')(arr2, 'name');
                $scope.country = _.union(arr1, arr2);
                //console.log('$scope.country '+JSON.stringify($scope.country));
                $scope.app.country = data.countries.values;
                var countryDt = data.countries.values[0];
                if($location.search().locale !== undefined) {
                    countryDt = _.findWhere(data.countries.values, {short_Code : surveyLocale.countryCode});
                }
                setSelectedCountry(countryDt);
            }
        }).error(function(err) {
            $scope.loader.show = false;
            notify({
                message: "Something went wrong in fetching coutries",
                classes: 'alert-danger',
                duration: 2000
            });
        });
    }


    function getSampleTitle() {
        ngProgressLite.start();
        $scope.loader.show = true;
        commonApi.samples().success(function(data) {
            ngProgressLite.done();
            $scope.loader.show = false;
            if (data.sample != null) {
                $scope.samples = data.sample.values;
                $scope.app.samples = data.sample.values;
            }
        }).error(function(err) {
            $scope.loader.show = false;
            ngProgressLite.done();
            notify({
                message: "Something went wrong in fetching samples",
                classes: 'alert-danger',
                duration: 2000
            });
        });
    }

    //PD-321
    var setSelectedDivisonData = function(id, selected, options, index) {
        var removeIds = [];
        $scope.quotaTotalRemRace = $scope.completesNeeded;

        if (!options || options == undefined) {
            return false;
        }
        _.each(options, function(option,index){
            var hasdivisionQuota =  _.findWhere($scope.sltDivision,{"hasValidQuotas":true});
           if(hasdivisionQuota){
             hasdivisionQuota =hasdivisionQuota['hasValidQuotas'];
                if(hasdivisionQuota && $scope.liveSurveyEditingStep !== 'editStep1'){
                    $scope.clearCensusDivision();
                }
           }
             if (option.id == id) {
                if (selected == true) {
                    if($scope.liveSurveyEditingStep == 'editStep1' && hasdivisionQuota){
                         if(!confirm("Modifying the qualifications will delete the current quotas")) {
                                $scope.division[index].selected = !$scope.division[index].selected;
                                return false;
                            }else{
                                $scope.clearCensusDivision();
                                $scope.sltDivision.push({
                                        "id": id
                                    });

                                    if (option.number != undefined && option.number != 0) {
                                        $scope.quotaTotalRemRace = $scope.quotaTotalRemRace - option.number;
                                    }
                            }
                     }else{
                            $scope.sltDivision.push({
                                    "id": id
                            });

                            if (option.number != undefined && option.number != 0) {
                                $scope.quotaTotalRemRace = $scope.quotaTotalRemRace - option.number;
                            }
                     }
                    
                }
                else {
                    if($scope.liveSurveyEditingStep == 'editStep1' && hasdivisionQuota){
                            if(!confirm("Modifying the qualifications will delete the current quotas")) {
                                $scope.division[index].selected  = !$scope.division[index].selected;
                                return false;
                            }else{
                                 $scope.clearCensusDivision();
                                removeIds.push(id);
                            }
                    }else{
                            removeIds.push(id);
                            if(hasdivisionQuota){
                                $scope.clearCensusDivision();
                            }
                    }
                }
            }
            else if (option.selected === true && option.number != undefined && option.number != 0) {
                $scope.quotaTotalRemRace = $scope.quotaTotalRemRace - option.number;
            }
        });

        var temp = $scope.sltDivision.filter(function (item) {
            return !(removeIds.indexOf(item.id) !== -1);
        });

        $scope.sltDivision = temp;

        temp = $scope.division.map(function (item) {
            if (removeIds.indexOf(item.id) !== -1) {
                return {id: item.id, selected: item.selected, name: item.name, cnt: item.cnt};
            }
            else {
                return item;
            }
        });

        $scope.division = temp;
    };

    $scope.setSelectDivision = function(id, selected, $event, options, index) {

        //check for any other location is selected or not
        if($scope.locationData.selected) {
            //if already seleted
            if($scope.locationData.type == "division") {
                //call fun to select item
                setSelectedDivisonData(id, selected, options, index);
            }else {
                //timeout because trigger causes to rootscope issue
                $timeout(function() {
                    $scope.locationData.currentClickItem = "division";
                    $scope.locationData.currIndex = index;
                    angular.element('#clrmodel').trigger('click');
                },0);
            }            
        }else {

            $scope.locationData.selected = true;
            $scope.locationData.type = "division";

            setSelectedDivisonData(id, selected, options, index);
        }
    };

    //PD-321
    var setSelectedRegionData = function (id, selected, options, index) {
        var removeIds = [];
        $scope.quotaTotalRemRace = $scope.completesNeeded;
        
        if (!options || options == undefined) {
            return false;
        }
        _.each(options, function(option,index){
           var hasRgnQuota =  _.findWhere($scope.sltRegion,{"hasValidQuotas":true});
           if(hasRgnQuota){
             hasRgnQuota =hasRgnQuota['hasValidQuotas'];
                if(hasRgnQuota && $scope.liveSurveyEditingStep!== 'editStep1'){
                    $scope.clearCensusRegion();
                }
           }
            if (option.id == id) {
                if (selected == true) {
                    if($scope.liveSurveyEditingStep == 'editStep1' && hasRgnQuota){
                         if(!confirm("Modifying the qualifications will delete the current quotas")) {
                                $scope.region[index].selected = !$scope.region[index].selected;
                                 //$scope.locationData.selected  = false;
                                return false;
                            }else{
                                $scope.clearCensusRegion();
                                $scope.sltRegion.push({
                                "id": id
                                });

                                if (option.number != undefined && option.number != 0) {
                                    $scope.quotaTotalRemRace = $scope.quotaTotalRemRace - option.number;
                                }
                            }
                     }else{
                            $scope.sltRegion.push({
                                "id": id
                            });

                            if (option.number != undefined && option.number != 0) {
                                $scope.quotaTotalRemRace = $scope.quotaTotalRemRace - option.number;
                            }
                     }
                    
                }
                else {
                    if($scope.liveSurveyEditingStep == 'editStep1' && hasRgnQuota){
                            if(!confirm("Modifying the qualifications will delete the current quotas")) {
                                 $scope.region[index].selected  = !$scope.region[index].selected;
                                return false;
                            }else{
                                 $scope.clearCensusRegion();
                                removeIds.push(id);
                            }
                    }else{
                        removeIds.push(id);
                        if(hasRgnQuota){
                            $scope.clearCensusRegion();
                        }
                    }
                }
            }
            else if (option.selected === true && option.number != undefined && option.number != 0) {
                $scope.quotaTotalRemRace = $scope.quotaTotalRemRace - option.number;
            }
        });

        var temp = $scope.sltRegion.filter(function (item) {
            return !(removeIds.indexOf(item.id) !== -1);
        });

        $scope.sltRegion = temp;

        temp = $scope.region.map(function (item) {
            if (removeIds.indexOf(item.id) !== -1) {
                return {id: item.id, selected: item.selected, name: item.name, cnt: item.cnt};
            }
            else {
                return item;
            }
        });
        $scope.region = temp;
    };

    $scope.setSelectRegion = function (id, selected, $event, options, index) {
        //check for any other location is selected or not
        if($scope.locationData.selected) {
            //if already selected
            if($scope.locationData.type == "region") {
                //call fun to select item
                setSelectedRegionData(id, selected, options, index);
            }else {
                $timeout(function() {
                    $scope.locationData.currentClickItem = "region";
                    $scope.locationData.currIndex = index;
                    angular.element('#clrmodel').trigger('click'); 
                },0);
                 
            }          
        }else {
            $scope.locationData.selected = true;
            $scope.locationData.type = "region";
            setSelectedRegionData(id, selected, options, index);
        }        
    };

    $scope.showLoader = '';  // Variable for Disabling Next Page Button Until Api Calls Finishes
    $scope.saveSurvey = function(msg){
        $scope.showLoader = 'DataLoading';
        ngProgressLite.start();
        $scope.loader.show = true;
        // In live edit if completes less than fielded
        if($scope.completesNeeded > 0 && $scope.totalFielded > $scope.completesNeeded){
            notify({
                message: "You can't set completes less than total fielded",
                classes: 'alert-warning',
                duration: 3000
            });
            $scope.showLoader = "";
            ngProgressLite.done();
            $scope.loader.show = false;
            return false;
        }
        if($scope.properties.surveyTitle == undefined || $scope.properties.surveyTitle == null || $scope.properties.surveyTitle == "") {
            notify({
                message: 'Please Enter Title of Survey',
                classes: 'alert-danger',
                duration: 3000
            });
            $scope.showLoader = "";
            ngProgressLite.done();
            $scope.loader.show = false;
            return false;
        }
        if($scope.properties.samplesType == undefined || $scope.properties.samplesType == null || $scope.properties.samplesType == "") {
            notify({
                message: 'Please Select Category',
                classes: 'alert-danger',
                duration: 3000
            });
            $scope.showLoader = "";
            ngProgressLite.done();
            $scope.loader.show = false;
            return false;
        }
        if($scope.properties.country == undefined || $scope.properties.country == null || $scope.properties.country == "") {
            notify({message: 'Please Select Country', classes:'alert-danger',duration:3000} );
            $scope.properties.country = 1;
            $scope.showLoader = "";
            ngProgressLite.done();
            $scope.loader.show = false;
            return false;
        }
        if($scope.properties.language == undefined || $scope.properties.language == null || $scope.properties.language == "") {
            notify({message: 'Please Select Language', classes:'alert-danger',duration:3000} );
            $scope.properties.language = 1;
            $scope.showLoader = "";
            ngProgressLite.done();
            $scope.loader.show = false;
            return false;  
        }
        if($scope.properties.numberOfCompletes === '') {
            notify({
                message: 'Please Enter Number of Completes',
                classes: 'alert-danger',
                duration: 3000
            });
            $scope.showLoader = "";
            ngProgressLite.done();
            $scope.loader.show = false;
            return false;
        }
        if($scope.properties.lengthOfSurvey == undefined || $scope.properties.lengthOfSurvey == null || $scope.properties.lengthOfSurvey == "" || $scope.properties.lengthOfSurvey > 60 || $scope.properties.lengthOfSurvey<=0) {
            notify({
                message: 'Please Enter Length of Survey Minimum of 1 Minute and Maximum of 60 Minutes',
                classes: 'alert-danger',
                duration: 3000
            });
            $scope.showLoader = "";
            ngProgressLite.done();
            $scope.loader.show = false;
            return false;
        }
        if($scope.properties.field_time == undefined || $scope.properties.field_time == null || $scope.properties.field_time == "") {
            notify({
                message: 'Please Enter Field Time',
                classes: 'alert-danger',
                duration: 3000
            });
            $scope.showLoader = "";
            ngProgressLite.done();
            $scope.loader.show = false;
            return false;
        }
        if($scope.incidence == undefined || $scope.incidence == null || $scope.incidence == "") {
            notify({
                message: 'Please Enter Incidence',
                classes: 'alert-danger',
                duration: 3000
            });
            $scope.showLoader = "";
            ngProgressLite.done();
            $scope.loader.show = false;
            return false;
        }

        if($scope.incidence <= 0) {
            notify({
                message: 'Incidence Can not be 0',
                classes: 'alert-danger',
                duration: 3000
            });
            $scope.showLoader = "";
            ngProgressLite.done();
            $scope.loader.show = false;
            return false;
        }

        if($scope.countryValue == 'Japan' && $scope.houseHoldIncome.max > 100000000 || $scope.countryValue == 'Philippines' && $scope.houseHoldIncome.max > 10000000){
           if($scope.countryValue == 'Japan'){
                notify({
                    message: "Income can't be greater than 100 million",                    
                    classes: 'alert-danger',
                    duration: 3000
                });
            }else{
                notify({
                    message: "Income can't be greater than 10 million",
                    classes: 'alert-danger',
                    duration: 3000
                });
            }
            $scope.showLoader = "";
            ngProgressLite.done();
            $scope.loader.show = false;
            return false;
        }
        
        if($scope.sltGender == undefined || $scope.sltGender == null || $scope.sltGender == "") {
            notify({
                message: 'Please Select Gender',
                classes: 'alert-danger',
                duration: 3000
            });
            $scope.showLoader = "";
            ngProgressLite.done();
            $scope.loader.show = false;
            return false;
        }
        
        if(($scope.sltDevice == undefined || $scope.sltDevice == null || $scope.sltDevice == "") && $scope.fieldsFlags.device) {
            notify({
                message: 'Please Select Device',
                classes: 'alert-danger',
                duration: 3000
            });
            $scope.showLoader = "";
            ngProgressLite.done();
            $scope.loader.show = false;
            return false;
        }
        if(($scope.sltRace == undefined || $scope.sltRace == null || $scope.sltRace == "") && $scope.fieldsFlags.race) {
            notify({
                message: 'Please Select Race',
                classes: 'alert-danger',
                duration: 3000
            });
            $scope.showLoader = "";
            ngProgressLite.done();
            $scope.loader.show = false;
            return false;
        }

        if(($scope.sltRelation == undefined || $scope.sltRelation == null || $scope.sltRelation == "") && $scope.fieldsFlags.relationship) {
            notify({
                message: 'Please Select Relationship',
                classes: 'alert-danger',
                duration: 3000
            });
            $scope.showLoader = "";
            ngProgressLite.done();
            $scope.loader.show = false;
            return false;
        }
        if(($scope.sltEmployment == undefined || $scope.sltEmployment == null || $scope.sltEmployment == "") && $scope.fieldsFlags.employment) {
            notify({
                message: 'Please Select Employement',
                classes: 'alert-danger',
                duration: 3000
            });
            $scope.showLoader = "";
            ngProgressLite.done();
            $scope.loader.show = false;
            return false;
        }

        if(($scope.sltEducation == undefined || $scope.sltEducation == null || $scope.sltEducation == "") && $scope.fieldsFlags.education) {
            notify({
                message: 'Please Select Education',
                classes: 'alert-danger',
                duration: 3000
            });
            $scope.showLoader = "";
            ngProgressLite.done();
            $scope.loader.show = false;
            return false;
        } 
        if(($scope.sltChildren == undefined || $scope.sltChildren == null || $scope.sltChildren == "") && $scope.fieldsFlags.children) {
            notify({
                message: 'Please Select Children',
                classes: 'alert-danger',
                duration: 3000
            });
            $scope.showLoader = "";
            ngProgressLite.done();
            $scope.loader.show = false;
            return false;
        } 
        /*-------Income Qual-----*/
        if($scope.incomeTempArr != undefined && $scope.incomeTempArr.length > 1) {
            $scope.incomeTempArr.splice(0, 1);
            incomeQual[0].range_sets = [];
            _.each($scope.incomeTempArr, function(income){
                incomeQual[0].range_sets.push({
                    "from" : parseInt(income.min),
                    "to" : parseInt(income.max),
                    "units": currency_units
                });
            });
            incomeQual[0]["is_default"] = false;
        }else if($scope.houseHoldIncome.min !== '' && $scope.houseHoldIncome.max !== '') {
            $scope.incomeTempArr = [{
                min : parseInt($scope.houseHoldIncome.min),
                max : parseInt($scope.houseHoldIncome.max)
            }];
            incomeQual[0].range_sets = [];
            incomeQual[0].range_sets.push({
                "from" : parseInt($scope.houseHoldIncome.min),
                "to" : parseInt($scope.houseHoldIncome.max),
                "units":currency_units
            });
            incomeQual[0]["is_default"] = false;
        }else{
            var maxVal = 999999;
            // Changing max income range for Japan and Philippines
            if(currency_units == 325){
                maxVal = 100000000;  // 9 digits
            }else if(currency_units == 326){
                maxVal = 10000000;   // 8 digits
            }else if(currency_units == 327 || currency_units == 328 || currency_units == 331 || currency_units == 342 || currency_units == 344 || currency_units == 345 || currency_units == 346 || currency_units == 349 || currency_units == 350 || currency_units == 353 || currency_units == 352){
                maxVal = 9999999;   // 7 digits
            }else if(currency_units == 329 || currency_units == 351){
                maxVal = 99999999;  // 8 digits
            }else if(currency_units == 330 || currency_units == 337 || currency_units == 339){
                maxVal = 999999999; // 9 digits
            }else if(currency_units == 334){
                maxVal = 9999999999;  // 10 digits
            }
            //PD-1540
            $scope.incomeTempArr = [{
                min : $scope.houseHoldIncome.min? $scope.houseHoldIncome.min:0,
                max : maxVal
            }];
            incomeQual[0].range_sets = [];
            incomeQual[0].range_sets.push({
                "from" : $scope.houseHoldIncome.min? $scope.houseHoldIncome.min:0,
                "to" : maxVal,
                "units":currency_units
            });
        }
        /*----Only for Vietnam-----*/
        if($scope.properties.countryCode == 'VN' || $scope.properties.countryCode == 'RU' || $scope.properties.countryCode == 'TH'){
            incomeQual[0].range_sets = [];
        }
        /*----Only for Vietnam-----*/

        /*-------Age Qual-----*/
        if($scope.ageTempArr != undefined && $scope.ageTempArr.length > 1) {
            $scope.ageTempArr.splice(0, 1);
            ageQual[0].range_sets = [];
            _.each($scope.ageTempArr, function(age){
                ageQual[0].range_sets.push({
                    "from" : parseInt(age.min),
                    "to" : parseInt(age.max),
                    "units":age_units.year
                });
            });
        }else if($scope.ageData.min !== '' && $scope.ageData.max !== '') {
            $scope.ageTempArr = [{
                min : parseInt($scope.ageData.min),
                max : parseInt($scope.ageData.max)
            }];
            ageQual[0].range_sets = [];
            ageQual[0].range_sets.push({
                "from" : parseInt($scope.ageData.min),
                "to" : parseInt($scope.ageData.max),
                "units":age_units.year
            });
        }else{
            $scope.ageTempArr = [{
                min : $scope.ageData.min ? $scope.ageData.min:18,
                max : 99
            }];
            ageQual[0].range_sets = [];
            ageQual[0].range_sets.push({
                "from" : $scope.ageData.min ? $scope.ageData.min:18,
                "to" : 99,
                "units":age_units.year
            });
        }
        // For Removing extra hash Keys fields from the Age income Array
        ageQual = angular.copy(ageQual);
        incomeQual = angular.copy(incomeQual);
        //location targeting data
        var statesData = angular.copy($scope.selectedStates);
        var csaData = angular.copy($scope.selectedCSAs);
        var dmaData = angular.copy($scope.selectedDMAs);
        var msaData = angular.copy($scope.selectedMSAs);
        var countyData = angular.copy($scope.selectedCountys);
        var zipCodeData = angular.copy($scope.selectedZipcodes);
        
        /*-----Temporary Done For PL Data-----*/
        var locaArr = [statesData, csaData, dmaData, msaData, countyData];
        _.each(locaArr, function(location){
            if(location.length > 0){
                _.each(location, function(all){
                    if(all.percent){
                        all['percentage'] = all.percent;
                        delete all.percent;
                    }
                });
            }
        });
        /*-----Temporary Done For PL Data-----*/

        // PD-711 Saving Qualifications for locations in Quota Management V2
            genderQual[0].conditions = [];
            _.each($scope.genderInfo, function(gender){
                if(gender.id && gender.selected){
                    genderQual[0].conditions.push({
                        "id":gender.id.toString(),
                        "name":gender.name
                    });
                }
            });
            // Setting is_default for qualification
            var gndrMstrData = _.findWhere(masterData, {"masterKey" : "gender"});
            genderQual[0].is_default = ($scope.gndrQuotaFlag.hasGndrFlag || genderQual[0].conditions.length !== gndrMstrData.data[$scope.properties.countryCode][$scope.properties.languageCode].length)?false:true;
            if(_.contains(config.countryInQuals.employment, $scope.properties.countryCode)){
                empQual[0].conditions = [];
                //PD-961
                var tempEmployQuotaArr = [];
                if (employmentModelLiveEdit.length > 0) {
                    tempEmployQuotaArr = employmentModelLiveEdit;
                }
                else {
                    tempEmployQuotaArr = $scope.employement;
                }
                _.each(tempEmployQuotaArr, function (employement) {
                    if (employement.id && employement.selected) {
                        empQual[0].conditions.push({
                            "id": employement.id.toString(),
                            "name": employement.name
                        });
                    }
                });
                // Setting is_default for qualification
                var empMstrData = _.findWhere(masterData, {"masterKey" : "employments"});
                empQual[0].is_default = ($scope.empQuotaFlag.hasEmpFlag || empQual[0].conditions.length !== empMstrData.data[$scope.properties.countryCode][$scope.properties.languageCode].length)?false:true;
            }
            if(_.contains(config.countryInQuals.children, $scope.properties.countryCode)){
                childQual[0].conditions = [];
                _.each($scope.children, function(children){
                    if(children.id && children.selected){
                        childQual[0].conditions.push({
                            "id":children.id.toString(),
                            "name":children.name
                        });
                    }
                });
                // Setting is_default for qualification
                var chldMstrData = _.findWhere(masterData, {"masterKey" : "children"});
                childQual[0].is_default = ($scope.childQuotaFlag.hasChldFlag || childQual[0].conditions.length !== chldMstrData.data[$scope.properties.countryCode][$scope.properties.languageCode].length)?false:true;
            }
            // Prechecked Data Qualifications will only be filled if the country is US and CA
            
            if(_.contains(config.countryInQuals.race, $scope.properties.countryCode)){
                raceQual[0].conditions = [];
                //PD-961
                var tempRaceQuotaArr = [];
                if(raceModelLiveEdit.length > 0) {
                    tempRaceQuotaArr = raceModelLiveEdit;
                }
                else {
                    tempRaceQuotaArr = $scope.race;
                }
                _.each(tempRaceQuotaArr, function(race){
                    if(race.id && race.selected){
                        raceQual[0].conditions.push({
                            "id":race.id.toString(),
                            "name":race.name
                        });
                    }
                })
                // Setting is_default for qualification
                var raceMstrData = _.findWhere(masterData, {"masterKey" : "race"});
                raceQual[0].is_default = ($scope.raceQuotaFlag.hasRaceFlag || raceQual[0].conditions.length !== raceMstrData.data[$scope.properties.countryCode][$scope.properties.languageCode].length)?false:true;
            }
            if(_.contains(config.countryInQuals.education, $scope.properties.countryCode)){
                eduQual[0].conditions = [];
                var tempEducationQuotaArr = [];
                if(educationModelLiveEdit.length > 0) {
                    tempEducationQuotaArr = educationModelLiveEdit;
                }
                else {
                    tempEducationQuotaArr = $scope.education;
                }
                _.each(tempEducationQuotaArr, function(education){
                    if(education.id && education.selected){
                        eduQual[0].conditions.push({
                            "id":education.id.toString(),
                            "name":education.name
                        });
                    }
                });
                // Setting is_default for qualification
                var eduMstrData = _.findWhere(masterData, {"masterKey" : "educations"});
                eduQual[0].is_default = ($scope.eduQuotaFlag.hasEduFlag || eduQual[0].conditions.length !== eduMstrData.data[$scope.properties.countryCode][$scope.properties.languageCode].length)?false:true;
            }
            if(_.contains(config.countryInQuals.relationship, $scope.properties.countryCode)){
                //PD-961
                relationQual[0].conditions = [];
                var tempRelationQuotaArr = [];
                if(relationModelLiveEdit.length > 0) {
                    tempRelationQuotaArr = relationModelLiveEdit;
                }
                else {
                    tempRelationQuotaArr = $scope.relation;
                }
                _.each(tempRelationQuotaArr, function(relation){
                    if(relation.id && relation.selected){
                        relationQual[0].conditions.push({
                            "id":relation.id.toString(),
                            "name":relation.name
                        });
                    }
                });
                // Setting is_default for qualification
                var rlnMstrData = _.findWhere(masterData, {"masterKey" : "relationships"});
                relationQual[0].is_default = ($scope.rlnQuotaFlag.hasRlnFlag || relationQual[0].conditions.length !== rlnMstrData.data[$scope.properties.countryCode][$scope.properties.languageCode].length)?false:true;
            }
            if($scope.fieldsFlags.bera){
                raceBeraQual[0].conditions = [];
                //PD-1402
                var tempRaceBeraQuotaArr = [];
                if(raceBeraModelLiveEdit.length > 0) {
                    tempRaceBeraQuotaArr = raceBeraModelLiveEdit;
                }
                else {
                    tempRaceBeraQuotaArr = $scope.raceBera;
                }
                _.each(tempRaceBeraQuotaArr, function(raceBera){
                    if(raceBera.id && raceBera.selected){
                        raceBeraQual[0].conditions.push({
                            "id":raceBera.id.toString(),
                            "name":raceBera.name
                        });
                    }
                });
                // Setting is_default for qualification
                var rbMstrData = _.findWhere(masterData, {"masterKey" : "raceBera"});
                raceBeraQual[0].is_default = ($scope.rbQuotaFlag.hasRbFlag || raceBeraQual[0].conditions.length !== rbMstrData.data[$scope.properties.countryCode][$scope.properties.languageCode].length)?false:true;

                hispanicQual[0].conditions = [];
                _.each($scope.hispanic, function(hisOri){
                    if(hisOri.id && hisOri.selected){
                        hispanicQual[0].conditions.push({
                            "id":hisOri.id.toString(),
                            "name":hisOri.name
                        });
                    }
                });
                // Setting is_default for qualification
                var hisOriMstrData = _.findWhere(masterData, {"masterKey" : "hispanicOrigin"});
                hispanicQual[0].is_default = ($scope.hisQuotaFlag.hasHisOriFlag || hispanicQual[0].conditions.length !== hisOriMstrData.data[$scope.properties.countryCode][$scope.properties.languageCode].length)?false:true;
            }
            //PD-1402
            var tempDeviceQuotaArr = [];
            if(deviceModelLiveEdit.length > 0) {
                tempDeviceQuotaArr = deviceModelLiveEdit;
            }else {
                tempDeviceQuotaArr = $scope.deviceInfo;
            }
            //devQual[0].conditions = [];
            _.each(tempDeviceQuotaArr, function(device){
                if(device.id && device.selected){
                    devQual[0].conditions.push({
                        "id":device.id.toString(),
                        "name":device.name
                    });
                }
            });
            // Setting is_default for qualification
            var devMstrData = _.findWhere(masterData, {"masterKey" : "device"});
            devQual[0].is_default = ($scope.dvcQuotaFlag.hasDeviceFlag || devQual[0].conditions.length !== devMstrData.data[$scope.properties.countryCode][$scope.properties.languageCode].length)?false:true;

            statesQual[0].conditions = [];
            _.each(statesData, function(stateCode){
                if(stateCode.id){
                    statesQual[0].conditions.push({
                        "id":stateCode.id.toString(),
                        "name":stateCode.name
                    });
                }
            });
            csaQual[0].conditions = [];
            _.each(csaData, function(csaCode){
                if(csaCode.id){
                    csaQual[0].conditions.push({
                        "id":csaCode.id.toString(),
                        "name":csaCode.name
                    });
                }
            });
            dmaQual[0].conditions = [];
            _.each(dmaData, function(dmaCode){
                if(dmaCode.id){
                    dmaQual[0].conditions.push({
                        "id":dmaCode.id.toString(),
                        "name":dmaCode.name
                    });
                }
            });
            msaQual[0].conditions = [];
            _.each(msaData, function(msaCode){
                if(msaCode.id){
                    msaQual[0].conditions.push({
                        "id":msaCode.id.toString(),
                        "name":msaCode.name
                    });
                }
            });
            countyQual[0].conditions = [];
            _.each(countyData, function(countyCode){
                if(countyCode.id){
                    countyQual[0].conditions.push({
                        "id":countyCode.id.toString(),
                        "name":countyCode.name
                    });
                }
            });
            if($scope.properties.countryCode == 'US' || $scope.properties.countryCode == 'CA' || $scope.properties.countryCode == 'UK'){
                regionQual[0].conditions = [];
                //PD-1402
                var tempRegionQuotaArr = [];
                if(censusRgnModelLiveEdit.length > 0) {
                    tempRegionQuotaArr = censusRgnModelLiveEdit;
                }
                else {
                    tempRegionQuotaArr = $scope.region;
                }
                _.each(tempRegionQuotaArr, function(regionCode){
                    if(regionCode.id && regionCode.selected){
                        regionQual[0].conditions.push({
                            "id":regionCode.id.toString(),
                            "name":regionCode.name
                        });
                    }
                });
            }
            if($scope.properties.countryCode == 'US' || $scope.properties.countryCode == 'CA'){
                divisionQual[0].conditions = [];
                //PD-1402
                var tempDivisionQuotaArr = [];
                if(divisionModelLiveEdit.length > 0) {
                    tempDivisionQuotaArr = divisionModelLiveEdit;
                }
                else {
                    tempDivisionQuotaArr = $scope.division;
                }
                _.each(tempDivisionQuotaArr, function(divisionCode){
                    if(divisionCode.id && divisionCode.selected){
                        divisionQual[0].conditions.push({
                            "id":divisionCode.id.toString(),
                            "name":divisionCode.name
                        });
                    }
                });
            }
            // Grouping all qualifications in a single array
            $scope.properties.qualifications = _.flatten([genderQual, ageQual, incomeQual, raceQual, eduQual, relationQual, empQual, devQual, statesQual, csaQual, dmaQual, msaQual, countyQual, regionQual, divisionQual, raceBeraQual, hispanicQual, childQual], true);
            // Removing qualifications which have no conditions
            $scope.properties.qualifications = _.filter($scope.properties.qualifications, function(qualification){
                if(qualification.conditions){
                    return qualification.conditions.length > 0;
                }
                if(qualification.range_sets){
                    return qualification.range_sets.length > 0;
                }
            });
        // PD-711 Ends

        // PD-335 Both for checking the quotas equals to completes in live survey and adding default quotas
            _.each($scope.sltGender, function(genderQuota){
                if(genderQuota.number && $scope.gndrQuotaFlag.hasGndrFlag){
                    //gndrTotalAllocations = gndrTotalAllocations + genderQuota.number;
                }else if(!$scope.gndrQuotaFlag.hasGndrFlag){
                    // For adding achieved value if the quotas are not added
                    genderQuota.flexible =  true;
                    genderQuota.flexiblePer =  100;
                    genderQuota.number =  parseInt($scope.completesNeeded);
                    genderQuota.minimum =  0;
                    genderQuota.maximum =  parseInt($scope.completesNeeded);
                    genderQuota.percentage =  100;
                    genderQuota.hasValidQuotas =  false;
                }
            });
            _.each($scope.sltRaceBera, function(rbQuota){
                if(rbQuota.number && $scope.rbQuotaFlag.hasRbFlag){
                    //gndrTotalAllocations = gndrTotalAllocations + genderQuota.number;
                }else if(!$scope.rbQuotaFlag.hasRbFlag){
                    // For adding achieved value if the quotas are not added
                    rbQuota.flexible =  true;
                    rbQuota.flexiblePer =  100;
                    rbQuota.number =  parseInt($scope.completesNeeded);
                    rbQuota.minimum =  0;
                    rbQuota.maximum =  parseInt($scope.completesNeeded);
                    rbQuota.percentage =  100;
                    rbQuota.hasValidQuotas =  false;
                }
            });
            _.each($scope.hispanicOrigin, function(hispanicQuota){
                if(hispanicQuota.number && $scope.hisQuotaFlag.hasHisOriFlag){
                    //gndrTotalAllocations = gndrTotalAllocations + genderQuota.number;
                }else if(!$scope.hisQuotaFlag.hasHisOriFlag){
                    // For adding achieved value if the quotas are not added
                    hispanicQuota.flexible =  true;
                    hispanicQuota.flexiblePer =  100;
                    hispanicQuota.number =  parseInt($scope.completesNeeded);
                    hispanicQuota.minimum =  0;
                    hispanicQuota.maximum =  parseInt($scope.completesNeeded);
                    hispanicQuota.percentage =  100;
                    hispanicQuota.hasValidQuotas =  false;
                }
            });
            _.each($scope.ageTempArr, function(age){
                if(age.number && $scope.ageQuotaFlag.hasAgeFlag){
                    //ageTotalAllocations = ageTotalAllocations + age.number;
                }else if(!$scope.ageQuotaFlag.hasAgeFlag){
                    // For adding achieved value if the quotas are not added
                    age.max =  parseInt($scope.ageTempArr[0].max);
                    age.min =  parseInt($scope.ageTempArr[0].min);
                    age.per =  100;
                    age.flexible =  true;
                    age.number =  parseInt($scope.completesNeeded);
                    age.minimum =  0;
                    age.maximum =  parseInt($scope.completesNeeded);
                    age.totalRem =  0;
                    age.flexiblePer =  100;
                    age.percentage =  100;
                    age.hasValidQuotas =  false;
                }
            });
            _.each($scope.incomeTempArr, function(income){
                if(income.number && $scope.incomeQuotaFlag.hasIncomeFlag){
                    //incomeTotalAllocations = incomeTotalAllocations + income.number;
                }else if(!$scope.incomeQuotaFlag.hasIncomeFlag){
                    // For adding achieved value if the quotas are not added
                    income.max =  parseInt($scope.incomeTempArr[0].max);
                    income.min =  parseInt($scope.incomeTempArr[0].min);
                    income.per =  100;
                    income.flexible =  true;
                    income.number =  parseInt($scope.completesNeeded);
                    income.minimum =  0;
                    income.maximum =  parseInt($scope.completesNeeded);
                    income.totalRem =  0;
                    income.flexiblePer =  100;
                    income.percentage =  100;
                    income.hasValidQuotas =  false;
                }
            });
            _.each($scope.sltRace, function(race, index){
                if(race.number && $scope.raceQuotaFlag.hasRaceFlag){
                    //raceTotalAllocations = raceTotalAllocations + race.number;
                }else if(!$scope.raceQuotaFlag.hasRaceFlag){
                    // For adding achieved value if the quotas are not added
                    race.flexible =  true;
                    race.flexiblePer =  100;
                    race.number =  parseInt($scope.completesNeeded);
                    race.minimum =  0;
                    race.maximum =  parseInt($scope.completesNeeded);
                    race.percentage =  100;
                    race.hasValidQuotas =  false;
                }
            });
            _.each($scope.sltRelation, function(rln){
                if(rln.number && $scope.rlnQuotaFlag.hasRlnFlag){
                    //rlnTotalAllocations = rlnTotalAllocations + rln.number;
                }else if(!$scope.rlnQuotaFlag.hasRlnFlag){
                    // For adding achieved value if the quotas are not added
                    rln.flexible =  true;
                    rln.flexiblePer =  100;
                    rln.number =  parseInt($scope.completesNeeded);
                    rln.minimum =  0;
                    rln.maximum =  parseInt($scope.completesNeeded);
                    rln.percentage =  100;
                    rln.hasValidQuotas =  false;
                }
            });
            _.each($scope.sltEmployment, function(emp){
                if(emp.number && $scope.empQuotaFlag.hasEmpFlag){
                    //empTotalAllocations = empTotalAllocations + emp.number;
                }else if(!$scope.empQuotaFlag.hasEmpFlag){
                    // For adding achieved value if the quotas are not added
                    emp.flexible =  true;
                    emp.flexiblePer =  100;
                    emp.number =  parseInt($scope.completesNeeded);
                    emp.minimum =  0;
                    emp.maximum =  parseInt($scope.completesNeeded);
                    emp.percentage =  100;
                    emp.hasValidQuotas =  false;
                }
            });
            _.each($scope.sltEducation, function(edu){
                if(edu.number && $scope.eduQuotaFlag.hasEduFlag){
                    //eduTotalAllocations = eduTotalAllocations + edu.number;
                }else if(!$scope.eduQuotaFlag.hasEduFlag){
                    // For adding achieved value if the quotas are not added
                    edu.flexible =  true;
                    edu.flexiblePer =  100;
                    edu.number =  parseInt($scope.completesNeeded);
                    edu.minimum =  0;
                    edu.maximum =  parseInt($scope.completesNeeded);
                    edu.percentage =  100;
                    edu.hasValidQuotas =  false;
                }
            });
            _.each($scope.sltDevice, function(dev){
                if(dev.number && $scope.dvcQuotaFlag.hasDeviceFlag){
                    //devTotalAllocations = devTotalAllocations + dev.number;
                }else if(!$scope.dvcQuotaFlag.hasDeviceFlag){
                    // For adding achieved value if the quotas are not added
                    dev.flexible =  true;
                    dev.flexiblePer =  100;
                    dev.number =  parseInt($scope.completesNeeded);
                    dev.minimum =  0;
                    dev.maximum =  parseInt($scope.completesNeeded);
                    dev.percentage =  100;
                    dev.hasValidQuotas =  false;
                }
            });
        // PD-335 end

        var tmpCpi = parseFloat($scope.cpi).toFixed(2);
        $scope.properties.numberOfCompletes = parseInt($scope.properties.numberOfCompletes);
        $scope.properties.currencyFx = $scope.currencyFx;
        $scope.properties.lengthOfSurvey = parseInt($scope.properties.lengthOfSurvey);
        $scope.properties.cpi = Math.round(tmpCpi *100 ) / 100;
        //Fix CPI on Live clone
        if($rootScope.clone && $scope.checkLive_pus_Clone) {
            $rootScope.liveCloneCPI = Math.round(tmpCpi *100 ) / 100;
        }
        $scope.properties.supplier_user_id = userData.id;
        //now getting zipcodes from uploaded file on server end
        //no need to send from 
        //$scope.properties.location = {zipcode: {values: zipcodesDataArr}};
        $scope.properties.incidence = parseInt($scope.incidence);
        if($scope.fieldsFlags.hhi && $scope.incomeQuotaFlag.hasIncomeFlag) {
            $scope.allProperties.houseHoldIncome = $scope.incomeTempArr;
        } else {
            delete $scope.allProperties.houseHoldIncome;
        }
        if($scope.fieldsFlags.age && $scope.ageQuotaFlag.hasAgeFlag) {
            $scope.allProperties.age = $scope.ageTempArr;
        } else {
            delete $scope.allProperties.age;
        }
        if($scope.fieldsFlags.gender) {
            $scope.allProperties.gender = $scope.sltGender;
        } else {
            delete $scope.allProperties.gender;
        }
        if($scope.fieldsFlags.device) {
            //PD-1402
            $scope.allProperties.device = $scope.sltDevice; 
            excludeGroupingFromSlt($scope.allProperties.device);
        } else {
            delete $scope.allProperties.device;
        }
        if($scope.fieldsFlags.race){
            //PD-961
            $scope.allProperties.race = $scope.sltRace; 
            excludeGroupingFromSlt($scope.allProperties.race);
        } else {
            delete $scope.allProperties.race;
        }
        if($scope.fieldsFlags.education) {
            //PD-961
            $scope.allProperties.educations = $scope.sltEducation;
            excludeGroupingFromSlt($scope.allProperties.educations);
        } else {
            delete $scope.allProperties.educations;
        }
        if($scope.fieldsFlags.employment) {
            //PD-961
            $scope.allProperties.employments = $scope.sltEmployment;
            excludeGroupingFromSlt($scope.allProperties.employments);
        } else {
            delete $scope.allProperties.employments;
        }
        if($scope.fieldsFlags.relationship) {
            //PD-961
            $scope.allProperties.relationships = $scope.sltRelation;
            excludeGroupingFromSlt($scope.allProperties.relationships);
        } else {
            delete $scope.allProperties.relationships;
        }

        if($scope.fieldsFlags.children){
            $scope.allProperties.children = $scope.chldTempArr;
        } else {
            delete $scope.allProperties.children;
        }

        
        if($scope.fieldsFlags.location) {
            //PD-1402
            $scope.allProperties.regions = $scope.sltRegion;
            excludeGroupingFromSlt($scope.allProperties.regions);
        } else {
            delete $scope.allProperties.regions;
        }
        if($scope.fieldsFlags.location) {
            //PD-1402
            $scope.allProperties.divisions = $scope.sltDivision;
            excludeGroupingFromSlt($scope.allProperties.divisions);
        } else {
            delete $scope.allProperties.divisions;
        }
        if($scope.fieldsFlags.location) {
            //PD-1402
            if($scope.isGrouped('states')) {
                $scope.allProperties.states = statesData;
                excludeGroupingFromSlt($scope.allProperties.states);
            }
            else {
                $scope.allProperties.states = statesData;
            }
        } else {
            delete $scope.allProperties.states;
        }
        if($scope.fieldsFlags.location) {
            //PD-1402
            if($scope.isGrouped('dma')) {
                $scope.allProperties.dma = dmaData;
                excludeGroupingFromSlt($scope.allProperties.dma);
            }
            else {
                $scope.allProperties.dma = dmaData;
            }
            
        } else {
            delete $scope.allProperties.dma;
        }
        if($scope.fieldsFlags.location) {

            //PD-1402
            if($scope.isGrouped('csa')) {
                $scope.allProperties.csa = csaData;
                excludeGroupingFromSlt($scope.allProperties.csa);
            }
            else {
                $scope.allProperties.csa = csaData;
            }
            
        } else {
            delete $scope.allProperties.csa;
        }
        if($scope.fieldsFlags.location) {
            //PD-1402
            if($scope.isGrouped('msa')) {
                $scope.allProperties.msa = msaData;
                excludeGroupingFromSlt($scope.allProperties.msa);
            }
            else {
               $scope.allProperties.msa = msaData;
            }
            
        } else {
            delete $scope.allProperties.msa;
        }
        if($scope.fieldsFlags.location) {
            //PD-1402
            if($scope.isGrouped('county')) {
                $scope.allProperties.county = countyData;
                 excludeGroupingFromSlt($scope.allProperties.county);
            }
            else {
               $scope.allProperties.county = countyData;
            }
            
        } else {
            delete $scope.allProperties.county;
        }
        //Added for Bera
        if($scope.fieldsFlags.bera){
            /***********************************/
            //PD-1402
            $scope.allProperties.raceBera = $scope.sltRaceBera;
            excludeGroupingFromSlt($scope.allProperties.raceBera);
            /***********************************/
            $scope.allProperties.hispanicOrigin = $scope.hispanicOrigin;
        }else{
            delete $scope.allProperties.raceBera;
            delete $scope.allProperties.hispanicOrigin;
        }
        //Old Quotas payload will be intact until Quota V2 works fine
        $scope.properties.target = $scope.allProperties;   //Old Quotas
        if($scope.fieldsFlags.location) {
               $scope.allProperties.zipcodes = zipCodeData;
        } else {
            delete $scope.allProperties.zipcodes;
        }

        /*------Pushing nested Quotas in Properties------*/
        _.each(nestedTempQuotaData, function(nestedItem){
            _.each(nestedItem.criteria, function(singleCriteria){
                if(singleCriteria.qualification_code == config.zipcodesQual.id){
                    singleCriteria.conditions = [];
                }
            });
            $scope.properties.quotas.push(nestedItem);
        });
        /*---------Pushing Advance Targeting Data in Properties-------*/
        $scope.properties.advance_target = new Array();
        _.each(advanceData, function(advanceItem){
            _.each(advanceItem.answers[advanceItem.qualification_id[0]].answer_data, function(option){
                // Having problem in saving this key in db
                delete option.$order;
            });
            $scope.properties.advance_target.push(advanceItem);
        });
        // Advance Qualifications
        _.each(advanceQual, function(qual){
            $scope.properties.qualifications.push(qual);
        });
        /*---------Pushing Advance Targeting Data in Propertiers Ends-------*/


        //PD-711 Sending Quota Data as Version 2 Structure
        _.each(Object.keys($scope.allProperties), function(quotakey){
            // Remove Quotas which are AutoNested
            if(_.indexOf($scope.nestingQuotasArrFinal, quotakey) == -1){
                var qual_id = new Number;
                //PD-711 (Quota V2) Importing Qualification Details From masterData and saving in payload (Quota V2)
                _.each(masterData, function(master){
                    if(master.masterKey == quotakey){
                        qual_id = master.id;
                        qual_name = master.masterKey;
                    }
                });
                //PD-711 (Quota V2) Creating Quota V2 payload Structure
                _.each($scope.allProperties[quotakey], function(quotaelm){
                    // Also removing default quotas sending for Quota V1
                    // For Age and Income (range sets).
                    if(_.findIndex(quotaelm, {'qual_id':config.childMasterQual.id}) != -1 && $scope.childQuotaFlag.hasChldFlag){
                        _.each(quotaelm, function(singleChildRow){
                            // Add census Repo field if it not exists
                                var quotaQuantities = {
                                    "minimum":singleChildRow.minimum,
                                    "maximum":singleChildRow.maximum,
                                    "flexibility":singleChildRow.flexiblePer,
                                    "isFlexible":singleChildRow.flexible,
                                    "number":singleChildRow.number,
                                    "percentage":singleChildRow.percentage,
                                    "hasValidQuotas": true,
                                    "achieved": 0,
                                    "remaining":singleChildRow.maximum,
                                    "currently_open":singleChildRow.maximum,
                                    "sup_currently_open":singleChildRow.maximum,
                                    "current_target": singleChildRow.maximum
                                }
                                if(_.has(quotaelm, "hasCensusRepoQuota")) {
                                   quotaQuantities.hasCensusRepoQuota = quotaelm.hasCensusRepoQuota;
                                }
                            // Add census Repo field if it not exists ends
                            if(singleChildRow.id == 111 && singleChildRow.minimum && singleChildRow.maximum){
                                $scope.properties.quotas.push({
                                    "type": 0,
                                    "isActive":true,
                                    "quotaCategory":"layered",
                                    "locked": false,
                                    "criteria":[
                                        {
                                            "qualification_code":qual_id,
                                            "qualification_name":qual_name,
                                            "q_type":"normal",
                                            "layered_percent":parseInt(singleChildRow.percentage),
                                            "conditions": [{
                                                "id":singleChildRow.id.toString(),
                                                "name": singleChildRow.name
                                            }]
                                        }
                                    ],
                                    "quantities": quotaQuantities
                                });
                            }else if(singleChildRow.id == 112 && singleChildRow.minimum && singleChildRow.maximum){
                                var gender_conditions = new Array();
                                if(singleChildRow.gender == 'both'){
                                    gender_conditions = [{
                                            "id": "111",
                                            "name": "Boy"
                                        },
                                        {
                                            "id": "112",
                                            "name": "Girl"
                                    }];
                                }else{
                                    gender_conditions = [{
                                        "id":singleChildRow.gender.toString(),
                                        "name": singleChildRow.gender == "111" ? "Boy":"Girl"
                                    }]
                                }
                                $scope.properties.quotas.push({
                                    "type": 0,
                                    "isActive":true,
                                    "quotaCategory":"layered",
                                    "locked": false,
                                    "criteria":[
                                        {
                                            "qualification_code":qual_id,
                                            "qualification_name":qual_name,
                                            "q_type":"normal",
                                            "layered_percent":parseInt(singleChildRow.percentage),
                                            "conditions": [{
                                                "id":singleChildRow.id.toString(),
                                                "name": singleChildRow.name
                                            }]
                                        },
                                        {
                                            "qualification_code": parseInt(config.childMasterQual.gender),
                                            "qualification_name":(_.findWhere(masterData, {"id":parseInt(config.childMasterQual.gender)})).masterKey,
                                            "q_type":"normal",
                                            "layered_percent":parseInt(singleChildRow.percentage),
                                            "conditions": gender_conditions
                                        },
                                        {
                                            "qualification_code":parseInt(config.childMasterQual.age),
                                            "qualification_name":(_.findWhere(masterData, {"id":parseInt(config.childMasterQual.age)})).masterKey,
                                            "q_type":"range_sets",
                                            "layered_percent":parseInt(singleChildRow.percentage),
                                            "range_sets": [{"from":singleChildRow.min, "to":singleChildRow.max, "units": (qual_name == 'age'? age_units.year : (qual_name == 'children') ? $scope.childAgeUnit.value : currency_units)}]
                                        }

                                    ],
                                    "quantities": quotaQuantities
                                });
                            }
                        });
                    }else if(quotaelm.hasOwnProperty('min') && quotaelm.hasOwnProperty('max') && quotaelm.percentage && quotaelm.hasValidQuotas){
                        var quotaQuantities = {
                            "minimum":quotaelm.minimum,
                            "maximum":quotaelm.maximum,
                            "flexibility":quotaelm.flexiblePer,
                            "isFlexible":quotaelm.flexible,
                            "number":quotaelm.number,
                            "percentage":quotaelm.percentage,
                            "hasValidQuotas": true,
                            "achieved": 0,
                            "remaining":quotaelm.maximum,
                            "currently_open":quotaelm.maximum,
                            "sup_currently_open":quotaelm.maximum,
                            "current_target": quotaelm.maximum
                        }
                        if(_.has(quotaelm, "hasCensusRepoQuota")) {
                           quotaQuantities.hasCensusRepoQuota = quotaelm.hasCensusRepoQuota;
                        }
                        $scope.properties.quotas.push({
                            "type": 0,
                            "isActive":true,
                            "quotaCategory":"layered",
                            "locked": false,
                            "criteria":[
                                {
                                    "qualification_code":qual_id,
                                    "qualification_name":qual_name,
                                    "q_type":"range_sets",
                                    "layered_percent":parseInt(quotaelm.percentage),
                                    "range_sets": [{"from":quotaelm.min, "to":quotaelm.max, "units": (qual_name == 'age'? age_units.year : (qual_name == 'children') ? $scope.childAgeUnit.value : currency_units)}]
                                }
                            ],
                            "quantities":quotaQuantities
                        });
                    // For Normal Quotas (Without Ranges)
                    }else if(!quotaelm.hasOwnProperty('min') && !quotaelm.hasOwnProperty('max') && quotaelm.hasValidQuotas && !quotaelm.hasOwnProperty("condditionGroup") && quotaelm.percentage){
                        var quotaQuantities = {
                            "minimum":quotaelm.minimum,
                            "maximum":quotaelm.maximum,
                            "flexibility":quotaelm.flexiblePer,
                            "isFlexible":quotaelm.flexible,
                            "number":quotaelm.number,
                            "percentage":quotaelm.percentage,
                            "hasValidQuotas": true,
                            "achieved": 0,
                            "remaining":quotaelm.maximum,
                            "currently_open":quotaelm.maximum,
                            "sup_currently_open":quotaelm.maximum,
                            "current_target": quotaelm.maximum
                        }
                        if(_.has(quotaelm, "hasCensusRepoQuota")) {
                           quotaQuantities.hasCensusRepoQuota = quotaelm.hasCensusRepoQuota;
                        }
                        if(quotakey == "zipcodes") {
                            var conditionArr = [];
                            
                            var quotaCategory = "grouped"
                            if(_.has(quotaelm, "buyer_ziplist_ref")) {
                                var criteriaObjet = [
                                    {
                                        "qualification_code":qual_id,
                                        "qualification_name":qual_name,
                                        "q_type":"normal",
                                        "layered_percent":parseInt(quotaelm.percentage),
                                        "conditions": conditionArr,
                                        "buyer_ziplist_ref": quotaelm.buyer_ziplist_ref
                                    }
                                ]
                                if($rootScope.clone) {
                                    criteriaObjet[0]["group_qtaNm"] = quotaelm.name;
                                }
                                if(_.has(quotaelm, "zipWithNoQuota") && quotaelm.zipWithNoQuota) {
                                    criteriaObjet[0]["group_qtaNm"] = quotaelm.name;
                                }
                            }
                            else {
                               var criteriaObjet = [
                                    {
                                        "qualification_code":qual_id,
                                        "qualification_name":qual_name,
                                        "q_type":"normal",
                                        "layered_percent":parseInt(quotaelm.percentage),
                                        "conditions": conditionArr,
                                        "group_qtaNm": quotaelm.name
                                    }
                                ] 
                            }
                        }
                        else {
                            var conditionArr = [{
                                "id":quotaelm.id.toString(),
                                "name": quotaelm.name
                            }]
                            var quotaCategory = "layered"
                            var criteriaObjet = [
                                {
                                    "qualification_code":qual_id,
                                    "qualification_name":qual_name,
                                    "q_type":"normal",
                                    "layered_percent":parseInt(quotaelm.percentage),
                                    "conditions": conditionArr
                                }
                            ] 
                        }
                        
                        $scope.properties.quotas.push({
                            "type": 0,
                            "isActive":true,
                            "quotaCategory":quotaCategory,
                            "locked": false,
                            "criteria":criteriaObjet,
                            "quantities":quotaQuantities
                        });
                    }
                });
                // Grouped Quota Payload for Race, Employment, Education, Relation PD-961
                if((quotakey == 'race' || quotakey == 'employments' || quotakey == 'educations' || quotakey == 'relationships' || quotakey == 'raceBera' || quotakey == 'device' || quotakey == 'regions' || quotakey == 'divisions' || quotakey == 'states' || quotakey == 'dma' || quotakey == 'csa' || quotakey == 'msa' || quotakey == 'county') && $scope.isGrouped(quotakey)){
            
                    //console.log('\n\n\nquotakey ',JSON.stringify($scope.allProperties[quotakey]), quotakey);
                    if(quotakey == 'race'){
                        if($scope.newraceModal.length > 0) {
                            var findGroupObjects = _.filter($scope.newraceModal, function(conditionTrue){ return (conditionTrue.condditionGroup == true && (conditionTrue.number != "" || conditionTrue.number != 0)); });
                            if(findGroupObjects.length > 0) {
                               _.each(findGroupObjects, function(conditionMatch) {
                                    var groupPropetiesObject = setConditionGroupedPropes(conditionMatch, qual_id ,qual_name, $scope.allProperties[quotakey][0], quotakey, $scope.race);
                                    $scope.properties.quotas.push(groupPropetiesObject);
                                })

                            }
                        }
                    }else if(quotakey == 'relationships'){
                        if($scope.newrelationModal.length > 0) {
                            var findGroupObjects = _.filter($scope.newrelationModal, function(conditionTrue){ return (conditionTrue.condditionGroup == true && (conditionTrue.number != "" || conditionTrue.number != 0)); });
                            if(findGroupObjects) {
                               _.each(findGroupObjects, function(conditionMatch) {
                                    var groupPropetiesObject = setConditionGroupedPropes(conditionMatch, qual_id ,qual_name, $scope.allProperties[quotakey][0], quotakey, $scope.relation);
                                    $scope.properties.quotas.push(groupPropetiesObject);
                                })

                            }
                        }
                    }else if(quotakey == 'employments'){
                        if($scope.groupingemploymentModal.length > 0) {
                             var findGroupObjects = _.filter($scope.groupingemploymentModal, function(conditionTrue){ return (conditionTrue.condditionGroup == true && (conditionTrue.number != "" || conditionTrue.number != 0)); });
                            if(findGroupObjects) {
                               _.each(findGroupObjects, function(conditionMatch) {
                                    var groupPropetiesObject = setConditionGroupedPropes(conditionMatch, qual_id ,qual_name, $scope.allProperties[quotakey][0], quotakey, $scope.employement);
                                    $scope.properties.quotas.push(groupPropetiesObject);
                                })

                            }
                        }
                    }else if(quotakey == 'educations'){
                        if($scope.groupingeducationModal.length > 0) {
                            var findGroupObjects = _.filter($scope.groupingeducationModal, function(conditionTrue){ return (conditionTrue.condditionGroup == true && (conditionTrue.number != "" || conditionTrue.number != 0)); });
                            if(findGroupObjects) {
                               _.each(findGroupObjects, function(conditionMatch) {
                                    var groupPropetiesObject = setConditionGroupedPropes(conditionMatch, qual_id ,qual_name, $scope.allProperties[quotakey][0], quotakey, $scope.education);
                                    $scope.properties.quotas.push(groupPropetiesObject);
                                })

                            }
                        }
                    }
                    else if(quotakey == 'raceBera') {
                       if($scope.groupingRaceBeraModel.length > 0) {
                            var findGroupObjects = _.filter($scope.groupingRaceBeraModel, function(conditionTrue){ return (conditionTrue.condditionGroup == true && (conditionTrue.number != "" || conditionTrue.number != 0)); });
                            if(findGroupObjects) {
                               _.each(findGroupObjects, function(conditionMatch) {
                                    var groupPropetiesObject = setConditionGroupedPropes(conditionMatch, qual_id ,qual_name, $scope.allProperties[quotakey][0], quotakey, $scope.raceBera);
                                    $scope.properties.quotas.push(groupPropetiesObject);
                                })

                            }
                        } 
                    }
                    else if(quotakey == 'device') {
                     if($scope.groupingDeviceModel.length > 0) {
                        var findGroupObjects = _.filter($scope.groupingDeviceModel, function(conditionTrue){ return (conditionTrue.condditionGroup == true && (conditionTrue.number != "" || conditionTrue.number != 0)); });
                        if(findGroupObjects) {
                           _.each(findGroupObjects, function(conditionMatch) {
                                var groupPropetiesObject = setConditionGroupedPropes(conditionMatch, qual_id ,qual_name, $scope.allProperties[quotakey][0], quotakey, $scope.deviceInfo);
                                $scope.properties.quotas.push(groupPropetiesObject);
                            })

                        }
                    }
                   } 
                    else if(quotakey == 'regions') {
                        if($scope.groupingCensusRgnModel.length > 0) {
                            var findGroupObjects = _.filter($scope.groupingCensusRgnModel, function(conditionTrue){ return (conditionTrue.condditionGroup == true && (conditionTrue.number != "" || conditionTrue.number != 0)); });
                            if(findGroupObjects) {
                               _.each(findGroupObjects, function(conditionMatch) {
                                    var groupPropetiesObject = setConditionGroupedPropes(conditionMatch, qual_id ,qual_name, $scope.allProperties[quotakey][0], quotakey, $scope.region);
                                    $scope.properties.quotas.push(groupPropetiesObject);
                                })

                            }
                        }
                    }
                    else if(quotakey == 'divisions') {
                        if($scope.groupingDivisionModel.length > 0) {
                            var findGroupObjects = _.filter($scope.groupingDivisionModel, function(conditionTrue){ return (conditionTrue.condditionGroup == true && (conditionTrue.number != "" || conditionTrue.number != 0)); });
                            if(findGroupObjects) {
                               _.each(findGroupObjects, function(conditionMatch) {
                                    var groupPropetiesObject = setConditionGroupedPropes(conditionMatch, qual_id ,qual_name, $scope.allProperties[quotakey][0], quotakey, $scope.division);
                                    $scope.properties.quotas.push(groupPropetiesObject);
                                })

                            }
                        }
                    }
                    else if(quotakey == 'states') {
                        if($scope.groupingStateModel.length > 0) {
                            var findGroupObjects = _.filter($scope.groupingStateModel, function(conditionTrue){ return (conditionTrue.condditionGroup == true && (conditionTrue.number != "" || conditionTrue.number != 0)); });
                            if(findGroupObjects) {
                               _.each(findGroupObjects, function(conditionMatch) {
                                    var groupPropetiesObject = setConditionGroupedPropes(conditionMatch, qual_id ,qual_name, $scope.allProperties[quotakey][0], quotakey, $scope.selectedStates);
                                    $scope.properties.quotas.push(groupPropetiesObject);
                                })

                            }
                        }
                    }
                    else if(quotakey == 'csa') {
                        if($scope.groupingCsaModel.length > 0) {
                            var findGroupObjects = _.filter($scope.groupingCsaModel, function(conditionTrue){ return (conditionTrue.condditionGroup == true && (conditionTrue.number != "" || conditionTrue.number != 0)); });
                            if(findGroupObjects) {
                               _.each(findGroupObjects, function(conditionMatch) {
                                    var groupPropetiesObject = setConditionGroupedPropes(conditionMatch, qual_id ,qual_name, $scope.allProperties[quotakey][0], quotakey, $scope.selectedCSAs);
                                    $scope.properties.quotas.push(groupPropetiesObject);
                                })

                            }
                        }
                    }
                    else if(quotakey == 'dma') {
                        if($scope.groupingDmaModel.length > 0) {
                            var findGroupObjects = _.filter($scope.groupingDmaModel, function(conditionTrue){ return (conditionTrue.condditionGroup == true && (conditionTrue.number != "" || conditionTrue.number != 0)); });
                            if(findGroupObjects) {
                               _.each(findGroupObjects, function(conditionMatch) {
                                    var groupPropetiesObject = setConditionGroupedPropes(conditionMatch, qual_id ,qual_name, $scope.allProperties[quotakey][0], quotakey, $scope.selectedDMAs);
                                    $scope.properties.quotas.push(groupPropetiesObject);
                                })

                            }
                        }
                    }
                    else if(quotakey == 'msa') {
                        if($scope.groupingMsaModel.length > 0) {
                            var findGroupObjects = _.filter($scope.groupingMsaModel, function(conditionTrue){ return (conditionTrue.condditionGroup == true && (conditionTrue.number != "" || conditionTrue.number != 0)); });
                            if(findGroupObjects) {
                               _.each(findGroupObjects, function(conditionMatch) {
                                    var groupPropetiesObject = setConditionGroupedPropes(conditionMatch, qual_id ,qual_name, $scope.allProperties[quotakey][0], quotakey, $scope.selectedMSAs);
                                    $scope.properties.quotas.push(groupPropetiesObject);
                                })

                            }
                        }
                    }
                    else {
                        if(quotakey == 'county') {
                           if($scope.groupingCountyModel.length > 0) {
                                var findGroupObjects = _.filter($scope.groupingCountyModel, function(conditionTrue){ return (conditionTrue.condditionGroup == true && (conditionTrue.number != "" || conditionTrue.number != 0)); });
                                if(findGroupObjects) {
                                   _.each(findGroupObjects, function(conditionMatch) {
                                        var groupPropetiesObject = setConditionGroupedPropes(conditionMatch, qual_id ,qual_name, $scope.allProperties[quotakey][0], quotakey, $scope.selectedCountys);
                                        $scope.properties.quotas.push(groupPropetiesObject);
                                    })

                                }
                            } 
                        }
                    }
                }
            }else{
                console.log(quotakey+' Quotas not added because of autoNesting');
            }
        });
        // Insert Advance Quotas
        _.each(advQuota, function(singleQuota){
            console.log('\n\nsingleQuota.criteria[0].qualification_name ',singleQuota.criteria[0].qualification_name);
            var existInNested = _.indexOf($scope.nestingQuotasArrFinal, singleQuota.criteria[0].qualification_name);
            if(existInNested == -1){
                $scope.properties.quotas.push(singleQuota);
            }else{
                console.log(' deleting ');
                $scope.delAdvQuota(singleQuota.criteria[0].qualification_code, $scope.tempAdvArray);
            }
            // console.log('existInNested ',existInNested);
            // console.log('$scope.nestingQuotasArrFinal ',JSON.stringify($scope.nestingQuotasArrFinal));
            // console.log('singleQuota ',JSON.stringify(singleQuota));
            // $scope.properties.quotas.push(singleQuota);
        });
        // If there is no quotas defined we send default quota for Age
        if($scope.properties.quotas.length == 0){
            var ageRange = new Object();
            // If user defines age qualification then default quota age will be same
            if($scope.ageData.min && $scope.ageData.max){
                ageRange = {"from":parseInt($scope.ageData.min), "to":parseInt($scope.ageData.max), "units":age_units.year}
            }else{
                ageRange = {"from":$scope.ageData.min?$scope.ageData.min:18, "to":99, "units":age_units.year}
            }
            $scope.properties.quotas.push({
                "type": 0,
                "isActive":true,
                "quotaCategory":"default",
                "locked": false,
                "criteria":[
                    {
                        "qualification_code":212,
                        "qualification_name":"age",
                        "q_type":"range_sets",
                        "layered_percent":100,
                        "range_sets": [ageRange]
                    }
                ],
                "quantities":{
                    "minimum":$scope.completesNeeded,
                    "maximum":$scope.completesNeeded,
                    "flexibility":0,
                    "isFlexible":false,
                    "number":$scope.completesNeeded,
                    "percentage":100,
                    "hasValidQuotas": true,
                    "achieved": 0,
                    "remaining":$scope.completesNeeded,
                    "currently_open":$scope.completesNeeded,
                    "sup_currently_open":$scope.completesNeeded,
                    "current_target": $scope.completesNeeded
                }
            });
        }
        // PD-711 ends
        $scope.properties.company = userData.cmp;
        $scope.properties.zipcodeFilePath = zipcodeFilePath;
        //send selected location name as key in request PD-321
        $scope.properties.locationKey = $scope.locationData.type;

        $scope.properties.locale = {
            'countryCode' :$scope.properties.countryCode,
            'countryName' :$scope.properties.countryName,
            'languageCode' :$scope.properties.languageCode,
            'languageName' :$scope.properties.languageName,
            'languageTranslate' :$scope.properties.languageTranslate
        }
        
        // Self Correction that if a qualification is nested then it should also be present in qualification
        _.each(nestedTempQuotaData, function(nestedQuota){
            //console.log('singleQuota Detail '+JSON.stringify(nestedQuota));
            _.each(nestedQuota.criteria, function(criteria){
                if(criteria.q_type == 'normal'){
                    var matchedArr = _.findWhere($scope.properties.qualifications, {"qualification_code":criteria.qualification_code});
                    if(matchedArr && !(_.find(matchedArr.conditions, criteria.conditions[0]))){
                        var index = _.indexOf($scope.properties.qualifications, matchedArr);
                        $scope.properties.qualifications[index].conditions.push(criteria.conditions[0]);
                        
                    }
                }
            });
        });
        // For V1, we need to send the qualifications for Income and Age for which the quota array is removed
        delete $scope.properties.target.children; // Do not save children in V1
        //Commented code for Do not save Income & Age in V1

        /*For clearing popup fields
        $scope.clearFields();*/
        console.log('$scope.properties.quotas ',JSON.stringify($scope.properties.quotas));
        if(!$stateParams.key) {
            //PD-1003
            var launchSurveyPropsArr = ["IsURLTransform", "buyerMsg", "catExcl", "fldOverTime", "launchPercentile", "launchQuantity", "liveUrl", "maxInPrgs", "maxInPrgsNo", "softLaunch", "surveyClient", "survey_external_id", "survey_grouping", "survey_po", "teamMember", "testUrl", "sftLaunch_bss_start"];
            if(msg == 'save') {
                _.each(launchSurveyPropsArr, function(surveyProps) {
                    if(_.has(saveAllThreePageData[0], surveyProps)) {
                        if(surveyProps == "teamMember" && saveAllThreePageData[0][surveyProps] == null) {
                            saveAllThreePageData[0][surveyProps] = "";
                        }
                        $scope.properties[surveyProps] = saveAllThreePageData[0][surveyProps];
                    }
                });
            }
            
            createSurvey.saveSurveyData($scope.properties).success(function(data) {
                // Clearing the quotas and qualifications on save
                $scope.properties.quotas = [];
                $scope.properties.qualifications = [];
                ngProgressLite.done();
                $scope.showLoader = "";
                if (msg == 'save' || msg == 'saveAndNew') {
                    notify({
                        message: 'Survey Saved',
                        classes: 'alert-success',
                        duration: 3000
                    });
                    if(msg == 'saveAndNew'){
                        $rootScope.clone = false;
                        $state.go('dynstate', {id: 'CreateSurveys'}, {reload:true});   /*PD-709*/
                    }else{
                        getSurveyDetailsForUpdate(data.survey.id);
                        $state.go('updatesurvey', {key: data.survey.id});
                    }
                }
                if (msg == 'moveToNext') {
                    notify({
                        message: 'Survey data has been saved successfully',
                        classes: 'alert-success',
                        duration: 3000
                    });
                    $state.go('choosesuppliers', {
                        surveyid: data.survey.id
                    });
                }
                if (msg == 'saveAndClone') {
                    notify({message: 'Survey Saved', classes: 'alert-success', duration: 3000});
                    if(data.survey.surveyTitle.substring(0,5) == 'CLONE') {
                            if(data.survey.surveyTitle.charAt(6) == '-') {
                                var count = 1;
                                var surveyTte = parseInt(data.survey.surveyTitle.charAt(5)) + count;
                                var surveyTtle = data.survey.surveyTitle.split('-');
                                var newString = surveyTtle[0].slice(0, -1);
                                $scope.properties.surveyTitle = newString + surveyTte +'-' + surveyTtle[1];
                            }
                            else {
                                var count = 2;
                                var surveyTtle = data.survey.surveyTitle.split('-');
                                if(surveyTtle[1] == undefined || surveyTtle[1] == 'undefined') {
                                    surveyTtle[1] = surveyTtle[0];
                                    $scope.properties.surveyTitle = surveyTtle[0]  +'-' + surveyTtle[1];
                                }
                                else{
                                    $scope.properties.surveyTitle = surveyTtle[0] + count +'-' + surveyTtle[1];
                                }
                            }
                    }
                    else{
                        $scope.properties.surveyTitle = 'CLONE-' + data.survey.surveyTitle;  
                    }  
                    $state.go('dynstate', {'id': 'CreateSurveys','locale':encodeDecodeFactory.encode(data.survey.locale), 'survey_id': data.survey.id});
                }

            }).error(function(err) {
                // Clearing the quotas and qualifications on error
                $scope.properties.quotas = [];
                $scope.properties.qualifications = [];
                ngProgressLite.done();
                $scope.showLoader = "";
                $scope.properties.target = {};
                $scope.properties.quotas = [];
                notify({
                    message : "Something went wrong in saving survey",
                    classes: 'alert-danger',
                    duration: 3000
                });
            })
        }else if(msg == 'goToManageSurvey'){
            console.log("properties : ", $scope.properties);
            createSurvey.updateSurveyFromManageStep1($stateParams.key, $scope.properties).success(function(data) {
                // Clearing the quotas and qualifications on save
                $scope.properties.quotas = [];
                $scope.properties.qualifications = [];
                ngProgressLite.done();
                $scope.showLoader = "";
                notify({
                    message: data.msg,
                    classes: 'alert-success',
                    duration: 3000
                });
                $state.go('editSurvey', {key: $stateParams.key});
            }).error(function(err) {
                // Clearing the quotas and qualifications on error
                $scope.properties.quotas = [];
                $scope.properties.qualifications = [];
                ngProgressLite.done();
                $scope.showLoader = "";
                notify({
                    message: "Something went wrong in saving survey",
                    classes: 'alert-danger',
                    duration: 3000
                });
            })
        }else{
            createSurvey.updateSurvey($stateParams.key, $scope.properties).success(function(data) {
                // Clearing the quotas and qualifications on save
                $scope.properties.quotas = [];
                $scope.properties.qualifications = [];
                ngProgressLite.done();
                $scope.showLoader = "";
                notify({
                    message: data.msg,
                    classes: 'alert-success',
                    duration: 3000
                });

                if(msg == 'saveAndNew') {
                    $rootScope.clone = false;
                    $state.go('dynstate', {id: 'CreateSurveys'});   
                }
                
                if (msg == 'saveAndClone') {
                    if(!$scope.newId){
                        $scope.newId = $stateParams.key;
                    }
                    createSurvey.getSurveyById($scope.newId).success(function(surveyDetails) {
                        if(surveyDetails.survey[0].surveyTitle.substring(0,5) == 'CLONE') {
                            if(surveyDetails.survey[0].surveyTitle.charAt(6) == '-') {
                                var count = 1;
                                var surveyTte = parseInt(surveyDetails.survey[0].surveyTitle.charAt(5)) + count;
                                var surveyTtle = surveyDetails.survey[0].surveyTitle.split('-');
                                var newString = surveyTtle[0].slice(0, -1);
                                $scope.properties.surveyTitle = newString + surveyTte +'-' + surveyTtle[1];
                            }
                            else {
                                var count = 2;
                                var surveyTtle = surveyDetails.survey[0].surveyTitle.split('-');
                                $scope.properties.surveyTitle = surveyTtle[0] + count +'-' + surveyTtle[1];
                            }
                        }else{
                            $scope.properties.surveyTitle = 'CLONE-' + surveyDetails.survey[0].surveyTitle;
                        } 

                        $state.go('dynstate', {'id': 'CreateSurveys','locale':encodeDecodeFactory.encode(surveyDetails.survey[0].locale), 'survey_id': $scope.newId});
                    });
                }

                if (msg == 'moveToNext') {
                    $state.go('choosesuppliers', {
                        surveyid: $stateParams.key
                    });
                }
                if(msg == 'save') {
                    // For Clearing Nesting Arrays before page reload to prevent duplicates
                    $scope.clearNesting();
                    getSurveyDetailsForUpdate($stateParams.key);
                }
            }).error(function(err) {
                // Clearing the quotas and qualifications on error
                $scope.properties.quotas = [];
                $scope.properties.qualifications = [];
                ngProgressLite.done();
                $scope.showLoader = "";
                notify({
                    message: "Something went wrong in saving survey",
                    classes: 'alert-danger',
                    duration: 3000
                });
            })
        }
    };

    $scope.getLOS = function(value) {
        $scope.blrFld.LOI = value;
        if ($scope.blrFld.lang && $scope.blrFld.cntry && $scope.blrFld.LOI && $scope.blrFld.incd) {
            getSurveyHeaderPricingValue($scope.blrFld.lang, $scope.blrFld.cntry, $scope.blrFld.LOI, $scope.blrFld.incd);
        } else {
            $scope.cpi = 0;
            $scope.total = 0;
        }

    };

    $scope.getINS = function(value) {
        $scope.blrFld.incd = parseInt(value);
        if ($scope.blrFld.lang && $scope.blrFld.cntry && $scope.blrFld.LOI && $scope.blrFld.incd) {
            getSurveyHeaderPricingValue($scope.blrFld.lang, $scope.blrFld.cntry, $scope.blrFld.LOI, $scope.blrFld.incd)
        } else {
            $scope.cpi = 0;
            $scope.total = 0;
        }
        // To calculate Valid Clicks
        if($scope.properties.clickBalance == 1){
            $rootScope.$broadcast('calculateTotalCliks',{});
        }
    };

    $scope.getCompletes = function(value) {
        $scope.comArray = [];
        $scope.completes = value;
        if($scope.completes && $scope.cpi) {
            calculateTotalCost();
        }else{
            $scope.total = 0;
        }
        $scope.comArray.push($scope.race, $scope.genderInfo, $scope.relation, $scope.children, $scope.employement, $scope.education);
        
        
        if($scope.properties.clickBalance == 1){
            $rootScope.$broadcast('calculateTotalCliks',{});
        }else{
            $scope.completesNeeded = value;
        }
        
        // addQuotaCalculation(value, $scope.comArray);
        $scope.updateQuotasOnChange();
    };

    $scope.getFieldTime = function(value, creationDate){
        $scope.field_time = value;
        var time = new Date();
        var creationDate = new Date(creationDate);
        if($scope.liveSurveyEditingStep == 'editStep1'){
            $scope.properties.End_Date = creationDate.setDate(creationDate.getDate()+ parseInt(value));
        }else{
            $scope.properties.End_Date = time.setDate(time.getDate()+ parseInt(value));
        }
    };

    function calculateTotalCost() {
        var tol = ($scope.completes * $scope.cpi);
        $scope.total = parseFloat(tol).toFixed(2);
    }

    function getSurveyHeaderPricingValue(lang, ctry, LOI, incd) {
        ngProgressLite.start();
        createSurvey.getSurveyHeaderValue(lang, ctry, LOI, incd).success(function(data) {
            ngProgressLite.done();
            if (data.CPI) {
                var orgCpi = parseFloat(data.CPI).toFixed(2);
                $scope.cpi = Math.round(orgCpi *100)/100;
                if ($scope.completes && $scope.cpi) {
                    calculateTotalCost();
                } else {
                    $scope.total = 0;
                }
            }
            if(data.currencyFx && data.currencyFx.symbol) {
                $scope.currency_symbol = data.currencyFx.symbol;
                $scope.currencyFx = data.currencyFx;
            }
        }).error(function(err) {
            notify({
                message: "Something went wrong in fetching header pricing values",
                classes: 'alert-danger',
                duration: 2000
            });
        })
    }

    $scope.checkAgeMin = function() {
        if ($scope.ageData.min < 13) {
            notify({
                message: "Please Enter the min age greater than or equal to 13",
                classes: 'alert-danger',
                duration: 2000
            });
            $scope.ageData.min = '18';
        }
        if ($scope.ageData.max && $scope.ageData.min > $scope.ageData.max) {
            notify({
                message: "Please Enter the min age less than max age and greater than 13",
                classes: 'alert-danger',
                duration: 2000
            });
            $scope.ageData.min = '18';
        }
        if ($scope.ageTempArr.length >= 1 && $scope.ageQuotaFlag.editAgeFlag === true) {
            $scope.ageQuotaFlag.editAgeFlag = false;
            notify({
                message: "If you edit the age parameters, you're existing quotas will be deleted.Would you like to proceed?",
                classes: 'alert-danger',
                duration: 2000
            });
        }
    };

    $scope.checkAgeMax = function() {
        if ($scope.ageData.min > $scope.ageData.max) {
            notify({
                message: "Please Enter the max age greater than to min age",
                classes: 'alert-danger',
                duration: 2000
            });
            $scope.ageData.max = '99';
        }
        if ($scope.ageTempArr.length >= 1 && $scope.ageQuotaFlag.editAgeFlag === true) {
            $scope.ageQuotaFlag.editAgeFlag = false;
            notify({
                message: "If you edit the age parameters, you're existing quotas will be deleted.Would you like to proceed?",
                classes: 'alert-danger',
                duration: 2000
            })
        }
    };

    $scope.checkIncomeMin = function() {
        if ($scope.houseHoldIncome.min < 0) {
            notify({
                message: "Please Enter the min income greater than or equal to 0",
                classes: 'alert-danger',
                duration: 2000
            });
            $scope.houseHoldIncome.min = 0;
        }
        if ($scope.houseHoldIncome.max && $scope.houseHoldIncome.min > $scope.houseHoldIncome.max) {
            notify({
                message: "Please Enter the min income less than max income",
                classes: 'alert-danger',
                duration: 2000
            });
            $scope.houseHoldIncome.min = 0;
        }
        if ($scope.incomeTempArr.length >= 1 && $scope.incomeQuotaFlag.editIncomeFlag === true) {
            $scope.incomeQuotaFlag.editIncomeFlag = false;
            notify({
                message: "If you edit the income parameters, you're existing quotas will be deleted. Would you like to proceed?",
                classes: 'alert-danger',
                duration: 2000
            })
        }
    };

    $scope.checkIncomeMax = function() {
        if(parseInt($scope.houseHoldIncome.min) > parseInt($scope.houseHoldIncome.max)){
            notify({
                message: "Please Enter the max income greater than to min income",
                classes: 'alert-danger',
                duration: 2000
            });
            $scope.houseHoldIncome.max = 999999;
        }
        if($scope.incomeTempArr.length >= 1 && $scope.incomeQuotaFlag.editIncomeFlag === true) {
            $scope.incomeQuotaFlag.editIncomeFlag = false;
            notify({
                message: "If you edit the income parameters, you're existing quotas will be deleted.Would you like to proceed?",
                classes: 'alert-danger',
                duration: 2000
            });
        }
    };

    $scope.ageSltBoxTlt = function() {
        $scope.ageTlt = false;
        $scope.ageShow = true;
    };

    $scope.ageSltBoxVal = function() {
        if ($scope.ageTempArr.length > 0) {
           
            $scope.ageTempArr = [];
            $scope.ageFlag = false;
            $scope.ageTempArr[0] = {
                "min": parseInt($scope.ageData.min),
                "max": parseInt($scope.ageData.max),
                'flexPer': 0
            };
            $scope.ageQuotaFlag.ageFlxValue = 0;
            $scope.ageTotalRemRace = $scope.completesNeeded;

        }
        /*notify({message:"Quotas deleted successfully",classes:'alert-success',duration:2000})*/
        $scope.ageQuotaFlag.hasAgeFlag = false;
        $scope.ageQuotaFlag.editAgeFlag = false;
        $scope.ageQuotaFlag.clearAgeFlag = false;
        $scope.censusRepoFlag.hasCensusRepoAge = false;
    };

    $scope.incomeSltBoxTlt = function() {
        $scope.incmTlt = false;
        $scope.incmShow = true;
    };

    $scope.incomeSltBoxVal = function() {
        if ($scope.incomeTempArr.length > 0) {
            $scope.incomeTempArr = [];
            $scope.incmFlag = false;
            $scope.incomeTempArr[0] = {
                "min": parseInt($scope.houseHoldIncome.min),
                "max": parseInt($scope.houseHoldIncome.max),
                'flexPer': 0
            };
            $scope.incomeTotalRemRace = $scope.completesNeeded;
        }
        $scope.incomeQuotaFlag.incomeFlxValue = 0;
        /*notify({message:"Quotas deleted successfully",classes:'alert-success',duration:2000})*/
        $scope.incomeQuotaFlag.hasIncomeFlag = false;
        $scope.incomeQuotaFlag.editIncomeFlag = false;
        $scope.incomeQuotaFlag.clearIncomeFlag = false;
        $scope.censusRepoFlag.hasCensusRepoIncome = false;
    };
    $scope.childSltBoxVal = function(){
        if($scope.chldTempArr.length > 0) {
            $scope.chldTempArr = [];
            $scope.incmFlag = false;
            $scope.chldTempArr[0] = {
                "min": '',
                "max": '',
                'flexPer': 0
            };
        }
        $scope.childQuotaFlag.chldFlxValue = 0;
        $scope.chldTotalRemRace = $scope.completesNeeded;
        /*notify({message:"Quotas deleted successfully",classes:'alert-success',duration:2000})*/

        $scope.childQuotaFlag.editChldFlag = false;
        $scope.childQuotaFlag.hasChldFlag = false;
    };

    $scope.genderQuota = function(gndrFlxValue, $event) {
        // Census Rep should be set to false if quota applied manually
        if($scope.censusRepoFlag.hasCensusRepoGndr){
            $scope.censusRepoFlag.hasCensusRepoGndr = false;
        }
        $scope.quotaNumberChange('id', $scope.genderInfo , $scope.gndrQuotaFlag.gndrFlxValue, 'gndr');
        var removeIds = [];
        if(!gndrFlxValue){
            $scope.gndrQuotaFlag.gndrFlxValue = "0";
        }
        _.each($scope.sltGender, function(genderQuota){
            if (genderQuota.id) {
                genderQuota.flexible = angular.element("#gndr").is(":checked");
                genderQuota.flexiblePer = parseInt(gndrFlxValue) || 0;
            }
            if($scope.genderInfo) {
                _.each($scope.genderInfo, function(genderInfo){
                    if(genderInfo.id == genderQuota.id) {
                        if(genderInfo.hasOwnProperty('number') && genderInfo.number != 0 || genderInfo.hasOwnProperty('number') && $scope.liveSurveyEditingStep == 'editStep1'){
                            genderInfo.selected = true;
                            genderQuota.number = parseInt(genderInfo.number) || 0;
                            // For verifying that quota exists
                            genderQuota.hasValidQuotas = true;
                            genderQuota.selected = true;
                            genderQuota.name = genderInfo.name;

                            if ($scope.gndrQuotaFlag.gndrFlxValue) {
                                genderQuota.minimum = genderInfo.minimum;
                                genderQuota.maximum = genderInfo.maximum;
                                genderQuota.percentage = genderInfo.per;
                                genderQuota.per = genderInfo.per;
                            }

                            if($scope.gndrQuotaFlag.gndrFlxValue && $scope.liveSurveyEditingStep == 'editStep1' && (genderInfo.number == undefined || genderInfo.number == null || genderInfo.number == '')){
                                genderQuota.minimum = 0;
                                genderQuota.maximum = 0;
                                genderQuota.percentage = 0;
                                genderQuota.per = 0;
                            }
                                
                        }
                        else {
                            genderInfo.selected = false;
                            removeIds.push(genderInfo.id);
                        }
                    }
                });
            }
        });

        //PD-132
        checkQuotaExceedCmplts($scope.genderInfo);

        var temp = $scope.sltGender.filter(function (item) {
           return !(removeIds.indexOf(item.id) !== -1);
        });

        $scope.sltGender = temp;

        $scope.gndrQuotaFlag.resetGen = false;
        $scope.gndrQuotaFlag.editGndrFlag = true;
        $scope.gndrQuotaFlag.hasGndrFlag = true;
        notify({
            message: 'Quotas applied',
            classes: 'alert-success',
            duration: 2000
        });
        // If AutoNested
        if($scope.isNested('gender')){
            $scope.activateNesting('gender', $scope.genderInfo, $event);
            $scope.applyNesting();
        }
    };

    $scope.chldQuota = function($event) {
        $scope.chldFlag = true;
        var totalnumber=0;
        var id = 111;
        var tempChldArr = [];
        if(!$scope.childQuotaFlag.chldFlxValue){
            $scope.childQuotaFlag.chldFlxValue = "0";
        }
        var childMasterData = _.findWhere(masterData, {"masterKey" : "children"});
        if($scope.chldTempArr){
            _.each(_.keys($scope.chldTempArr), function(singlekey){
                _.each($scope.chldTempArr[singlekey], function(singleKeyItem, index){
                    if(singlekey == 'no' || (singlekey == 'have' && index != 0)){
                        singleKeyItem.min = isNaN(parseInt(singleKeyItem.min)) ? 0 : parseInt(singleKeyItem.min);
                        singleKeyItem.max = isNaN(parseInt(singleKeyItem.max)) ? 0 : parseInt(singleKeyItem.max);
                        singleKeyItem.minimum = parseInt(singleKeyItem.minimum) || 0;
                        singleKeyItem.maximum = parseInt(singleKeyItem.maximum) || 0;
                        singleKeyItem.flexiblePer = parseInt($scope.childQuotaFlag.chldFlxValue) || 0;
                        singleKeyItem.percentage = singleKeyItem.per;
                        singleKeyItem.achieved = parseInt(singleKeyItem.achieved) || 0;
                        singleKeyItem.id = singleKeyItem.id;          // Have children condition code
                        singleKeyItem.name = (_.findWhere(childMasterData.values, {"id":parseInt(singleKeyItem.id)})).name;
                        //PD-711 Adding qual_id in Children Quota Array for AutoNesting
                        singleKeyItem.qual_id = childMasterData.id;

                        // Check that the valid quota exists
                        singleKeyItem.hasValidQuotas =  true;
                        if($scope.childQuotaFlag.chldFlx) {
                            singleKeyItem.flexible = true;
                        }else{
                            singleKeyItem.flexible = false;
                        }

                        tempChldArr.push(singleKeyItem);
                    }
                });
            });
            //PD-132
            checkQuotaExceedCmplts(tempChldArr);

            $scope.childQuotaFlag.editChldFlag = true;
            $scope.childQuotaFlag.hasChldFlag = true;
            $scope.childQuotaFlag.resetChild = false;
            notify({
                message: 'Quotas applied',
                classes: 'alert-success',
                duration: 2000
            });
            // If AutoNested
            if($scope.isNested('children')){
                $scope.activateNesting('children', $scope.chldTempArr, $event);
                $scope.applyNesting();
            }
        }
    };

    $scope.ageQuota = function(event) {
        // Census Rep should be set to false if quota applied manually
        if($scope.censusRepoFlag.hasCensusRepoAge){
            $scope.censusRepoFlag.hasCensusRepoAge = false;
        }
        var totalRangeDiff = 0; //Range Validation PD-388
        if(!$scope.ageQuotaFlag.ageFlxValue){
            $scope.ageQuotaFlag.ageFlxValue = "0";
        }
        $scope.ageFlag = true;
        if ($scope.ageTempArr) {
            for (var i = 1 in $scope.ageTempArr) {
                $scope.ageTempArr[i].min = isNaN(parseInt($scope.ageTempArr[i].min)) ? 0 : parseInt($scope.ageTempArr[i].min);
                $scope.ageTempArr[i].max = isNaN(parseInt($scope.ageTempArr[i].max)) ? 0 : parseInt($scope.ageTempArr[i].max);
                $scope.ageTempArr[i].minimum = parseInt($scope.ageTempArr[i].minimum) || 0;
                $scope.ageTempArr[i].maximum = parseInt($scope.ageTempArr[i].maximum) || 0;
                $scope.ageTempArr[i].flexiblePer = parseInt($scope.ageQuotaFlag.ageFlxValue) || 0;
                $scope.ageTempArr[i].percentage = $scope.ageTempArr[i].per;
                $scope.ageTempArr[i].achieved = parseInt($scope.ageTempArr[i].achieved) || 0;

                //PD-711 Adding qual_id in Age Quota Array for AutoNesting
                var ageMasterData = _.findWhere(masterData, {"masterKey" : "age"});
                $scope.ageTempArr[i].qual_id = ageMasterData.id; 

                // Check that the valid quota exists
                $scope.ageTempArr[i].hasValidQuotas =  true;
                if ($scope.ageTempArr[i].ageFlx == true) {
                    $scope.ageTempArr[i].flexible = true;
                }
                if ($scope.ageTempArr[i].ageFlx == false) {
                    $scope.ageTempArr[i].flexible = false;
                }
                // Range Validation PD-388
                if(i != 0 && ($scope.ageTempArr[i].max > $scope.ageTempArr[i].min)){
                    totalRangeDiff = totalRangeDiff + ($scope.ageTempArr[i].max - $scope.ageTempArr[i].min);
                }
            }
            //$scope.allProperties.age = $scope.ageTempArr;
        }
        //PD-132
        checkQuotaExceedCmplts($scope.ageTempArr);

        var totalAgeDiff = $scope.ageData.max - $scope.ageData.min;
        var row_count = $scope.ageTempArr.length - 2;
        totalRangeDiff = totalRangeDiff + row_count;

        if(totalAgeDiff == totalRangeDiff){
            notify({
                message: 'Quotas applied',
                classes: 'alert-success',
                duration: 2000
            });
            $scope.ageQuotaFlag.editAgeFlag = true;
            $scope.ageQuotaFlag.clearAgeFlag = true;
            $scope.ageQuotaFlag.hasAgeFlag = true;
            $scope.ageQuotaFlag.resetAge = false;
        }else{
            notify({
                message: 'Please define all ranges',
                classes: 'alert-warning',
                duration: 4000
            });
            event.preventDefault();
            event.stopPropagation();
        }
        // If AutoNested
        if($scope.isNested('age')){
            $scope.activateNesting('age', $scope.ageTempArr, event);
            $scope.applyNesting();
        }
    };

    $scope.incomeQuota = function(event) {
        // Census Rep should be set to false if quota applied manually
        if($scope.censusRepoFlag.hasCensusRepoIncome){
            $scope.censusRepoFlag.hasCensusRepoIncome = false;
        }
        var totalRangeDiff = 0; //Range Validation PD-388
        $scope.incmFlag = true;
        if(!$scope.incomeQuotaFlag.incomeFlxValue){
            $scope.incomeQuotaFlag.incomeFlxValue = "0";
        }
        if ($scope.incomeTempArr) {
            _.each($scope.incomeTempArr, function(incomeQuota, index){
                incomeQuota.min = isNaN(parseInt(incomeQuota.min)) ? 0 : parseInt(incomeQuota.min);
                incomeQuota.max = isNaN(parseInt(incomeQuota.max)) ? 0 : parseInt(incomeQuota.max);
                incomeQuota.minimum = parseInt(incomeQuota.minimum) || 0;
                incomeQuota.maximum = parseInt(incomeQuota.maximum) || 0;
                incomeQuota.flexiblePer = parseInt($scope.incomeQuotaFlag.incomeFlxValue) || 0;
                incomeQuota.percentage = incomeQuota.per;
                incomeQuota.achieved = parseInt(incomeQuota.achieved) || 0;

                //PD-711 Adding qual_id in Income Quota Array for AutoNesting
                var incomeMasterData = _.findWhere(masterData, {"masterKey" : "houseHoldIncome"});
                incomeQuota.qual_id = incomeMasterData.id;

                // Check that the valid quota exists
                incomeQuota.hasValidQuotas =  true;

                if (incomeQuota.incFlx == true) {
                   incomeQuota.flexible = true;
                }
                if (incomeQuota.incFlx == false) {
                    incomeQuota.flexible = false;
                }
                // Range Validation PD-388
                if(index != 0 && (incomeQuota.max > incomeQuota.min)){
                    totalRangeDiff = totalRangeDiff + (incomeQuota.max - incomeQuota.min);
                }
            });
            
        }
        //PD-132
        checkQuotaExceedCmplts($scope.incomeTempArr);

        var totalIncomeDiff = $scope.houseHoldIncome.max - $scope.houseHoldIncome.min;
        var row_count = $scope.incomeTempArr.length - 2;
        totalRangeDiff = totalRangeDiff + row_count;

        if(totalIncomeDiff == totalRangeDiff){
            notify({
                message: 'Quotas applied',
                classes: 'alert-success',
                duration: 2000
            });
            $scope.incomeQuotaFlag.editIncomeFlag = true;
            $scope.incomeQuotaFlag.clearIncomeFlag = true;
            $scope.incomeQuotaFlag.hasIncomeFlag = true;
            $scope.incomeQuotaFlag.resetInc = false;
        }else{
            notify({
                message: 'Please define all ranges',
                classes: 'alert-warning',
                duration: 4000
            });
            event.preventDefault();
            event.stopPropagation();
        }
        // If AutoNested
        if($scope.isNested('houseHoldIncome')){
            $scope.activateNesting('houseHoldIncome', $scope.incomeTempArr, event);
            $scope.applyNesting();
        }

    };

    $scope.deviceQuota = function(dvcFlxValue, $event) {
        //PD-1402
        if($scope.isGrouped('device')) {
            $scope.quotaNumberChange('data', $scope.groupingDeviceModel, $scope.dvcQuotaFlag.dvcFlxValue, 'devcSw');
        }
        else {
          $scope.quotaNumberChange('data', $scope.deviceInfo, $scope.dvcQuotaFlag.dvcFlxValue, 'devcSw');  
        }
        
        if(!dvcFlxValue){
            $scope.dvcQuotaFlag.dvcFlxValue = "0";
        }
        var removeItems = [];
        _.each($scope.sltDevice, function(deviceQuota){
            if (deviceQuota.id) {
                deviceQuota.flexible = angular.element("#devcSw").is(":checked");
                deviceQuota.flexiblePer = parseInt(dvcFlxValue) || 0;
            }
            if ($scope.deviceInfo) {
                _.each($scope.deviceInfo, function(deviceInfo){
                    if(deviceInfo.id == deviceQuota.id) {
                        if(deviceInfo.hasOwnProperty('number') && deviceInfo.number != 0 || (deviceInfo.hasOwnProperty('number') && $scope.liveSurveyEditingStep == 'editStep1' && deviceInfo.number != 0) || (deviceInfo.hasOwnProperty('number') && deviceInfo.number != "" && deviceInfo.number != 0) || (deviceInfo.hasOwnProperty('setGrupActive') && deviceInfo.setGrupActive)) {
                            deviceInfo.selected = true;
                            // Check that the valid quota exists
                            deviceQuota.hasValidQuotas =  true;
                            deviceQuota.selected =  true;
                            deviceQuota.name =  deviceInfo.name;

                            deviceQuota.number = parseInt(deviceInfo.number) || 0;
                            if ($scope.dvcQuotaFlag.dvcFlxValue) {
                                deviceQuota.minimum = parseInt(deviceInfo.minimum) || 0;
                                deviceQuota.maximum = parseInt(deviceInfo.maximum) || 0;
                                deviceQuota.percentage = parseInt(deviceInfo.per) || 0;
                            }
                            if($scope.dvcQuotaFlag.dvcFlxValue && $scope.liveSurveyEditingStep == 'editStep1' && (deviceInfo.number == undefined || deviceInfo.number == null || deviceInfo.number == '')){
                                deviceQuota.minimum = 0;
                                deviceQuota.maximum = 0;
                                deviceQuota.percentage = 0;
                            }
                        }
                        else {
                            deviceInfo.selected = false;
                            removeItems.push(deviceInfo.id);
                        }
                    }
                });
            }
        });

        //PD-132
        checkQuotaExceedCmplts($scope.deviceInfo);

        var temp = $scope.sltDevice.filter(function (item) {
           return !(removeItems.indexOf(item.id) !== -1);
        });

        $scope.sltDevice = temp;

        //PD-1402
        
        var matchedForBlankGroupQuota = _.where($scope.groupingDeviceModel, {"condditionGroup": true});
        if(matchedForBlankGroupQuota.length >0) {
            removeGroupedUnallocatedQuals(matchedForBlankGroupQuota, $scope.sltDevice, $scope.deviceInfo, $scope.groupingDeviceModel);
        }

        notify({
            message: 'Quotas applied',
            classes: 'alert-success',
            duration: 2000
        });
        $scope.dvcQuotaFlag.editDvcFlag = true;
        $scope.dvcQuotaFlag.hasDeviceFlag = true;
        $scope.dvcQuotaFlag.resetDev = false;
        // If AutoNested
        if($scope.isNested('device')){
            $scope.activateNesting('device', $scope.deviceInfo, $event);
            $scope.applyNesting();
        }
    };

    $scope.addRaceQuota = function(raceFlxValue, $event) {
        // Census Rep should be set to false if quota applied manually
        if($scope.censusRepoFlag.hasCensusRepoRace){
            $scope.censusRepoFlag.hasCensusRepoRace = false;
        }
        //PD-961
        if($scope.isGrouped('race')) {
            $scope.quotaNumberChange('data' ,$scope.newraceModal, $scope.raceQuotaFlag.raceFlxValue, 'raceSw');
        }
        else {
           $scope.quotaNumberChange('data' ,$scope.race, $scope.raceQuotaFlag.raceFlxValue, 'raceSw'); 
        }
        
        if(!raceFlxValue){
            $scope.raceQuotaFlag.raceFlxValue = "0";
        }
        var removeItems = [];
        _.each($scope.sltRace, function(raceQuota){
            if(raceQuota.id) {
                raceQuota.flexible = angular.element("#raceSw").is(":checked");
                raceQuota.flexiblePer = parseInt(raceFlxValue) || 0;
            }
            if($scope.race) {
                _.each($scope.race, function(race){
                    if (raceQuota.id == race.id) {
                        if((race.hasOwnProperty('number') && race.number != 0) || (race.hasOwnProperty('number') && race.number != 0 && $scope.liveSurveyEditingStep == 'editStep1') || (race.hasOwnProperty('number') && race.number != "" && race.number != 0) || (race.hasOwnProperty('setGrupActive') && race.setGrupActive)){
                            race.selected = true;
                            raceQuota.number = parseInt(race.number) || 0;
                            // Check that the valid quota exists
                            raceQuota.hasValidQuotas =  true;
                            raceQuota.selected =  true;
                            raceQuota.name =  race.name;
                            if ($scope.raceQuotaFlag.raceFlxValue) {
                                raceQuota.minimum = parseInt(race.minimum) || 0;
                                raceQuota.maximum = parseInt(race.maximum) || 0;
                                raceQuota.percentage = parseInt(race.per) || 0;
                                raceQuota.per = parseInt(race.per) || 0;
                            }
                            if($scope.raceQuotaFlag.raceFlxValue && $scope.liveSurveyEditingStep == 'editStep1' && (race.number == undefined || race.number == null || race.number == '')){
                                raceQuota.minimum = 0;
                                raceQuota.maximum = 0;
                                raceQuota.percentage = 0;
                                raceQuota.per = 0;
                            }
                        }else {
                            race.selected = false;
                            removeItems.push(race.id);
                        }
                    }
                });
            }
        });
        //PD-132
        checkQuotaExceedCmplts($scope.race);

        var temp = $scope.sltRace.filter(function (item) {
           return !(removeItems.indexOf(item.id) !== -1);
        });

        $scope.sltRace = temp;
        //PD-961
        var matchedForBlankGroupQuota = _.where($scope.newraceModal, {"condditionGroup": true});
        if(matchedForBlankGroupQuota.length >0) {
            removeGroupedUnallocatedQuals(matchedForBlankGroupQuota, $scope.sltRace, $scope.race, $scope.newraceModal);
        }

        $scope.raceQuotaFlag.editRaceFlag = true;
        $scope.raceQuotaFlag.resetRace = false;
        $scope.raceQuotaFlag.hasRaceFlag = true;
        notify({
            message: 'Quotas applied',
            classes: 'alert-success',
            duration: 2000
        });
        // If AutoNested is clicked
        if($scope.isNested('race')){
            $scope.activateNesting('race', $scope.race, $event);
            $scope.applyNesting();
        }
       
    };

    $scope.addRbQuota = function(rbFlxValue, $event) {
        //PD-1402
        if($scope.isGrouped('raceBera')) {
            $scope.quotaNumberChange('data', $scope.groupingRaceBeraModel, $scope.rbQuotaFlag.rbFlxValue, 'rbSw');
        }
        else {
            $scope.quotaNumberChange('data', $scope.raceBera, $scope.rbQuotaFlag.rbFlxValue, 'rbSw');
        }
        
        if(!rbFlxValue){
            $scope.rbQuotaFlag.rbFlxValue = "0";
        }
        var removeItems = [];
        _.each($scope.sltRaceBera, function(rbQuota){
            if(rbQuota.id) {
                rbQuota.flexible = angular.element("#rbSw").is(":checked");
                rbQuota.flexiblePer = parseInt(rbFlxValue) || 0;
            }
            if($scope.raceBera) {
                _.each($scope.raceBera, function(rb){
                    if (rbQuota.id == rb.id) {
                        if((rb.hasOwnProperty('number') && rb.number != 0) || (rb.hasOwnProperty('number') && rb.number != 0 && $scope.liveSurveyEditingStep == 'editStep1') || (rb.hasOwnProperty('number') && rb.number != "" && rb.number != 0 ) || (rb.hasOwnProperty('setGrupActive') && rb.setGrupActive)){
                            rb.selected = true;
                            rbQuota.number = parseInt(rb.number) || 0;
                            // Check that the valid quota exists
                            rbQuota.hasValidQuotas =  true;
                            rbQuota.selected =  true;
                            rbQuota.name =  rb.name;
                            if ($scope.rbQuotaFlag.rbFlxValue) {
                                rbQuota.minimum = parseInt(rb.minimum) || 0;
                                rbQuota.maximum = parseInt(rb.maximum) || 0;
                                rbQuota.percentage = parseInt(rb.per) || 0;
                                rbQuota.per = parseInt(rb.per) || 0;
                            }
                            if($scope.rbQuotaFlag.rbFlxValue && $scope.liveSurveyEditingStep == 'editStep1' && (rb.number == undefined || rb.number == null || rb.number == '')){
                                rbQuota.minimum = 0;
                                rbQuota.maximum = 0;
                                rbQuota.percentage = 0;
                                rbQuota.per = 0;
                            }
                        }else {
                            rb.selected = false;
                            removeItems.push(rb.id);
                        }
                    }
                });
            }
        });

        //PD-132
        checkQuotaExceedCmplts($scope.raceBera);

        var temp = $scope.sltRaceBera.filter(function (item) {
           return !(removeItems.indexOf(item.id) !== -1);
        });

        $scope.sltRaceBera = temp;

        //PD-1402
        
        var matchedForBlankGroupQuota = _.where($scope.groupingRaceBeraModel, {"condditionGroup": true});
        if(matchedForBlankGroupQuota.length >0) {
            removeGroupedUnallocatedQuals(matchedForBlankGroupQuota, $scope.sltRaceBera, $scope.raceBera, $scope.groupingRaceBeraModel);
        }
        
        $scope.rbQuotaFlag.editRbFlag = true;
        $scope.rbQuotaFlag.resetRb = false;
        $scope.rbQuotaFlag.hasRbFlag = true;
        notify({
            message: 'Quotas applied',
            classes: 'alert-success',
            duration: 2000
        });
        // If AutoNested is clicked
        if($scope.isNested('raceBera')){
            $scope.activateNesting('raceBera', $scope.raceBera, $event);
            $scope.applyNesting();
        }
    };

    $scope.addHispanicQuota = function(hispanicFlxValue, $event) {
        // Census Rep should be set to false if quota applied manually
        if($scope.censusRepoFlag.hasCensusRepoHis){
            $scope.censusRepoFlag.hasCensusRepoHis = false;
        }
        $scope.quotaNumberChange('data', $scope.hispanic, $scope.hisQuotaFlag.hispanicFlxValue, 'hispanicSw');
        if(!hispanicFlxValue){
            $scope.hisQuotaFlag.hispanicFlxValue = "0";
        }
        var removeItems = [];
        _.each($scope.hispanicOrigin, function(hispanicQuota){
            if(hispanicQuota.id) {
                hispanicQuota.flexible = angular.element("#hispanicSw").is(":checked");
                hispanicQuota.flexiblePer = parseInt(hispanicFlxValue) || 0;
            }
            if($scope.hispanic) {
                _.each($scope.hispanic, function(hispanic){
                    if (hispanicQuota.id == hispanic.id) {
                        if((hispanic.hasOwnProperty('number') && hispanic.number != 0) || (hispanic.hasOwnProperty('number') && $scope.liveSurveyEditingStep == 'editStep1') || (hispanic.hasOwnProperty('number') && $scope.raceGrouping.check)){
                            hispanic.selected = true;
                            hispanicQuota.number = parseInt(hispanic.number) || 0;
                            // Check that the valid quota exists
                            hispanicQuota.hasValidQuotas =  true;
                            hispanicQuota.selected =  true;
                            hispanicQuota.name =  hispanic.name;
                            if ($scope.hisQuotaFlag.hispanicFlxValue) {
                                hispanicQuota.minimum = hispanic.minimum;
                                hispanicQuota.maximum = hispanic.maximum;
                                hispanicQuota.percentage = hispanic.per;
                                hispanicQuota.per = hispanic.per;
                            }
                            if($scope.hisQuotaFlag.hispanicFlxValue && $scope.liveSurveyEditingStep == 'editStep1' && (hispanic.number == undefined || hispanic.number == null || hispanic.number == '')){
                                hispanicQuota.minimum = 0;
                                hispanicQuota.maximum = 0;
                                hispanicQuota.percentage = 0;
                                hispanicQuota.per = 0;
                            }
                        }else {
                            hispanic.selected = false;
                            removeItems.push(hispanic.id);
                        }
                    }
                });
            }
        });

        //PD-132
        checkQuotaExceedCmplts($scope.hispanic);

        var temp = $scope.hispanicOrigin.filter(function (item) {
           return !(removeItems.indexOf(item.id) !== -1);
        });

        $scope.hispanicOrigin = temp;
        
        $scope.hisQuotaFlag.editHisOriFlag = true;
        $scope.hisQuotaFlag.resetHisOri = false;
        $scope.hisQuotaFlag.hasHisOriFlag = true;
        notify({
            message: 'Quotas applied',
            classes: 'alert-success',
            duration: 2000
        });
        // If AutoNested is clicked
        if($scope.isNested('hispanicOrigin')){
            $scope.activateNesting('hispanicOrigin', $scope.hispanic, $event);
            $scope.applyNesting();
        }
    };

    $scope.addDivisionQuota = function (divisionFlxValue, $event) {
        var removeItems = [];
        // Adding Qualification for Quota V2
        var qualiId = _.findWhere(masterData, {"masterKey":"divisions"});
        if(!divisionFlxValue){
            $scope.dvsnQuotaFlag.divisionFlxValue = "0";
        }
        if ($scope.sltDivision.length > 0) {
            _.each($scope.sltDivision, function(divisionQuota){
                if (divisionQuota.id) {
                    divisionQuota.flexible = angular.element("#divisionSw").is(":checked");
                    divisionQuota.flexiblePer = parseInt(divisionFlxValue) || 0;
                }
                if ($scope.division) {
                    _.each($scope.division, function(division){
                        if (divisionQuota.id == division.id) {
                            if (division.hasOwnProperty('number') && division.number != 0 || (division.hasOwnProperty('number') && $scope.liveSurveyEditingStep == 'editStep1' && division.number != 0) || (division.hasOwnProperty('number') && division.number != "" && division.number != 0) || (division.hasOwnProperty('setGrupActive') && division.setGrupActive)){
                                division.selected = true;
                                // Check that the valid quota exists
                                divisionQuota.hasValidQuotas =  true;
                                divisionQuota.selected =  true;
                                divisionQuota.qual_id = qualiId.id;  // For Quota V2
                                divisionQuota.name =  division.name;
                                divisionQuota.number = parseInt(division.number) || 0;
                                if ($scope.dvsnQuotaFlag.divisionFlxValue) {
                                    divisionQuota.minimum = parseInt(division.minimum) || 0;
                                    divisionQuota.maximum = parseInt(division.maximum) || 0;
                                    divisionQuota.percentage = parseInt(division.per) || 0;
                                }
                                if($scope.dvsnQuotaFlag.divisionFlxValue && $scope.liveSurveyEditingStep == 'editStep1' && (division.number == undefined || division.number == null || division.number == '')){
                                    divisionQuota.minimum = 0;
                                    divisionQuota.maximum = 0;
                                    divisionQuota.percentage = 0;
                                }
                            }
                            else {
                                division.selected = false;
                                removeItems.push(division.id);
                            }
                        }
                    });
                }
            });

            //PD-132
            checkQuotaExceedCmplts($scope.division);

            var temp = $scope.sltDivision.filter(function (item) {
                return !(removeItems.indexOf(item.id) !== -1);
            });

            $scope.sltDivision = temp;
            //PD-1402

            var matchedForBlankGroupQuota = _.where($scope.groupingDivisionModel, {"condditionGroup": true});
            if(matchedForBlankGroupQuota.length >0) {
                removeGroupedUnallocatedQuals(matchedForBlankGroupQuota, $scope.sltDivision, $scope.division, $scope.groupingDivisionModel);
            }

            notify({
                message: 'Quotas applied',
                classes: 'alert-success',
                duration: 2000
            });
            $scope.dvsnQuotaFlag.editDivisionFlag = true;
            $scope.dvsnQuotaFlag.hasDivisionFlag = true;
            $scope.dvsnQuotaFlag.resetDivi = false;
            // If AutoNested
            if($scope.isNested('divisions')){
                $scope.activateNesting('divisions', $scope.division, $event);
                $scope.applyNesting();
            }
        }
    };

    //apply states quota
    $scope.addStateQuota = function($event) {
        _.each($scope.selectedStates, function(stateQuota){
            if(stateQuota.number != undefined && stateQuota.number != null && stateQuota.number != "" || (stateQuota.hasOwnProperty('setGrupActive') && stateQuota.setGrupActive)) {
                stateQuota.flexiblePer = $scope.stateFlexibility.flxValue;
                stateQuota.flexible = $scope.stateFlexibility.isFlexible;
                stateQuota.hasValidQuotas = true;
                //Adding qual_id in State Quota Array for AutoNesting
                var stateMasterData = _.findWhere(masterData, {"masterKey" : "states"});
                stateQuota.qual_id = stateMasterData.id;
                stateQuota.qual_name = stateMasterData.masterKey;
            }
        });

        //PD-132
        checkQuotaExceedCmplts($scope.selectedStates);
    
        notify({
            message: 'Quotas applied',
            classes: 'alert-success',
            duration: 2000
        });
        $scope.editStateFlag = true;
        $scope.hasStateFlag = true;
        $scope.resetStateQuotas = false;
        // If AutoNested
        if($scope.isNested('states')){
            $scope.activateNesting('states', $scope.selectedStates, $event);
            $scope.applyNesting();
        }
    };

    //apply DMA quota
    $scope.addDMAQuota = function($event) {
        _.each($scope.selectedDMAs, function(dmaQuota){
            if(dmaQuota.number != undefined && dmaQuota.number != null && dmaQuota.number != "" || (dmaQuota.hasOwnProperty('setGrupActive') && dmaQuota.setGrupActive)) {
                dmaQuota.flexiblePer = $scope.dmaFlexibility.flxValue;
                dmaQuota.flexible = $scope.dmaFlexibility.isFlexible;
                dmaQuota.hasValidQuotas = true;
                //Adding qual_id in Dma Array for AutoNesting
                var dmaMasterData = _.findWhere(masterData, {"masterKey" : "dma"});
                dmaQuota.qual_id = dmaMasterData.id;
                dmaQuota.qual_name = dmaMasterData.masterKey;
            }
        });

        //PD-132
        checkQuotaExceedCmplts($scope.selectedDMAs);

        notify({
            message: 'Quotas applied',
            classes: 'alert-success',
            duration: 2000
        });
        $scope.editDMAFlag = true;
        $scope.hasDMAFlag = true;
        $scope.resetDMAQuotas = false;
        // If AutoNested
        if($scope.isNested('dma')){
            $scope.activateNesting('dma', $scope.selectedDMAs, $event);
            $scope.applyNesting();
        }
    };

    //apply CSA quota
    $scope.addCSAQuota = function($event) {
        _.each($scope.selectedCSAs, function(csaQuota){
            if(csaQuota.number != undefined && csaQuota.number != null && csaQuota.number != "" || (csaQuota.hasOwnProperty('setGrupActive') && csaQuota.setGrupActive)) {
                csaQuota.flexiblePer = $scope.csaFlexibility.flxValue;
                csaQuota.flexible = $scope.csaFlexibility.isFlexible;
                csaQuota.hasValidQuotas = true;
                //Adding qual_id in Csa Array for AutoNesting
                var csaMasterData = _.findWhere(masterData, {"masterKey" : "csa"});
                csaQuota.qual_id = csaMasterData.id;
                csaQuota.qual_name = csaMasterData.masterkey;
            }
        });

        //PD-132
        checkQuotaExceedCmplts($scope.selectedCSAs);

        notify({
            message: 'Quotas applied',
            classes: 'alert-success',
            duration: 2000
        });
        $scope.editCSAFlag = true;
        $scope.hasCSAFlag = true;
        $scope.resetCSAQuotas = false;
        // If AutoNested
        if($scope.isNested('csa')){
            $scope.activateNesting('csa', $scope.selectedCSAs, $event);
            $scope.applyNesting();
        }
    };

    //apply MSA quota
    $scope.addMSAQuota = function($event) {
        _.each($scope.selectedMSAs, function(msaQuota){
            if(msaQuota.number != undefined && msaQuota.number != null && msaQuota.number != "" || (msaQuota.hasOwnProperty('setGrupActive') && msaQuota.setGrupActive)) {
                msaQuota.flexiblePer = $scope.msaFlexibility.flxValue;
                msaQuota.flexible = $scope.msaFlexibility.isFlexible;
                msaQuota.hasValidQuotas = true;
                //Adding qual_id in Msa Array for AutoNesting
                var msaMasterData = _.findWhere(masterData, {"masterKey" : "msa"});
                msaQuota.qual_id = msaMasterData.id;
                msaQuota.qual_name = msaMasterData.masterkey;
            }
        });

        //PD-132
        checkQuotaExceedCmplts($scope.selectedMSAs);

        notify({
            message: 'Quotas applied',
            classes: 'alert-success',
            duration: 2000
        });
        $scope.editMSAFlag = true;
        $scope.hasMSAFlag = true;
        $scope.resetMSAQuotas = false;
        // If AutoNested
        if($scope.isNested('msa')){
            $scope.activateNesting('msa', $scope.selectedMSAs, $event);
            $scope.applyNesting();
        }
    };

    //apply County quota
    $scope.addCountyQuota = function($event) {
        _.each($scope.selectedCountys, function(countyQuota){
            if(countyQuota.number != undefined && countyQuota.number != null && countyQuota.number != "" || (countyQuota.hasOwnProperty('setGrupActive') && countyQuota.setGrupActive)) {
                countyQuota.flexiblePer = $scope.countyFlexibility.flxValue;
                countyQuota.flexible = $scope.countyFlexibility.isFlexible;
                countyQuota.hasValidQuotas = true;
                //Adding qual_id in County Array for AutoNesting
                var countyMasterData = _.findWhere(masterData, {"masterKey" : "county"});
                countyQuota.qual_id = countyMasterData.id;
                countyQuota.qual_name = countyMasterData.masterkey;
            }
        });

        //PD-132
        checkQuotaExceedCmplts($scope.selectedCountys);

        notify({
            message: 'Quotas applied',
            classes: 'alert-success',
            duration: 2000
        });
        $scope.editCountyFlag = true;
        $scope.hasCountyFlag = true;
        $scope.resetCountyQuotas = false;
        // If AutoNested
        if($scope.isNested('county')){
            $scope.activateNesting('county', $scope.selectedCountys, $event);
            $scope.applyNesting();
        }
    };

    $scope.addRegionQuota = function(regionFlxValue, $event) {
        // Added for Quota V2
        var qualiId = _.findWhere(masterData, {"masterKey":"regions"});
        if(!regionFlxValue){
            $scope.regQuotaFlag.regionFlxValue = "0";
        }
        if ($scope.sltRegion.length > 0) {
            var removeItem = [];
            _.each($scope.sltRegion, function(regQuota){
                if (regQuota.id) {
                    regQuota.flexible = angular.element("#regionSw").is(":checked");
                    regQuota.flexiblePer = parseInt(regionFlxValue) || 0;
                }
                if ($scope.region) {
                    _.each($scope.region, function(region){
                        if(regQuota.id == region.id) {
                            if((region.hasOwnProperty('number') && region.number != 0) || (region.hasOwnProperty('number') && $scope.liveSurveyEditingStep == 'editStep1' && region.number != 0) || (region.hasOwnProperty('number') && region.number != "" && region.number != 0) || (region.hasOwnProperty('setGrupActive') && region.setGrupActive) ) {
                                region.selected = true;
                                regQuota.qual_id = qualiId.id;  //For Quota V2
                                regQuota.number = parseInt(region.number) || 0;
                                regQuota.hasValidQuotas =  true;
                                regQuota.selected =  true;
                                regQuota.name =  region.name;

                                if ($scope.regQuotaFlag.regionFlxValue) {
                                    regQuota.minimum = parseInt(region.minimum) || 0;
                                    regQuota.maximum = parseInt(region.maximum) || 0;
                                    regQuota.percentage = parseInt(region.per) || 0;
                                }
                                if($scope.regQuotaFlag.regionFlxValue && $scope.liveSurveyEditingStep == 'editStep1' && (region.number == undefined || region.number == null || region.number == '')){
                                    regQuota.minimum = 0;
                                    regQuota.maximum = 0;
                                    regQuota.percentage = 0;
                                }

                            }
                            else {
                                region.selected = false;
                                removeItem.push(region.id);
                            }
                        }
                    });
                }
            });

            //PD-132
            checkQuotaExceedCmplts($scope.region);

            var temp = $scope.sltRegion.filter(function (item) {
               return !(removeItem.indexOf(item.id) !== -1);
            });

            $scope.sltRegion = temp;

            //PD-1402
            
            var matchedForBlankGroupQuota = _.where($scope.groupingCensusRgnModel, {"condditionGroup": true});
            if(matchedForBlankGroupQuota.length >0) {
                removeGroupedUnallocatedQuals(matchedForBlankGroupQuota, $scope.sltRegion, $scope.region, $scope.groupingCensusRgnModel);
            }

            notify({
                message: 'Quotas applied',
                classes: 'alert-success',
                duration: 2000
            });
            $scope.regQuotaFlag.editRegionFlag = true;
            $scope.regQuotaFlag.hasRegionFlag = true;
            $scope.regQuotaFlag.resetReg = false;
            // If AutoNested
            if($scope.isNested('regions')){
                $scope.activateNesting('regions', $scope.region, $event);
                $scope.applyNesting();
            }
        }
    };

    $scope.addRelationshipQuota = function(rlnFlxValue, $event) {
        //PD-961
        if($scope.isGrouped('relationships')) {
            $scope.quotaNumberChange('data', $scope.newrelationModal, $scope.rlnQuotaFlag.rlnFlxValue, 'rlnSw');
        }
        else {
           $scope.quotaNumberChange('data', $scope.relation, $scope.rlnQuotaFlag.rlnFlxValue, 'rlnSw');  
        }
        
        var removeItem = [];
        if(!rlnFlxValue){
            $scope.rlnQuotaFlag.rlnFlxValue = "0";
        }
        
        _.each($scope.sltRelation, function(rlnQuota){
            if (rlnQuota.id) {
                rlnQuota.flexible = angular.element("#rlnSw").is(":checked");
                rlnQuota.flexiblePer = parseInt(rlnFlxValue) || 0;
            }
            if ($scope.relation) {
                _.each($scope.relation, function(relation){
                    if (rlnQuota.id == relation.id) {
                        if((relation.hasOwnProperty('number') && relation.number != 0) || (relation.hasOwnProperty('number') && relation.number != 0 && $scope.liveSurveyEditingStep == 'editStep1') || (relation.hasOwnProperty('number') && relation.number != "" && relation.number != 0) || (relation.hasOwnProperty('setGrupActive') && relation.setGrupActive)) {
                            relation.selected = true;
                            rlnQuota.number = parseInt(relation.number) || 0;
                            // Check that the valid quota exists
                            rlnQuota.hasValidQuotas =  true;
                            rlnQuota.selected =  true;
                            rlnQuota.name =  relation.name;

                            if ($scope.rlnQuotaFlag.rlnFlxValue) {
                                rlnQuota.minimum = parseInt(relation.minimum) || 0;
                                rlnQuota.maximum = parseInt(relation.maximum) || 0;
                                rlnQuota.percentage = parseInt(relation.per) || 0;
                            }

                            if($scope.rlnQuotaFlag.rlnFlxValue && $scope.liveSurveyEditingStep == 'editStep1' && (relation.number == null || relation.number == undefined || relation.number == '')){
                                rlnQuota.minimum = 0;
                                rlnQuota.maximum = 0;
                                rlnQuota.percentage = 0;
                            }
                        }
                        else {
                            relation.selected = false;
                            removeItem.push(relation.id);
                        }
                    }
                });
            }
        });

        //PD-132
        checkQuotaExceedCmplts($scope.relation);

        var temp = $scope.sltRelation.filter(function (item) {
           return !(removeItem.indexOf(item.id) !== -1);
        });

        $scope.sltRelation = temp;

        //PD-961

        var matchedForBlankGroupQuota = _.where($scope.newrelationModal, {"condditionGroup": true});
        if(matchedForBlankGroupQuota.length >0) {
            removeGroupedUnallocatedQuals(matchedForBlankGroupQuota, $scope.sltRelation, $scope.relation, $scope.newrelationModal);
        }

        notify({
            message: 'Quotas applied',
            classes: 'alert-success',
            duration: 2000
        });

        $scope.rlnQuotaFlag.editRlnFlag = true;
        $scope.rlnQuotaFlag.hasRlnFlag = true;
        $scope.rlnQuotaFlag.resetRel = false;
        // If AutoNested
        if($scope.isNested('relationships')){
            $scope.activateNesting('relationships', $scope.relation, $event);
            $scope.applyNesting();
        }
    };

    //PD-321 clear natrep quota
    $scope.clearNatRepQuota = function() {
        //if location selected than check
        if($scope.locationData.selected && $scope.locationData.type == "natrep") {
                $timeout(function() {
                    angular.element('#clrmodel').trigger('click');
                    $scope.locationData.currentClickItem = "regionquota";
                },0);
        }
    };

    $scope.clearCensusRegion = function () {
        _.each($scope.region, function(region){
            region.number = '';
            region.per = '';
            region.minimum = '';
            region.maximum = '';
            if(_.has(region, "setGrupActive")) {
                region.setGrupActive = false; //PD-1402
            }
            
        });
        for (var i in $scope.sltRegion) {
            var id = $scope.sltRegion[i].id;
            $scope.sltRegion[i] = {id: id};
        }
    //PD-1402
        $scope.groupingCensusRgnModel = [];
        censusRgnModelLiveEdit = [];
        removeGroupingOnResetQuota("regions");
        $scope.quotaTotalRemRace = $scope.completesNeeded;
        $scope.regQuotaFlag.editRegionFlag = false;
        $scope.regQuotaFlag.hasRegionFlag = false;
        $scope.regQuotaFlag.resetReg = true;
    };

    $scope.clearCensusDivision = function () {
        _.each($scope.division, function(division){
            division.number = '';
            division.per = '';
            division.minimum = '';
            division.maximum = '';
            if(_.has(division, "setGrupActive")) {
                division.setGrupActive = false; //PD-1402
            }
        });

        for (var i in $scope.sltDivision) {
            var id = $scope.sltDivision[i].id;
            $scope.sltDivision[i] = {id: id};
        }
        //PD-1402
        $scope.groupingDivisionModel = [];
        divisionModelLiveEdit = [];
        removeGroupingOnResetQuota("divisions");

        $scope.quotaTotalRemRace = $scope.completesNeeded;
        $scope.dvsnQuotaFlag.editDivisionFlag = false;
        $scope.dvsnQuotaFlag.hasDivisionFlag = false;
        $scope.dvsnQuotaFlag.resetDivi = true;
    };

    $scope.addEmployementQuota = function(empFlxValue, $event) {
        // Census Rep should be set to false if quota applied manually
        if($scope.censusRepoFlag.hasCensusRepoEmploy){
            $scope.censusRepoFlag.hasCensusRepoEmploy = false;
        }
        //PD-961
        if($scope.isGrouped('employments')) {
           $scope.quotaNumberChange('data', $scope.groupingemploymentModal, $scope.empQuotaFlag.empFlxValue, 'empSw'); 
        }
        else{
            $scope.quotaNumberChange('data', $scope.employement, $scope.empQuotaFlag.empFlxValue, 'empSw');
        }
        
        var removeItem = [];
        if(!empFlxValue){
            $scope.empQuotaFlag.empFlxValue = "0";
        }
        _.each($scope.sltEmployment, function(empQuota){
            if (empQuota.id) {
                empQuota.flexible = angular.element("#empSw").is(":checked");
                empQuota.flexiblePer = parseInt(empFlxValue) || 0;
            }
            if ($scope.employement) {
                _.each($scope.employement, function(employment){
                    if (employment.id == empQuota.id) {
                        if((employment.hasOwnProperty('number') && employment.number != 0) || (employment.hasOwnProperty('number') && employment.number != 0 && $scope.liveSurveyEditingStep == 'editStep1') || (employment.hasOwnProperty('number') && employment.number != ""&& employment.number != 0) || (employment.hasOwnProperty('setGrupActive') && employment.setGrupActive)) {

                            employment.selected = true;
                            empQuota.number = parseInt(employment.number) || 0;
                            empQuota.selected = true;
                            empQuota.name =  employment.name;

                            if ($scope.empQuotaFlag.empFlxValue) {
                                empQuota.minimum = parseInt(employment.minimum) || 0;
                                empQuota.maximum = parseInt(employment.maximum) || 0;
                                empQuota.percentage = parseInt(employment.per) || 0;
                                empQuota.per = parseInt(employment.per) || 0;
                                // Check that the valid quota exists
                                empQuota.hasValidQuotas =  true;
                            }

                            if($scope.empQuotaFlag.empFlxValue && $scope.liveSurveyEditingStep == 'editStep1' && (employment.number == undefined || employment.number == null || employment.number == '')){
                                empQuota.number = 0;
                                empQuota.minimum = 0;
                                empQuota.maximum = 0;
                                empQuota.percentage = 0;
                                empQuota.per = 0;
                            }
                        }
                        else {
                            employment.selected = false;
                            removeItem.push(employment.id);
                        }
                    }
                });
            }
        });

        //PD-132
        checkQuotaExceedCmplts($scope.employement);

        var temp = $scope.sltEmployment.filter(function (item) {
            return !(removeItem.indexOf(item.id) !== -1);
        });
        $scope.sltEmployment = temp;

        //PD-961

        var matchedForBlankGroupQuota = _.where($scope.groupingemploymentModal, {"condditionGroup": true});
        if(matchedForBlankGroupQuota.length >0) {
            removeGroupedUnallocatedQuals(matchedForBlankGroupQuota, $scope.sltEmployment, $scope.employement, $scope.groupingemploymentModal);
        }
        
        notify({
            message: 'Quotas applied',
            classes: 'alert-success',
            duration: 2000
        });
        $scope.empQuotaFlag.editEmpFlag = true;
        $scope.empQuotaFlag.hasEmpFlag = true;
        $scope.empQuotaFlag.resetEmp = false;
        // If AutoNested
        if($scope.isNested('employments')){
            $scope.activateNesting('employments', $scope.employement, $event);
            $scope.applyNesting();
        }
    };

    $scope.addEducationQuota = function(eduFlxValue, $event) {
        // Census Rep should be set to false if quota applied manually
        if($scope.censusRepoFlag.hasCensusRepoEdu){
            $scope.censusRepoFlag.hasCensusRepoEdu = false;
        }
        //PD-961
        if($scope.isGrouped('educations')) {
            $scope.quotaNumberChange('data', $scope.groupingeducationModal, $scope.eduQuotaFlag.eduFlxValue, 'eduSw');
        }
        else {
          $scope.quotaNumberChange('data', $scope.education, $scope.eduQuotaFlag.eduFlxValue, 'eduSw');   
        }
        
        var removeItem = [];
        if(!eduFlxValue){
            $scope.eduQuotaFlag.eduFlxValue = "0";
        }
        
        _.each($scope.sltEducation, function(eduQuota){
            if (eduQuota.id) {
                eduQuota.flexible = angular.element("#eduSw").is(":checked");
                eduQuota.flexiblePer = parseInt($scope.eduQuotaFlag.eduFlxValue) || 0;
            }
            if ($scope.education) {
                _.each($scope.education, function(education){
                    if(education.id == eduQuota.id) {
                        if((education.hasOwnProperty('number') && education.number != 0) || (education.hasOwnProperty('number') && education.number != 0 && $scope.liveSurveyEditingStep == 'editStep1') || (education.hasOwnProperty('number') && education.number != "" && education.number != 0) || (education.hasOwnProperty('setGrupActive') && education.setGrupActive)) {
                            education.selected = true;

                            eduQuota.number = parseInt(education.number) || 0;
                            eduQuota.selected = true;
                            eduQuota.name =  education.name;
                            if ($scope.eduQuotaFlag.eduFlxValue) {
                                eduQuota.minimum = parseInt(education.minimum) || 0;
                                eduQuota.maximum = parseInt(education.maximum) || 0;
                                eduQuota.percentage = parseInt(education.per) || 0;
                                eduQuota.per = parseInt(education.per) || 0;
                                // Check that the valid quota exists
                                eduQuota.hasValidQuotas =  true;
                            }
                            if($scope.eduQuotaFlag.eduFlxValue && $scope.liveSurveyEditingStep == 'editStep1' && (education.number == undefined || education.number == null || education.number == '')){
                                eduQuota.minimum = 0;
                                eduQuota.maximum = 0;
                                eduQuota.percentage = 0;
                                eduQuota.per = 0;
                            }
                        }
                        else {
                            education.selected = false;
                            removeItem.push(education.id);
                        }
                    }
                });
            }
        });

        //PD-132
        checkQuotaExceedCmplts($scope.education);

        var temp = $scope.sltEducation.filter(function (item) {
            return !(removeItem.indexOf(item.id) !== -1);
        });

        $scope.sltEducation = temp;
        //PD-961
        var matchedForBlankGroupQuota = _.where($scope.groupingeducationModal, {"condditionGroup": true});
        if(matchedForBlankGroupQuota.length >0) {
            removeGroupedUnallocatedQuals(matchedForBlankGroupQuota, $scope.sltEducation, $scope.education, $scope.groupingeducationModal);
        }
        

        notify({
            message: 'Quotas applied',
            classes: 'alert-success',
            duration: 2000
        });
        $scope.eduQuotaFlag.editEduFlag = true;
        $scope.eduQuotaFlag.hasEduFlag = true;
        $scope.eduQuotaFlag.resetEdu = false;
        // If AutoNested
        if($scope.isNested('educations')){
            $scope.activateNesting('educations', $scope.education, $event);
            $scope.applyNesting();
        }
    };

    $scope.checkedOption = function(id, selected, optn, rmFromArr, value, number,modalName) {
        _.each(optn, function(elm){
            if (elm.id == id && selected == true) {
                rmFromArr.push({
                    "id": id
                });
            }

            if (elm.id == id && selected == false) {
                
                elm.selected = false;
                unSelectCheckbox(id, rmFromArr, optn, value);

            }  
        });
        $scope.quotaNumberChange(id, optn, value,modalName);
    };

    function unSelectCheckbox(id, arr, optn, value) {
        var tmp = 0;
        _.each(arr, function(elm, index){
            if (elm.id == id) {
                arr.splice(index, 1);
            }
        });
        _.each(optn, function(elm){
            if (elm.selected == true) {

            } else {
                elm.number = '';
                elm.per = '';
                elm.minimum = '';
                elm.maximum = '';
            }

            elm.totalRem = parseInt($scope.completesNeeded - tmp);
        });
    }

    $scope.quotaPercentageChange = function(dataArr, value) {
        if (dataArr) {
            var tmp = 0;
            var mx = 0;
            var min = 0;
            if(!value){
                value = 0;
            }
            _.each(dataArr, function(arr){
                if (arr.minimum != undefined && arr.minimum != null && arr.number != undefined && arr.number != null) {
                    min = min + (arr.number - (arr.number * parseInt(value)) / 100);
                }
            });
            _.each(dataArr, function(arr){
                if (arr.selected == true && arr.number != undefined) {
                    if(arr.number == $scope.completesNeeded){
                        arr.minimum = parseInt($scope.completesNeeded);
                        arr.maximum = parseInt($scope.completesNeeded);
                    }else{
                        arr.minimum = Math.round(arr.number - (arr.number * parseInt(value)) / 100);
                        arr.maximum = Math.min(parseInt(arr.number + (arr.number * parseInt(value)) / 100), Math.round($scope.completesNeeded - (min - arr.minimum)));
                    }
                    tmp = parseInt(tmp + arr.number);
                    /*------if minimum value = 0 then makes it 1--------*/
                    arr.minimum = arr.number > 0 && arr.minimum == 0 ? 1:arr.minimum;
                    /*------if minimum value = 0 then makes it 1--------*/
                    
                    mx = parseInt(mx + arr.maximum);
                    arr.totalRem = $scope.completesNeeded - tmp;
                    //arr.max = mx;
                }     
            });
        }


    };

    function getArrayLength(data) {
        var count = 0;
        for (var i in data) {
            if (data[i].selected == true) {
                count = count + 1;
            }
        }
        return count;
    }

    $scope.clearNumberChange = function(dataArr, index) {
        dataArr[index].per = 0;
        dataArr[index].minimum = 0;
        dataArr[index].maximum = 0;
    };

    $scope.quotaNumberChange = function(id, dataArr, value, modalName) {
        var tmp = 0;
        var mx = 0;
        var min = 0;
        var totalNumber = 0;
        if(!value){
            value = 0;
        }
        _.each(dataArr, function(arr){
            if(arr.minimum != undefined && arr.minimum != null && arr.minimum != '' && arr.number != undefined && arr.number != null && arr.number != '') {
                min = min + (arr.number - (arr.number * parseInt(value)) / 100);
            }
            if(arr.number != undefined && arr.number != null && arr.number != '') {
                totalNumber = parseInt(totalNumber + arr.number);
            }else {
                arr.minimum = '';
                arr.number = '';
                arr.maximum = '';
                arr.per = '';
            }
        });
        
        for (var i in dataArr) {
            if (dataArr[i].selected == true) {
                if(dataArr[i].number != null && dataArr[i].number != undefined && dataArr[i].number != ''){
                    dataArr[i].per = Math.round((dataArr[i].number * 100) / $scope.completesNeeded);
                    dataArr[i].percentage = Math.round((dataArr[i].number * 100) / $scope.completesNeeded);
                    if (angular.element("#" + modalName).is(":checked") == true) {
                        // If Allocation are equal to completes
                        if(dataArr[i].number == $scope.completesNeeded){
                            dataArr[i].minimum = parseInt($scope.completesNeeded);
                            dataArr[i].maximum = parseInt($scope.completesNeeded);
                        }else{
                            dataArr[i].minimum = Math.round(dataArr[i].number - (dataArr[i].number * parseInt(value)) / 100);
                            dataArr[i].maximum = Math.min(parseInt(dataArr[i].number + (dataArr[i].number * parseInt(value)) / 100), Math.round($scope.completesNeeded - (min - dataArr[i].minimum)));
                        }
                        /*------if minimum value = 0 then makes it 1--------*/
                        dataArr[i].minimum = dataArr[i].number > 0 && dataArr[i].minimum == 0 ? 1:dataArr[i].minimum;
                        /*------if minimum value = 0 then makes it 1--------*/
                    } else {
                        dataArr[i].minimum = dataArr[i].number;
                        dataArr[i].maximum = dataArr[i].number;
                    }
                }
            }
        }
        $scope.quotaTotalRemRace = $scope.completesNeeded - totalNumber;
        // When allcoations or percentages increased by total completes
        if($scope.quotaTotalRemRace < 0){
            notify({
                message: "The total number of completes allocated in the quotas doesn't equal the total number of completes remaining",
                classes: 'alert-warning',
                duration: 2000
            });
        }
        quotaChange(dataArr, modalName);
    }; 
    /*it is used to change the number and min,max when insert percentage in quota*/
    $scope.quotaPerChange = function(id, dataArr, value, modalName){
        var tmp = 0;
        var mx = 0;
        var min = 0;
        var totalNumber = 0;
        if(!value){
            value = 0;
        }
        _.each(dataArr, function(arr){
            // To find total min value we need to calc the number first
            if(arr.per != undefined && arr.per != null && arr.per != ''){
                arr.number = Math.round(($scope.completesNeeded * arr.per) / 100);
            }
            else {
                arr.minimum = '';
                arr.number = '';
                arr.maximum = '';
                arr.per = '';
            }
            if (arr.minimum != undefined && arr.minimum != null && arr.minimum != '' && arr.number != undefined && arr.number != null && arr.number != '') {
                min = min + (arr.number - (arr.number * parseInt(value)) / 100);
            }
            if(arr.number != undefined && arr.number != null && arr.number != ''){
                totalNumber += arr.number;
            }
           
        });
        for (var i in dataArr) {
            if (dataArr[i].selected == true) {
                if(dataArr[i].per){
                    dataArr[i].number = Math.round(($scope.completesNeeded * dataArr[i].per) / 100);
                        dataArr[i].per = parseInt(dataArr[i].per);
                        dataArr[i].percentage = parseInt(dataArr[i].per);
                    if (angular.element("#" + modalName).is(":checked") == true) {
                        // If Allocation are equal to completes
                        if(dataArr[i].number == $scope.completesNeeded){
                            dataArr[i].minimum = parseInt($scope.completesNeeded);
                            dataArr[i].maximum = parseInt($scope.completesNeeded);
                        }else{
                            dataArr[i].minimum = Math.round(dataArr[i].number - (dataArr[i].number * parseInt(value)) / 100);
                            dataArr[i].maximum = Math.min(parseInt(dataArr[i].number + (dataArr[i].number * parseInt(value)) / 100), Math.round($scope.completesNeeded - (min - dataArr[i].minimum)));
                        }
                        /*------if minimum value = 0 then makes it 1--------*/
                        dataArr[i].minimum = dataArr[i].number > 0 && dataArr[i].minimum == 0 ? 1:dataArr[i].minimum;
                        /*------if minimum value = 0 then makes it 1--------*/
                    } else {
                        dataArr[i].minimum = dataArr[i].number;
                        dataArr[i].maximum = dataArr[i].number;
                    }
                }else{ 
                        dataArr[i].minimum = '';
                        dataArr[i].number = '';
                        dataArr[i].maximum = '';
                        dataArr[i].per = '';
                }
            }
        }
        $scope.quotaTotalRemRace = $scope.completesNeeded - totalNumber;
        // When allcoations or percentages increased by total completes
        if($scope.quotaTotalRemRace < 0){
            notify({
                message: "The total number of completes allocated in the quotas doesn't equal the total number of completes remaining",
                classes: 'alert-warning',
                duration: 2000
            });
        }
        quotaChange(dataArr,modalName);
    }; 
    /* Show error if allocation inserted is less than fielded */ 
    function quotaChange(dataArr, modalName){
         for (var i in dataArr) {
            if (dataArr[i].selected == true) {
                if((dataArr[i].achieved != undefined || dataArr[i].achieved != null || dataArr[i].achieved != '') && dataArr[i].number < dataArr[i].achieved){
                    notify({
                        message: 'Please change allocation greater than their fielded',
                        classes: 'alert-warning',
                        duration: 2000
                    });
                    if(modalName == "gndr"){
                        $scope.gndrAllocationsLessThanFielded = true;
                    }else if(modalName == "raceSw"){
                        $scope.raceAllocationsLessThanFielded = true;
                    }else if(modalName == "rlnSw"){
                        $scope.rlnAllocationsLessThanFielded = true;
                    }else if(modalName == "eduSw"){
                        $scope.eduAllocationsLessThanFielded = true;
                    }else if(modalName == "empSw"){
                        $scope.empAllocationsLessThanFielded = true;
                    }else if(modalName == "devcSw"){
                        $scope.deviceAllocationsLessThanFielded = true;
                    }else if(modalName == "regionSw"){
                        $scope.rgnAllocationsLessThanFielded = true;
                    }else if(modalName == "divisionSw"){
                        $scope.dvsnAllocationsLessThanFielded = true;
                    }else if(modalName == "csaSw"){
                        $scope.csaAllocationsLessThanFielded = true;
                    }else if(modalName == "msaSw"){
                        $scope.msaAllocationsLessThanFielded = true;
                    }else if(modalName == "countySw"){
                        $scope.countyAllocationsLessThanFielded = true;
                    }else if(modalName == "stateSw"){
                        $scope.stateAllocationsLessThanFielded = true;
                    }else if(modalName == "dmaSw"){
                        $scope.dmaAllocationsLessThanFielded = true;
                    }
                    else if(modalName == "zipcodeSw") {
                        $scope.zipcodeAllocationsLessThanFielded = true;
                    }
                    break;
                }else{
                    $scope.gndrAllocationsLessThanFielded = false;
                    $scope.raceAllocationsLessThanFielded = false;
                    $scope.rlnAllocationsLessThanFielded = false;
                    $scope.chldAllocationsLessThanFielded = false;
                    $scope.eduAllocationsLessThanFielded = false;
                    $scope.empAllocationsLessThanFielded = false;
                    $scope.deviceAllocationsLessThanFielded = false;
                    $scope.rgnAllocationsLessThanFielded = false;
                    $scope.dvsnAllocationsLessThanFielded = false;
                    $scope.dmaAllocationsLessThanFielded = false;
                    $scope.csaAllocationsLessThanFielded = false;
                    $scope.msaAllocationsLessThanFielded = false;
                    $scope.countyAllocationsLessThanFielded = false;
                    $scope.stateAllocationsLessThanFielded = false;
                    $scope.zipcodeAllocationsLessThanFielded = false;
                }
            }    
        }        
    };
    
    function calculateMaxMin(max, id, arr) {
        var min = 0;
        var num = 0;
        for (var i in arr) {
            if (arr[i].selected == true && arr[i].id != id) {
                if (arr[i].minimum) {
                    min = min + arr[i].minimum;
                }

            }
            num = parseInt(num + arr[i].number);

            if (max + min > $scope.completesNeeded) {
                return $scope.completesNeeded - min;
            }

            if (arr[i].selected == true && arr[i].id == id) {
                var sum = parseInt(max + min);

                if (sum > num) {
                    var dif = sum - num;
                    arr[i].maximum = arr[i].maximum - dif;
                    return parseInt(arr[i].maximum);
                } else {
                    return parseInt(arr[i].maximum);
                }

            }
        }

    }

    $scope.openAgeModal = function() {
        $scope.ageTotalRemRace = $scope.completesNeeded;

        if ($scope.ageData.min && $scope.ageData.max && $scope.completesNeeded && $scope.ageTempArr.length >= 0) {
            if ($scope.ageTempArr.length == 0) {
                $scope.ageFlag = false;
                $scope.ageTempArr[0] = {
                    "flexPer": 0
                }
            }
            else {
                $scope.ageFlag = true;
                for (var i in $scope.ageTempArr) {
                    $scope.ageTempArr[i].flexPer = $scope.ageTempArr[i].flexiblePer;
                    $scope.ageTempArr[i].per = parseInt($scope.ageTempArr[i].number * 100 / $scope.completesNeeded);
                    $scope.ageTempArr[i].flexible = $scope.ageQuotaFlag.ageFlx;

                    if($scope.ageTempArr[i].number)
                        $scope.ageTotalRemRace = $scope.ageTotalRemRace - $scope.ageTempArr[i].number;
                }
            }
        }
        
    };

    $scope.addChldNewRow = function(index) {
        var validRange = false;
        //checking min, max, gender and number is present before adding row.
        if($scope.chldTempArr.have[index].number  && $scope.chldTempArr.have[index].max && $scope.chldTempArr.have[index].min != undefined && $scope.chldTempArr.have[index].min != null && $scope.chldTempArr.have[index].gender && (($scope.childAgeUnit.name == "year" && $scope.chldTempArr.have[index].min<=18 && $scope.chldTempArr.have[index].max<=18) || ($scope.childAgeUnit.name == "month" && $scope.chldTempArr.have[index].min <= 48 && $scope.chldTempArr.have[index].max <= 48))){ 
            var breakloop=false;
            _.each($scope.chldTempArr.have, function(values,index){
                if(breakloop == false){
                    if(index !=0 && ($scope.chldTempArr.have[0].gender == $scope.chldTempArr.have[index].gender ||( $scope.chldTempArr.have[0].gender == 3 || $scope.chldTempArr.have[index].gender ==3))){
                        if(($scope.chldTempArr.have[0].min < $scope.chldTempArr.have[index].min || $scope.chldTempArr.have[0].min > $scope.chldTempArr.have[index].max) && ($scope.chldTempArr.have[0].max < $scope.chldTempArr.have[index].min || $scope.chldTempArr.have[0].max > $scope.chldTempArr.have[index].max ) && ($scope.chldTempArr.have[0].min != $scope.chldTempArr.have[0].max)){
                            validRange = true;
                        }else{
                            validRange = false;
                             notify({
                                message: 'Defined ranges are not valid',
                                classes: 'alert-warning',
                                duration: 4000
                               
                            });
                            event.preventDefault();
                            event.stopPropagation();
                            breakloop = true;
                        }
                    }
                }
            });
            if($scope.chldTempArr.have.length ==1 || validRange || !breakloop){
                    $scope.chldTempArr.have.unshift({
                        "id":$scope.chldTempArr.have[0].id,
                        "min": '',
                        "max": '',
                        "gender":'',
                        "number": '',
                        "per": '',
                        "flexiblePer": '0',
                        "flexible": $scope.chldTempArr.have[0].flexible
                    });
                    var num = 0;
                    _.each(_.keys($scope.chldTempArr), function(singleKey){
                        _.each($scope.chldTempArr[singleKey], function(singleRow, rowNo){
                            if(singleRow.number != null && singleRow.number != undefined && singleRow.number != '' && !isNaN(singleRow.number)){
                                num += parseInt(singleRow.number);
                            }
                            singleRow.totalRem = $scope.completesNeeded - num;
                            /*if (singleKey == 'no' || (singleKey == 'have' && rowNo != 0)) {
                                singleRow.min = parseInt(singleRow.max) + parseInt(1) < 100 ? parseInt(singleRow.max) + parseInt(1) : 0;
                                //$scope.chldTempArr[index].max = 17;
                            }*/
                        });
                    });
                $scope.chldTotalRemRace = $scope.completesNeeded - num;
            }
            
        }else{
            if(!$scope.chldTempArr.have[index].gender){
                notify({
                    message: "Please select gender",
                    classes: 'alert-danger',
                    duration: 2000
                })
            }else if(($scope.childAgeUnit.name == "year" && ($scope.chldTempArr.have[0].min >18 || $scope.chldTempArr.have[0].max >18)) || ($scope.childAgeUnit.name == "month" && ($scope.chldTempArr.have[0].min>48 || $scope.chldTempArr.have[0].max>48))){
                    notify({
                        message: "Age can't be greater 18 for years and 48 for months",
                        classes: 'alert-danger',
                        duration: 4000
                    })
            }else{
                notify({
                    message: "Row can not be empty",
                    classes: 'alert-danger',
                    duration: 2000
                })
            }
        }
    };

    $scope.removeChldNewRow = function(index) {
        $scope.chldTempArr.have.splice(index, 1);
        var num = 0;
        _.each(_.keys($scope.chldTempArr), function(singleKey){
            _.each($scope.chldTempArr[singleKey], function(singleRow){
                if(singleRow.number != null && singleRow.number != undefined && singleRow.number != '' && !isNaN(singleRow.number)){
                    num += parseInt(singleRow.number);
                }
            });
        });
        $scope.chldTotalRemRace = $scope.completesNeeded - num;
    };

    $scope.addAgeNewRow = function (index) {
        if ($scope.ageTempArr[index].min < $scope.ageData.min) {
            notify({
                message: "age can\'t less than min age",
                classes: 'alert-danger',
                duration: 3000
            });
            return false;
        }

        if ($scope.ageTempArr[index].max > $scope.ageData.max) {
            notify({
                message: "age can\'t exceed than max age",
                classes: 'alert-danger',
                duration: 2000
            });
            return false;
        }
        if ($scope.ageTempArr[index].number != '' && $scope.ageTempArr[index].number != null && $scope.ageTempArr[index].number != 0) {

            $scope.ageTempArr.unshift({
                "min": '',
                "max": '',
                "number": '',
                "per": '',
                "flexPer": '',
                "flexible": $scope.ageQuotaFlag.ageFlx
            });
            var num = 0;
            for (var i in $scope.ageTempArr) {
                num = parseInt($scope.completesNeeded / $scope.ageTempArr.length);
                num = parseInt(num + $scope.ageTempArr[i].number);
                $scope.ageTempArr[i].totalRem = $scope.completesNeeded - num;

                if (parseInt(i) !== index) {
                    $scope.ageTempArr[index].min = parseInt($scope.ageTempArr[index + 1].max) + parseInt(1) < 100 ? parseInt($scope.ageTempArr[index + 1].max) + parseInt(1) : 0;
                }
            }
        } else {
            notify({
                message: "Row can not be empty",
                classes: 'alert-danger',
                duration: 2000
            });
        }
        var totalNumber = 0;
        for (var j in $scope.ageTempArr) {
            if ($scope.ageTempArr[j].number != undefined && $scope.ageTempArr[j].number != null) {
                totalNumber = parseInt(totalNumber + $scope.ageTempArr[j].number);
            }
        }
        $scope.ageTotalRemRace = $scope.completesNeeded - totalNumber;
    };

    $scope.removeAgeNewRow = function(index) {
        $scope.ageTotalRemRace = $scope.ageTotalRemRace + $scope.ageTempArr[index].number;
        $scope.ageTempArr.splice(index, 1);

        var num = 0;
        for (var i in $scope.ageTempArr) {
            //$scope.ageTempArr[i].number = parseInt($scope.completesNeeded/$scope.ageTempArr.length);
            //$scope.ageTempArr[i].per = parseInt(( $scope.ageTempArr[i].number * 100) / $scope.completesNeeded);
            num = parseInt($scope.completesNeeded / $scope.ageTempArr.length);
            num = parseInt(num + $scope.ageTempArr[i].number);
            $scope.ageTempArr[i].totalRem = $scope.completesNeeded - num;
        }
        //$scope.ageTotalRemRace = $scope.completesNeeded - totalNumber;
    };
    
    $scope.chldNumberChange = function(value, flexibility, rowNum) {
        var num = 0;
        var min = 0;
        var totalNumber = 0;
        if(!flexibility){
            flexibility = 0;
        }
        _.each(_.keys($scope.chldTempArr), function(singlekey){
            _.each($scope.chldTempArr[singlekey], function(singleKeyItem){
                if(singleKeyItem && singleKeyItem.number){
                    min = parseInt(min + parseInt(singleKeyItem.number - (singleKeyItem.number * parseInt(flexibility)) / 100));
                    totalNumber = parseInt(totalNumber + singleKeyItem.number);
                }
            });
        });
        _.each(_.keys($scope.chldTempArr), function(singlekey){
            _.each($scope.chldTempArr[singlekey], function(singleKeyItem){
                singleKeyItem.per = parseInt((singleKeyItem.number * 100) / $scope.completesNeeded); 
                if(angular.element("#chldSw").is(":checked") == true){
                    // if number is equal to completes then min=max=completes
                    if(singleKeyItem.number ==  $scope.completesNeeded){
                        singleKeyItem.minimum = parseInt($scope.completesNeeded);
                        singleKeyItem.maximum = parseInt($scope.completesNeeded);
                    }else{
                        singleKeyItem.minimum = Math.round(singleKeyItem.number - (singleKeyItem.number * parseInt(flexibility)) / 100);
                        singleKeyItem.maximum = Math.min(parseInt(singleKeyItem.number + (singleKeyItem.number * parseInt(flexibility)) / 100), Math.round($scope.completesNeeded - (min - singleKeyItem.minimum)));
                    }
                    /*------if minimum value = 0 then makes it 1--------*/
                    singleKeyItem.minimum = singleKeyItem.number > 0 && singleKeyItem.minimum == 0 ? 1:singleKeyItem.minimum;
                    /*------if minimum value = 0 then makes it 1--------*/
                    // Check weather completes are less than achieved values
                    if(singleKeyItem.number < singleKeyItem.achieved){
                        notify({
                            message: 'Please change allocation greater than their fielded',
                            classes: 'alert-warning',
                            duration: 2000
                        });
                        $scope.chldAllocationsLessThanFielded = true;
                    }else{
                        $scope.chldAllocationsLessThanFielded = false;
                    }
                }else {
                    singleKeyItem.minimum = singleKeyItem.number;
                    singleKeyItem.maximum = singleKeyItem.number;
                } 
                if(singlekey == 'no' || (singlekey == 'have' && rowNum != 0)){
                    if(singleKeyItem.number != null && singleKeyItem.number != undefined && singleKeyItem.number != '' && !isNaN(singleKeyItem.number)){
                        num += parseInt(singleKeyItem.number);
                    }
                }
            });
        });
        if(rowNum != 0){
            num = isNaN(num)? 0:num;
            $scope.chldTotalRemRace = $scope.completesNeeded - num;
        }
        //$scope.chldTotalRemRace = $scope.completesNeeded - num;
        //If user enters allocations or percentage > completes
        if($scope.chldTotalRemRace < 0){
            notify({
                message: "The total number of completes allocated in the quotas doesn't equal the total number of completes remaining",
                classes: 'alert-warning',
                duration: 2000
            });
        }
    };
    // child per change 
    $scope.chldPerChange = function(value, flexibility, rowNum){
        var num = 0;
        var min = 0;
        var totalNumber = 0;
        if(!flexibility){
            flexibility = 0;
        }
        _.each(_.keys($scope.chldTempArr), function(singlekey){
            _.each($scope.chldTempArr[singlekey], function(singleKeyItem){
                singleKeyItem.number = Math.round((singleKeyItem.per * $scope.completesNeeded) / 100);
                if(singleKeyItem && singleKeyItem.number){
                    min = parseInt(min + parseInt(singleKeyItem.number - (singleKeyItem.number * parseInt(flexibility)) / 100));
                    totalNumber = parseInt(totalNumber + singleKeyItem.number);
                }
            });
        });
        _.each(_.keys($scope.chldTempArr), function(singlekey){
            _.each($scope.chldTempArr[singlekey], function(singleKeyItem){
                singleKeyItem.per = parseInt(singleKeyItem.per);
                singleKeyItem.number = Math.round((singleKeyItem.per * $scope.completesNeeded) / 100);
                if(angular.element("#chldSw").is(":checked") == true){
                    // if number is equal to completes then min=max=completes
                    if(singleKeyItem.number ==  $scope.completesNeeded){
                        singleKeyItem.minimum = parseInt($scope.completesNeeded);
                        singleKeyItem.maximum = parseInt($scope.completesNeeded);
                    }else{
                        singleKeyItem.minimum = Math.round(singleKeyItem.number - (singleKeyItem.number * parseInt(flexibility)) / 100);
                        singleKeyItem.maximum = Math.min(parseInt(singleKeyItem.number + (singleKeyItem.number * parseInt(flexibility)) / 100), Math.round($scope.completesNeeded - (min - singleKeyItem.minimum)));
                    }
                    /*------if minimum value = 0 then makes it 1--------*/
                    singleKeyItem.minimum = singleKeyItem.number > 0 && singleKeyItem.minimum == 0 ? 1:singleKeyItem.minimum;
                    /*------if minimum value = 0 then makes it 1--------*/
                    // Check weather completes are less than achieved values
                    if(singleKeyItem.number < singleKeyItem.achieved){
                        notify({
                            message: 'Please change allocation greater than their fielded',
                            classes: 'alert-warning',
                            duration: 2000
                        });
                        $scope.chldAllocationsLessThanFielded = true;
                    }else{
                        $scope.chldAllocationsLessThanFielded = false;
                    }
                }else {
                    singleKeyItem.minimum = singleKeyItem.number;
                    singleKeyItem.maximum = singleKeyItem.number;
                }
                
                if(singlekey == 'no' || (singlekey == 'have' && rowNum != 0)){
                    if(singleKeyItem.number != null && singleKeyItem.number != undefined && singleKeyItem.number != '' && !isNaN(singleKeyItem.number)){
                        num += parseInt(singleKeyItem.number);
                    }
                }
            });
        });
        
        if(rowNum != 0){
            num = isNaN(num)? 0:num;
            $scope.chldTotalRemRace = $scope.completesNeeded - num;
        }
        //$scope.chldTotalRemRace = $scope.completesNeeded - num;
        //If user enters allocations or percentage > completes
        if($scope.chldTotalRemRace < 0){
            notify({
                message: "The total number of completes allocated in the quotas doesn't equal the total number of completes remaining",
                classes: 'alert-warning',
                duration: 2000
            });
        }
    };

    $scope.chldPercentageChange = function(dataArr, value) {
        var min = 0;
        var max = 0;
        if(!value){
            value ="0";
        }
        _.each(_.keys(dataArr), function(singlekey){
            _.each(dataArr[singlekey], function(singleKeyItem){
                if(singleKeyItem && singleKeyItem.number){
                    min += parseInt(singleKeyItem.number - (singleKeyItem.number * parseInt(value)) / 100);
                }
            });
        });
        _.each(_.keys(dataArr), function(singlekey){
            _.each(dataArr[singlekey], function(singleKeyItem){
                if (value) {
                    singleKeyItem.minimum = parseInt(singleKeyItem.number - (singleKeyItem.number * parseInt(value)) / 100);
                    /*------if minimum value = 0 then makes it 1--------*/
                    singleKeyItem.minimum = singleKeyItem.number > 0 && singleKeyItem.minimum == 0 ? 1:singleKeyItem.minimum;
                    /*------if minimum value = 0 then makes it 1--------*/
                    singleKeyItem.maximum = Math.min(parseInt(singleKeyItem.number + (singleKeyItem.number * parseInt(value)) / 100), $scope.completesNeeded - (min - singleKeyItem.minimum));
                } else {
                    singleKeyItem.minimum = '';
                    singleKeyItem.maximum = '';
                }
                singleKeyItem.flexible = $scope.childQuotaFlag.chldFlx;
            });
        });
        
    };

    $scope.ageNumberChange = function(value, flexibility, ageRow) {
        var num = 0;
        var min = 0;
        var totalNumber = 0;
        if(!flexibility){
            flexibility = 0;
        }
        for (var j in $scope.ageTempArr) {
            if (value) {
                if ($scope.ageTempArr[j].minimum != null && $scope.ageTempArr[j].minimum != undefined) {
                    min = min + ($scope.ageTempArr[j].number - ($scope.ageTempArr[j].number * parseInt(flexibility)) / 100);
                }
                if ($scope.ageTempArr[j].number != undefined && $scope.ageTempArr[j].number != null) {
                    totalNumber = parseInt(totalNumber + $scope.ageTempArr[j].number);
                }
            }
        }
        for (var i in $scope.ageTempArr) {
            if (value) {
                $scope.ageTempArr[i].per = Math.round(($scope.ageTempArr[i].number * 100) / $scope.completesNeeded);
                if (angular.element("#age").is(":checked") == true) {
                    // if number is equal to completes then min=max=completes
                    if($scope.ageTempArr[i].number ==  $scope.completesNeeded){
                        $scope.ageTempArr[i].minimum = parseInt($scope.completesNeeded);
                        $scope.ageTempArr[i].maximum = parseInt($scope.completesNeeded);
                    }else{
                        $scope.ageTempArr[i].minimum = Math.round($scope.ageTempArr[i].number - ($scope.ageTempArr[i].number * parseInt(flexibility)) / 100);
                        $scope.ageTempArr[i].maximum = Math.min(parseInt($scope.ageTempArr[i].number + ($scope.ageTempArr[i].number * parseInt(flexibility)) / 100), Math.round($scope.completesNeeded - (min - $scope.ageTempArr[i].minimum)));
                    }
                    /*------if minimum value = 0 then makes it 1--------*/
                    $scope.ageTempArr[i].minimum = $scope.ageTempArr[i].number > 0 && $scope.ageTempArr[i].minimum == 0 ? 1:$scope.ageTempArr[i].minimum;
                    /*------if minimum value = 0 then makes it 1--------*/
                } else {
                    $scope.ageTempArr[i].minimum = $scope.ageTempArr[i].number;
                    $scope.ageTempArr[i].maximum = $scope.ageTempArr[i].number;
                }
                num = isNaN(parseInt(num + $scope.ageTempArr[i].number))? 0:parseInt(num + $scope.ageTempArr[i].number);

                // Check weather completes are less than achieved values
                if($scope.ageTempArr[i].number < $scope.ageTempArr[i].achieved){
                    notify({
                        message: 'Please change allocation greater than their fielded',
                        classes: 'alert-warning',
                        duration: 2000
                    });
                    $scope.ageAllocationsLessThanFielded = true;
                }else{
                    $scope.ageAllocationsLessThanFielded = false;
                }
            } else {
                $scope.ageTempArr[i].per = '';
                $scope.ageTempArr[i].minimum = '';
                $scope.ageTempArr[i].maximum = '';
            }
            //$scope.ageTempArr[i].maximum = minMaxForAgeIncome($scope.ageTempArr[i].maximum, i, $scope.ageTempArr);
        }
        if(ageRow != 0){
            $scope.ageTotalRemRace = $scope.completesNeeded - num;
        }
        //$scope.ageTotalRemRace = $scope.completesNeeded - num;
        //If user enters allocations or percentage > completes
        if($scope.ageTotalRemRace < 0){
            notify({
                message: "The total number of completes allocated in the quotas doesn't equal the total number of completes remaining",
                classes: 'alert-warning',
                duration: 2000
            });
        }
    };
    /*it is use insert percentage to show min,max and number*/
    $scope.agePerChange = function(value, flexibility, ageRow){
        var num = 0;
        var min = 0;
        var totalNumber = 0;
        if(!flexibility){
            flexibility = 0;
        }
        for (var j in $scope.ageTempArr) {
            if (value) {
                $scope.ageTempArr[j].number = Math.round(($scope.ageTempArr[j].per * $scope.completesNeeded) / 100);
                if ($scope.ageTempArr[j].minimum != null && $scope.ageTempArr[j].minimum != undefined) {
                    min = min + ($scope.ageTempArr[j].number - ($scope.ageTempArr[j].number * parseInt(flexibility)) / 100);
                }
                if ($scope.ageTempArr[j].number != undefined && $scope.ageTempArr[j].number != null) {
                    totalNumber = parseInt(totalNumber + $scope.ageTempArr[j].number);
                }
            }
        }
        for (var i in $scope.ageTempArr) {
            if (value) {
                $scope.ageTempArr[i].number = Math.round(($scope.ageTempArr[i].per * $scope.completesNeeded) / 100);
                  $scope.ageTempArr[i].per = parseInt($scope.ageTempArr[i].per);
                 
                if (angular.element("#age").is(":checked") == true) {
                    // if number is equal to completes then min=max=completes
                    if($scope.ageTempArr[i].number == parseInt($scope.completesNeeded)){
                        $scope.ageTempArr[i].minimum = parseInt($scope.completesNeeded);
                        $scope.ageTempArr[i].maximum = parseInt($scope.completesNeeded);
                    }else{
                        $scope.ageTempArr[i].minimum = Math.round($scope.ageTempArr[i].number - ($scope.ageTempArr[i].number * parseInt(flexibility)) / 100);
                        $scope.ageTempArr[i].maximum = Math.min(parseInt($scope.ageTempArr[i].number + ($scope.ageTempArr[i].number * parseInt(flexibility)) / 100), Math.round($scope.completesNeeded - (min - $scope.ageTempArr[i].minimum)));
                    }
                    /*------if minimum value = 0 then makes it 1--------*/
                    $scope.ageTempArr[i].minimum = $scope.ageTempArr[i].number > 0 && $scope.ageTempArr[i].minimum == 0 ? 1:$scope.ageTempArr[i].minimum;
                    /*------if minimum value = 0 then makes it 1--------*/
                } else {
                    $scope.ageTempArr[i].minimum = $scope.ageTempArr[i].number;
                    $scope.ageTempArr[i].maximum = $scope.ageTempArr[i].number;
                }
                num = isNaN(parseInt(num + $scope.ageTempArr[i].number))?0:parseInt(num + $scope.ageTempArr[i].number);

                // Check weather completes are less than achieved values
                if($scope.ageTempArr[i].number < $scope.ageTempArr[i].achieved){
                    notify({
                        message: 'Please change allocation greater than their fielded',
                        classes: 'alert-warning',
                        duration: 2000
                    });
                    $scope.ageAllocationsLessThanFielded = true;
                }else{
                    $scope.ageAllocationsLessThanFielded = false;
                }
            } else {
                $scope.ageTempArr[i].per = '';
                $scope.ageTempArr[i].minimum = '';
                $scope.ageTempArr[i].maximum = '';
            }
            //$scope.ageTempArr[i].maximum = minMaxForAgeIncome($scope.ageTempArr[i].maximum, i, $scope.ageTempArr);
        }
        if(ageRow != 0){
            $scope.ageTotalRemRace = $scope.completesNeeded - num;
        }
        //If user enters allocations or percentage > completes
        if($scope.ageTotalRemRace < 0){
            notify({
                message: "The total number of completes allocated in the quotas doesn't equal the total number of completes remaining",
                classes: 'alert-warning',
                duration: 2000
            });
        }
    };

    $scope.agePercentageChange = function(dataArr, value) {
        var min = 0;
        var max = 0;
        if(!value){
            value = "0";
        }
        for (var j in dataArr) {
            if(value){
                if ($scope.ageTempArr[j].minimum != null && $scope.ageTempArr[j].minimum != undefined) {
                    min = min + ($scope.ageTempArr[j].number - ($scope.ageTempArr[j].number * parseInt(value)) / 100);
                }
            }
        }
        for (var i in dataArr) {
            if (value) {
                if($scope.ageTempArr[i].number == parseInt($scope.completesNeeded)){
                    $scope.ageTempArr[i].minimum = parseInt($scope.completesNeeded);
                    $scope.ageTempArr[i].maximum = parseInt($scope.completesNeeded);
                }else{
                    $scope.ageTempArr[i].minimum = $scope.ageTempArr[i].number == $scope.completesNeeded? parseInt($scope.completesNeeded) : Math.round($scope.ageTempArr[i].number - ($scope.ageTempArr[i].number * parseInt(value)) / 100);
                    // if number is equal to completes then min=max=completes
                    $scope.ageTempArr[i].maximum = $scope.ageTempArr[i].number == $scope.completesNeeded? parseInt($scope.completesNeeded) : Math.min(parseInt($scope.ageTempArr[i].number + ($scope.ageTempArr[i].number * parseInt(value)) / 100), Math.round($scope.completesNeeded - (min - $scope.ageTempArr[i].minimum)));
                }
                /*------if minimum value = 0 then makes it 1--------*/
                $scope.ageTempArr[i].minimum = $scope.ageTempArr[i].number > 0 && $scope.ageTempArr[i].minimum == 0 ? 1:$scope.ageTempArr[i].minimum;
                /*------if minimum value = 0 then makes it 1--------*/
                
                $scope.ageTempArr[i].flexible = $scope.ageQuotaFlag.ageFlx;
            } else {
                $scope.ageTempArr[i].minimum = '';
                $scope.ageTempArr[i].maximum = '';
            }
        }
    };


    $scope.addIncomeNewRow = function(index) {
        if(isNaN(parseInt($scope.incomeTempArr[index].min)) || isNaN(parseInt($scope.incomeTempArr[index ].max))) {
            notify({
                message: "Please insert proper values",
                classes: 'alert-danger',
                duration: 2000
            });
            return false;
        }
        else {
            $scope.incomeTempArr[index].min = parseInt($scope.incomeTempArr[index].min);
            $scope.incomeTempArr[index].max = parseInt($scope.incomeTempArr[index].max);
        }

        if($scope.incomeTempArr[index ].min < $scope.houseHoldIncome.min) {
            notify({
                message: "income cann\'t less than min household income",
                classes: 'alert-danger',
                duration: 2000
            });
            return false;
        }

        if($scope.incomeTempArr[index ].max > $scope.houseHoldIncome.max) {
            notify({
                message: "income cann\'t exceed than max household income",
                classes: 'alert-danger',
                duration: 2000
            });
            return false;
        }

        if($scope.incomeTempArr[index].number != '' && $scope.incomeTempArr[index].number != null && $scope.incomeTempArr[index].number != 0){
            $scope.incomeTempArr.unshift({
                "min": '',
                "max": '',
                "number": '',
                "per": '',
                "flexPer": '0',
                "flexible": $scope.incFlx
            });

        var num = 0;
        for (var i in $scope.incomeTempArr) {
            //$scope.incomeTempArr[i].number = parseInt($scope.completesNeeded/$scope.incomeTempArr.length);
            //$scope.incomeTempArr[i].per = parseInt(( $scope.incomeTempArr[i].number * 100) / $scope.completesNeeded);
            num = parseInt($scope.completesNeeded / $scope.incomeTempArr.length);
            num = parseInt(num + $scope.incomeTempArr[i].number);
            $scope.incomeTempArr[i].totalRem = $scope.completesNeeded - num;

            if (parseInt(i) !== index) {
                $scope.incomeTempArr[index].min = parseInt($scope.incomeTempArr[index].max) + parseInt(1);
                $scope.incomeTempArr[index].max = parseInt($scope.incomeTempArr[index].min + 1);
            }
        }
        var totalNumber = 0;
        for (var j in $scope.incomeTempArr) {
            if ($scope.incomeTempArr[j].number != undefined && $scope.incomeTempArr[j].number != null) {
                totalNumber = parseInt(totalNumber + $scope.incomeTempArr[j].number);
            }
        }
        $scope.incomeTotalRemRace = $scope.completesNeeded - totalNumber;
        } else {
            notify({
                message: "Row can not be empty",
                classes: 'alert-danger',
                duration: 2000
            })
        }
    };

    $scope.removeIncomeNewRow = function(index) {
        $scope.incomeTotalRemRace += parseInt($scope.incomeTempArr[index].number);
        $scope.incomeTempArr.splice(index, 1);
        var num = 0;
        for (var i in $scope.incomeTempArr) {
            //$scope.incomeTempArr[i].number = parseInt($scope.completesNeeded/$scope.incomeTempArr.length);
            //$scope.incomeTempArr[i].per = parseInt(( $scope.incomeTempArr[i].number * 100) / $scope.completesNeeded);
            num = parseInt($scope.completesNeeded / $scope.incomeTempArr.length);
            num = parseInt(num + $scope.incomeTempArr[i].number);
            //$scope.incomeTempArr[i].totalRem = $scope.completesNeeded - num;
        }
        //$scope.incomeTotalRemRace = $scope.completesNeeded - totalNumber;
    };


    function minMaxForAgeIncome(max, index, arr) {
        var min = 0;
        var num = 0;
        for (var i in arr) {
            if (i != index) {
                if (arr[i].minimum) {
                    min = min + arr[i].minimum;

                }

            }
            num = parseInt(num + arr[i].number);

            if (max + min > $scope.completesNeeded) {
                return $scope.completesNeeded - min;
            }

            if (i == index) {
                var sum = parseInt(max + min);

                if (sum > num) {
                    var dif = sum - num;
                    arr[i].maximum = arr[i].maximum - dif;
                    return parseInt(arr[i].maximum);
                } else {
                    return parseInt(arr[i].maximum);
                }

            }
        }

    }

    $scope.openIncomeModal = function() {
        $scope.incomeTotalRemRace = $scope.completesNeeded;
        var condition1 = $scope.houseHoldIncome.min !== '' && $scope.houseHoldIncome.min !== undefined && $scope.houseHoldIncome.min !== null;

        if (condition1 && $scope.houseHoldIncome.max && $scope.completesNeeded && $scope.incomeTempArr.length >= 0) {
            if ($scope.incomeTempArr.length == 0) {
                $scope.incmFlag = false;
                $scope.incomeTempArr[0] = {
                    "flexPer": 0
                };
            }
            else {
                $scope.incmFlag = true;
                for (var i in $scope.incomeTempArr) {
                    $scope.incomeTempArr[i].flexPer = $scope.incomeTempArr[i].flexiblePer;
                    //$scope.incomeTempArr[i].flexiblePer = $scope.incomeTempArr[i].flexiblePer;
                    $scope.incomeTempArr[i].per = parseInt($scope.incomeTempArr[i].number * 100 / $scope.completesNeeded);
                    $scope.incomeTempArr[i].flexible = $scope.incFlx;
                    if($scope.incomeTempArr[i].number)
                        $scope.incomeTotalRemRace = $scope.incomeTotalRemRace - $scope.incomeTempArr[i].number;
                }
            }
        }
    };

    $scope.deleteAgeQuotas = function() {
        if ($scope.ageTempArr.length > 0) {
            notify({
                message: "Are you sure you want to delete all fill in number of quotas?",
                classes: 'alert-danger',
                duration: 2000
            });
        }
    };

    $scope.deleteIncomeQuotas = function() {
        if ($scope.incomeTempArr.length > 0) {
            notify({
                message: "Are you sure you want to delete all fill in number of quotas?",
                classes: 'alert-danger',
                duration: 2000
            });
        }
    };

    $scope.incomeNumberChange = function(value, index, Flexibility) {
        var num = 0;
        var min = 0;
        var totalNumber = 0;
        if(!Flexibility){
            Flexibility = "0";
        }
        angular.forEach($scope.incomeTempArr, function(income){
            if (value) {
                if (income.minimum != null && income.minimum != undefined) {
                    min = min + (income.number - (income.number * parseInt(Flexibility)) / 100);
                }
                if (income.number != undefined && income.number != null) {
                    totalNumber += parseInt(income.number);
                }
            }
        });
        angular.forEach($scope.incomeTempArr, function(income){
            if(income.hasOwnProperty('number') && income.number != 0 &&
                income.number != undefined && income.number != null) {
                income.per = Math.round((income.number * 100) / $scope.completesNeeded);
                if (angular.element("#inc").is(":checked") == true) {
                    // if number is equal to completes then min=max=completes
                    if(income.number == parseInt($scope.completesNeeded)){
                        income.minimum = parseInt($scope.completesNeeded);
                        income.maximum = parseInt($scope.completesNeeded);
                    }else{
                        income.minimum = Math.round(income.number - (income.number * parseInt(Flexibility)) / 100);
                        income.maximum = Math.min(parseInt(income.number + (income.number * parseInt(Flexibility)) / 100), Math.round($scope.completesNeeded - (min - income.minimum)));
                    }
                    /*------if minimum value = 0 then makes it 1--------*/
                    income.minimum = income.number > 0 && income.minimum == 0 ? 1:income.minimum;
                    /*------if minimum value = 0 then makes it 1--------*/
                } else {
                    income.minimum = income.number;
                    income.maximum = income.number;
                }
                num = isNaN(parseInt(num + income.number))?0:parseInt(num + income.number);
                // Check weather completes are less than achieved values
                if(income.number < income.achieved){
                    notify({
                        message: 'Please change allocation greater than their fielded',
                        classes: 'alert-warning',
                        duration: 2000
                    });
                    $scope.incomeAllocationsLessThanFielded = true;
                }else{
                    $scope.incomeAllocationsLessThanFielded = false;
                }
            }
            else {
                income.per = '';
                income.minimum = '';
                income.maximum = '';
            }
        });
        if(index != 0){
            $scope.incomeTotalRemRace = $scope.completesNeeded - num;
        }
        //If user enters allocations or percentage > completes
        if($scope.incomeTotalRemRace < 0){
            notify({
                message: "The total number of completes allocated in the quotas doesn't equal the total number of completes remaining",
                classes: 'alert-warning',
                duration: 2000
            });
        }
    };
    /*It is used for change quantity and min,max of income quota when enter percentage  */
    $scope.incomePerChange = function(value, index,Flexibility){
        var num = 0;
        var min = 0;
        var totalNumber = 0;
        if(!Flexibility){
            Flexibility = "0";
        }
        for (var j in $scope.incomeTempArr) {
            if (value) {
                $scope.incomeTempArr[j].number = Math.round(($scope.incomeTempArr[j].per * $scope.completesNeeded) / 100);
                if ($scope.incomeTempArr[j].minimum != null && $scope.incomeTempArr[j].minimum != undefined) {
                    min = min + ($scope.incomeTempArr[j].number - ($scope.incomeTempArr[j].number * parseInt(Flexibility)) / 100);
                }
                if($scope.incomeTempArr[j].number != undefined && $scope.incomeTempArr[j].number != null) {
                    totalNumber = parseInt(totalNumber + $scope.incomeTempArr[j].number);
                }
            }
        }
        for (var i in $scope.incomeTempArr) {
            if($scope.incomeTempArr[i].hasOwnProperty('per') && $scope.incomeTempArr[i].per != 0 &&
                $scope.incomeTempArr[i].per != undefined && $scope.incomeTempArr[i].number != null) {
                $scope.incomeTempArr[i].number = Math.round(($scope.incomeTempArr[i].per * $scope.completesNeeded) / 100);
                $scope.incomeTempArr[i].per = parseInt($scope.incomeTempArr[i].per);
               
                if (angular.element("#inc").is(":checked") == true) {
                    // if number is equal to completes then min=max=completes
                    if($scope.incomeTempArr[i].number == parseInt($scope.completesNeeded)){
                        $scope.incomeTempArr[i].minimum = parseInt($scope.completesNeeded);
                        $scope.incomeTempArr[i].maximum = parseInt($scope.completesNeeded);
                    }else{
                        $scope.incomeTempArr[i].minimum = Math.round($scope.incomeTempArr[i].number - ($scope.incomeTempArr[i].number * parseInt(Flexibility)) / 100);
                        $scope.incomeTempArr[i].maximum = Math.min(parseInt($scope.incomeTempArr[i].number + ($scope.incomeTempArr[i].number * parseInt(Flexibility)) / 100), Math.round($scope.completesNeeded - (min - $scope.incomeTempArr[i].minimum)));
                    }
                    /*------if minimum value = 0 then makes it 1--------*/
                    $scope.incomeTempArr[i].minimum = $scope.incomeTempArr[i].number > 0 && $scope.incomeTempArr[i].minimum == 0 ? 1:$scope.incomeTempArr[i].minimum;
                    /*------if minimum value = 0 then makes it 1--------*/
                } else {
                    $scope.incomeTempArr[i].minimum = $scope.incomeTempArr[i].number;
                    $scope.incomeTempArr[i].maximum = $scope.incomeTempArr[i].number;
                }
                num = isNaN(parseInt(num + $scope.incomeTempArr[i].number))?0:parseInt(num + $scope.incomeTempArr[i].number);
                // Check weather completes are less than achieved values
                if($scope.incomeTempArr[i].number < $scope.incomeTempArr[i].achieved){
                    notify({
                        message: 'Please change allocation greater than their fielded',
                        classes: 'alert-warning',
                        duration: 2000
                    });
                    $scope.incomeAllocationsLessThanFielded = true;
                }else{
                    $scope.incomeAllocationsLessThanFielded = false;
                }
            }
            else {
                $scope.incomeTempArr[i].number = '';
                $scope.incomeTempArr[i].minimum = '';
                $scope.incomeTempArr[i].maximum = '';
            }
        }
        if(index != 0){
            $scope.incomeTotalRemRace = $scope.completesNeeded - num;
        }
        //If user enters allocations or percentage > completes
        if($scope.incomeTotalRemRace < 0){
            notify({
                message: "The total number of completes allocated in the quotas doesn't equal the total number of completes remaining",
                classes: 'alert-warning',
                duration: 2000
            });
        }
    }
    $scope.incomePercentageChange = function(dataArr, value) {
        var min = 0;
        var max = 0;
        if(!value){
            value = "0";
        }
        for (var j in dataArr){
            if (value) {
                if ($scope.incomeTempArr[j].minimum != null && $scope.incomeTempArr[j].minimum != undefined) {
                    min = min + ($scope.incomeTempArr[j].number - ($scope.incomeTempArr[j].number * parseInt(value)) / 100);
                }
            }
        }
        for (var i in dataArr) {
            if(value != '' || value != undefined || value != null && !isNaN(value)){
                if($scope.incomeTempArr[i].number == parseInt($scope.completesNeeded)){
                    $scope.incomeTempArr[i].minimum = parseInt($scope.completesNeeded);
                    $scope.incomeTempArr[i].maximum = parseInt($scope.completesNeeded);
                }else{
                    $scope.incomeTempArr[i].minimum = parseInt($scope.incomeTempArr[i].number - ($scope.incomeTempArr[i].number * parseInt(value)) / 100);
                    $scope.incomeTempArr[i].maximum = Math.min(parseInt($scope.incomeTempArr[i].number + ($scope.incomeTempArr[i].number * parseInt(value)) / 100), Math.round($scope.completesNeeded - (min - $scope.incomeTempArr[i].minimum)));
                }
                /*------if minimum value = 0 then makes it 1--------*/
                $scope.incomeTempArr[i].minimum = $scope.incomeTempArr[i].number > 0 && $scope.incomeTempArr[i].minimum == 0 ? 1:$scope.incomeTempArr[i].minimum;
                /*------if minimum value = 0 then makes it 1--------*/
                
                $scope.incomeTempArr[i].flexible = $scope.incFlx;
            } else {
                $scope.incomeTempArr[i].minimum = '';
                $scope.incomeTempArr[i].maximum = '';
            }
            //min = parseInt(min + $scope.incomeTempArr[i].minimum);
            //max = parseInt(max + $scope.incomeTempArr[i].maximum);
            //$scope.incomeTempArr[i].maximum = minMaxForAgeIncome( $scope.incomeTempArr[i].maximum, i,  $scope.incomeTempArr);

        }
       // $scope.incomeFlxValue.vlue = value;
    };

    $scope.setRaceFlex = function(element, race, raceFlxValue) {
        if(angular.element("#raceSw").is(":checked") != true) {
            $scope.raceQuotaFlag.raceFlx = false;
            for (var i in $scope.race) {
                $scope.race[i].maximum = $scope.race[i].number;
                $scope.race[i].minimum = $scope.race[i].number;
                //$scope.raceQuotaFlag.raceFlxValue = '';
            }
        } else {
            $scope.raceQuotaFlag.raceFlx = true;
            $scope.quotaPercentageChange(race, raceFlxValue);
        }
    };

    $scope.setRbFlex = function(element, raceBera, rbFlxValue) {
        if(angular.element("#rbSw").is(":checked") != true) {
            $scope.rbFlx = false;
            for (var i in $scope.raceBera) {
                $scope.raceBera[i].maximum = $scope.raceBera[i].number;
                $scope.raceBera[i].minimum = $scope.raceBera[i].number;
                //$scope.raceQuotaFlag.raceFlxValue = '';
            }
        } else {
            $scope.rbFlx = true;
            $scope.quotaPercentageChange(raceBera, rbFlxValue);
        }
    };

    $scope.setHispanicFlex = function(element, hispanic, hispanicFlxValue) {
        if(angular.element("#hispanicSw").is(":checked") != true) {
            $scope.hisQuotaFlag.hispanicFlx = false;
            for(var i in $scope.hispanic) {
                $scope.hispanic[i].maximum = $scope.hispanic[i].number;
                $scope.hispanic[i].minimum = $scope.hispanic[i].number;
                //$scope.raceQuotaFlag.raceFlxValue = '';
            }
        } else {
            $scope.hisQuotaFlag.hispanicFlx = true;
            $scope.quotaPercentageChange(hispanic, hispanicFlxValue);
        }
    };

    $scope.setGenderFlex = function(element, genderInfo, gndrFlxValue) {
        if (angular.element("#gndr").is(":checked") != true) {
            $scope.gndrQuotaFlag.gndrFlx = false;
            for (var i in $scope.genderInfo) {
                $scope.genderInfo[i].maximum = $scope.genderInfo[i].number;
                $scope.genderInfo[i].minimum = $scope.genderInfo[i].number;
                //$scope.gndrFlxValue = 20;
            }
        } else {
            $scope.gndrQuotaFlag.gndrFlx = true;
            $scope.quotaPercentageChange(genderInfo, gndrFlxValue);
        }
    };

    $scope.setStateFlex = function(element, selectedStates, flxValue) {
        if (angular.element("#stateSw").is(":checked") != true) {
            $scope.stateFlexibility.isFlexible = false;
            for (var i in $scope.selectedStates) {
                $scope.selectedStates[i].maximum = $scope.selectedStates[i].number;
                $scope.selectedStates[i].minimum = $scope.selectedStates[i].number;
                //$scope.gndrFlxValue = 20;
            }
        } else {
            $scope.stateFlexibility.isFlexible = true;
            $scope.quotaPercentageChange(selectedStates, flxValue);
        }
    };
    $scope.setDmaFlex = function(element, selectedDMAs, flxValue) {
        if (angular.element("#dmaSw").is(":checked") != true) {
            $scope.dmaFlexibility.isFlexible = false;
            for (var i in $scope.selectedDMAs) {
                $scope.selectedDMAs[i].maximum = $scope.selectedDMAs[i].number;
                $scope.selectedDMAs[i].minimum = $scope.selectedDMAs[i].number;
                //$scope.gndrFlxValue = 20;
            }
        } else {
            $scope.dmaFlexibility.isFlexible = true;
            $scope.quotaPercentageChange(selectedDMAs, flxValue);
        }
    };
    $scope.setCsaFlex = function(element, selectedCSAs, flxValue) {
        if (angular.element("#csaSw").is(":checked") != true) {
            $scope.csaFlexibility.isFlexible = false;
            for (var i in $scope.selectedCSAs) {
                $scope.selectedCSAs[i].maximum = $scope.selectedCSAs[i].number;
                $scope.selectedCSAs[i].minimum = $scope.selectedCSAs[i].number;
                //$scope.gndrFlxValue = 20;
            }
        } else {
            $scope.csaFlexibility.isFlexible = true;
            $scope.quotaPercentageChange(selectedCSAs, flxValue);
        }
    };
    $scope.setMsaFlex = function(element, selectedMSAs, flxValue) {
        if (angular.element("#msaSw").is(":checked") != true) {
            $scope.msaFlexibility.isFlexible = false;
            for (var i in $scope.selectedMSAs) {
                $scope.selectedMSAs[i].maximum = $scope.selectedMSAs[i].number;
                $scope.selectedMSAs[i].minimum = $scope.selectedMSAs[i].number;
                //$scope.gndrFlxValue = 20;
            }
        } else {
            $scope.msaFlexibility.isFlexible = true;
            $scope.quotaPercentageChange(selectedMSAs, flxValue);
        }
    };
    $scope.setCountyFlex = function(element, selectedCountys, flxValue) {
        if (angular.element("#countySw").is(":checked") != true) {
            $scope.countyFlexibility.isFlexible = false;
            for (var i in $scope.selectedCountys) {
                $scope.selectedCountys[i].maximum = $scope.selectedCountys[i].number;
                $scope.selectedCountys[i].minimum = $scope.selectedCountys[i].number;
                //$scope.gndrFlxValue = 20;
            }
        } else {
            $scope.countyFlexibility.isFlexible = true;
            $scope.quotaPercentageChange(selectedCountys, flxValue);
        }
    };

    $scope.setAgeFlex = function(element, ageTempArr, ageFlxValue) {
        if (angular.element("#age").is(":checked") != true) {
            $scope.ageQuotaFlag.ageFlx = false;
            for (var i in $scope.ageTempArr) {
                $scope.ageTempArr[i].minimum = $scope.ageTempArr[i].number;
                $scope.ageTempArr[i].maximum = $scope.ageTempArr[i].number;
                $scope.ageTempArr[i].flexible = $scope.ageQuotaFlag.ageFlx;
            }
        } else {
            $scope.ageQuotaFlag.ageFlx = true;
            $scope.agePercentageChange(ageTempArr, ageFlxValue);
        }
    };

    $scope.setDivisionFlex = function(element, division, divisionFlxValue) {
        if (angular.element("#divisionSw").is(":checked") != true) {
            $scope.dvsnQuotaFlag.divisionFlx = false;
            for (var i in $scope.division) {
                $scope.division[i].maximum = $scope.division[i].number;
                $scope.division[i].minimum = $scope.division[i].number;
            }
        } else {
            $scope.dvsnQuotaFlag.divisionFlx = true;
            $scope.quotaPercentageChange(division, divisionFlxValue);
        }
    };

    $scope.setRegionFlex = function(element, region, regionFlxValue) {
        if (angular.element("#regionSw").is(":checked") != true) {
            $scope.regQuotaFlag.regionFlx = false;
            for (var i in $scope.region) {
                $scope.region[i].maximum = $scope.region[i].number;
                $scope.region[i].minimum = $scope.region[i].number;
            }
        } else {
            $scope.regQuotaFlag.regionFlx = true;
            $scope.quotaPercentageChange(region, regionFlxValue);
        }
    };

    $scope.setIncomeFlex = function(element, incomeTempArr, incomeFlxValue) {
        if (angular.element("#inc").is(":checked") != true) {
            $scope.incFlx = false;
            for (var i in $scope.incomeTempArr) {
                $scope.incomeTempArr[i].minimum = $scope.incomeTempArr[i].number;
                $scope.incomeTempArr[i].maximum = $scope.incomeTempArr[i].number;
                $scope.incomeTempArr[i].flexible = $scope.incFlx;
            }
        }else{
            $scope.incFlx = true;
            $scope.incomePercentageChange(incomeTempArr, incomeFlxValue);
        }
    };

    $scope.setRelationFlex = function(element, relation, rlnFlxValue) {
        if (angular.element("#rlnSw").is(":checked") != true) {
            $scope.rlnQuotaFlag.rlnFlx = false;
            for (var i in $scope.relation) {
                $scope.relation[i].maximum = $scope.relation[i].number;
                $scope.relation[i].minimum = $scope.relation[i].number;
            }
        } else {
            $scope.rlnQuotaFlag.rlnFlx = true;
            $scope.quotaPercentageChange(relation, rlnFlxValue);
        }
    };

    $scope.setChldFlex = function(element, chldTempArr, chldFlxValue) {
        if (angular.element("#chldSw").is(":checked") != true) {
            $scope.childQuotaFlag.chldFlx = false;
            for (var i in $scope.chldTempArr) {
                $scope.chldTempArr[i].maximum = $scope.chldTempArr[i].number;
                $scope.chldTempArr[i].minimum = $scope.chldTempArr[i].number;
            }
        } else {
            $scope.childQuotaFlag.chldFlx = true;
            $scope.chldPercentageChange(chldTempArr, chldFlxValue);
        }
    };

    $scope.setEmployementFlex = function(element, employement, empFlxValue) {
        if (angular.element("#empSw").is(":checked") != true) {
            $scope.empQuotaFlag.empFlx = false;
            for (var i in $scope.employement) {
                $scope.employement[i].maximum = $scope.employement[i].number;
                $scope.employement[i].minimum = $scope.employement[i].number;
            }
        } else {
            $scope.empQuotaFlag.empFlx = true;
            $scope.quotaPercentageChange(employement, empFlxValue);
        }
    };

    $scope.setEducationFlex = function(element, education, eduFlxValue) {
        if (angular.element("#eduSw").is(":checked") != true) {
            $scope.eduQuotaFlag.eduFlx = false;
            for (var i in $scope.education) {
                $scope.education[i].maximum = $scope.education[i].number;
                $scope.education[i].minimum = $scope.education[i].number;
            }
        } else {
            $scope.eduQuotaFlag.eduFlx = true;
            $scope.quotaPercentageChange(education, eduFlxValue);
        }
    };
    $scope.setDeviceFlex = function(element, deviceInfo, dvcFlxValue) {
        if (angular.element("#devcSw").is(":checked") != true) {
            $scope.dvcQuotaFlag.dvcFlx = false;
            for (var i in $scope.deviceInfo) {
                $scope.deviceInfo[i].maximum = $scope.deviceInfo[i].number;
                $scope.deviceInfo[i].minimum = $scope.deviceInfo[i].number;
            }
        } else {
            $scope.dvcQuotaFlag.dvcFlx = true;
            $scope.quotaPercentageChange(deviceInfo, dvcFlxValue);
        }
    };

    $scope.setAdvFlex = function(element, deviceInfo, dvcFlxValue){
       if (angular.element("#devcSw").is(":checked") != true) {
            $scope.dvcQuotaFlag.dvcFlx = false;
            for (var i in $scope.deviceInfo) {
                $scope.deviceInfo[i].maximum = $scope.deviceInfo[i].number;
                $scope.deviceInfo[i].minimum = $scope.deviceInfo[i].number;
            }
        } else {
            $scope.dvcQuotaFlag.dvcFlx = true;
            $scope.quotaPercentageChange(deviceInfo, dvcFlxValue);
        }  
    }

    $scope.checkAgeMinQuotaModel = function(value, index) {
        for (var i in $scope.ageTempArr) {
            if (parseInt(i) !== index && $scope.ageTempArr[i].max >= value) {
                notify({
                    message: "Please insert value greater than max",
                    classes: 'alert-danger',
                    duration: 2000
                });
            }

            if (parseInt(i) == index && $scope.ageTempArr[i].max < $scope.ageTempArr[i].min) {
                notify({
                    message: "Please insert value greater than min",
                    classes: 'alert-danger',
                    duration: 2000
                });
                $scope.ageTempArr[i].max = '';
            }
        }
    };


    $scope.checkAgeMaxQuotaModel = function(value, index) {
        if(value){
            _.each($scope.ageTempArr, function(age, number){
                if(number == index && age.max < age.min) {
                    notify({
                        message: "Please insert value greater than min",
                        classes: 'alert-danger',
                        duration: 2000
                    });
                    age.max = '';
                }
                if(number != index && age.min >= value) {
                    notify({
                        message: "Please insert value greater than max",
                        classes: 'alert-danger',
                        duration: 2000
                    });
                }
            });
        }
    };

    $scope.checkIncomeMinQuotaModel = function(value, index) {
        for (var i in $scope.incomeTempArr) {
            if (parseInt(i) !== index && $scope.incomeTempArr[i].max >= value) {
                notify({
                    message: "Please insert value greater than max",
                    classes: 'alert-danger',
                    duration: 2000
                });

                $scope.incomeTempArr[index].min = '';

            }

            if (parseInt(i) == index && $scope.incomeTempArr[i].max < $scope.incomeTempArr[i].min) {
                notify({
                    message: "Please insert value greater than min",
                    classes: 'alert-danger',
                    duration: 2000
                })
                $scope.incomeTempArr[i].max = '';
            }

        }

    };


    $scope.checkIncomeMaxQuotaModel = function(value, index) {
        for (var i in $scope.incomeTempArr) {
            if (parseInt(i) !== index && parseInt($scope.incomeTempArr[i].max) > value) {
                notify({
                    message: "Please insert value greater than last max",
                    classes: 'alert-danger',
                    duration: 2000
                });
                return false;
            }

            if (parseInt(i) == index && parseInt($scope.incomeTempArr[i].max) < parseInt($scope.incomeTempArr[i].min)) {
                notify({
                    message: "Please insert value greater than min",
                    classes: 'alert-danger',
                    duration: 2000
                });
                $scope.incomeTempArr[i].max = '';
            }
        }
    };

    function getSurveyDetailsForUpdate(key) {
        $scope.languageValue = '';
        if (key) {
            $scope.loader.show = true;
            createSurvey.getSurveyById(key).success(function(data) {
                if (data.survey) {
                    //PD-1003
                   saveAllThreePageData = data.survey;
                    $scope.checkDirty = true;
                    //Remove fielded on Live clone
                    if($scope.checkLive_pus_Clone) {
                        //Updating Completes Before Update to Autoupdate the nested quotas if completes are increased
                        $scope.totalFielded = 0;
                        if(data.survey[0].supplier){
                            _.each(data.survey[0].supplier, function(suplrFielded){
                                delete suplrFielded.fielded;
                            });
                        }
                        // Delete Achieved values in cloning V2
                        if(data.quotaV2Data.quotas && data.quotaV2Data.quotas.length > 0){
                            _.each(data.quotaV2Data.quotas, function(allQuota){
                                // For Cloning
                                if(allQuota.counter){
                                    allQuota.counter['Buyer_side_In_Progress'] = 0;
                                    allQuota.counter['Buyer_Survey_Starts'] = 0;
                                    allQuota.counter['Buyer_Valid_Clicks'] = 0;
                                }   
                                if(_.has(allQuota, "last_complete_date")) {
                                    allQuota.last_complete_date = "";
                                }
                                if(allQuota.quantities.achieved){
                                    //console.log('allQuota.quantities ',JSON.stringify(allQuota));
                                    allQuota.quantities.achieved = 0;
                                    allQuota.quantities.currently_open = allQuota.quantities.maximum;
                                    allQuota.quantities.remaining = allQuota.quantities.maximum;
                                    allQuota.quantities.current_target = allQuota.quantities.maximum;
                                    allQuota.quantities.sup_currently_open = allQuota.quantities.maximum;
                                    allQuota.quantities.buyer_in_progress = 0;
                                }
                                _.each(_.keys(allQuota.suppliers), function(singleKey){
                                    allQuota.suppliers[singleKey].complete_needed = allQuota.quantities.maximum;
                                    allQuota.suppliers[singleKey].current_target = allQuota.quantities.maximum;
                                    allQuota.suppliers[singleKey].currently_open = allQuota.quantities.maximum;
                                    allQuota.suppliers[singleKey].sup_currently_open = allQuota.quantities.maximum;
                                    allQuota.suppliers[singleKey].complete_fielded = 0;
                                    allQuota.suppliers[singleKey].total_starts = 0;
                                    allQuota.suppliers[singleKey].buyer_valid_clks = 0;
                                    allQuota.suppliers[singleKey].bip = 0;
                                    allQuota.suppliers[singleKey].last_start_date = "";
                                    allQuota.suppliers[singleKey].last_complete_date = "";
                                });
                            });
                        }
                    }
                    setLocationViews(data.survey[0].locale.countryCode);
                    //survey status
                    $scope.surveyStatus = data.survey[0].status;
                    // For checking Survey based on clicks
                    $scope.properties.clickBalance = data.survey[0].clickBalance;
                    $scope.properties.estmClicks = data.survey[0].estmClicks;
                    $scope.completesNeeded = data.survey[0].clickBalance == 0? data.survey[0].number:data.survey[0].estmClicks;
                    
                    //console.log("data.survey[0].currencyFx ",data.survey[0].currencyFx)
                    if(data.survey[0].currencyFx && data.survey[0].currencyFx.symbol) {
                        $scope.currency_symbol = data.survey[0].currencyFx.symbol;
                        $scope.currencyFx = data.survey[0].currencyFx;
                    }
                    // Variable used to check completes less than tofalFielded in Live Edit
                    if(!$scope.checkLive_pus_Clone) {
                        $scope.totalFielded = data.survey[0].fielded;
                    }
                    
                    var ageTempVar = new Array();
                    // To add zipcode data if nested
                    if(data.quotaV2Data && data.quotaV2Data.zipGrpDetail){
                        $scope.properties.zipGrpDetail = angular.copy(data.quotaV2Data.zipGrpDetail);
                        $scope.selectedZipcodes = angular.copy($scope.properties.zipGrpDetail);
                    }
                    
                    //Checking for Qualifications and pushing them in respective array
                    if(data.quotaV2Data && data.quotaV2Data.qualifications && data.quotaV2Data.qualifications.length > 0){
                        // function to put qualifications into particular array
                        var fillQual = function(sourceArr, destArr){
                            if(sourceArr.q_type == 'normal' && (sourceArr.q_name == 'regions' || sourceArr.q_name == 'divisions' || sourceArr.q_name == 'states' || sourceArr.q_name == 'dma' || sourceArr.q_name == 'csa' || sourceArr.q_name == 'msa' || sourceArr.q_name == 'county' || sourceArr.q_name == 'zipcodes')){
                                console.log('sourceArr ',JSON.stringify(sourceArr));
                                _.each(sourceArr.conditions, function(data){
                                    destArr.push({
                                        "id": parseInt(data.id),
                                        "qual_id":sourceArr.qualification_code,
                                        "name": data.name,
                                        "selected":true
                                    });
                                });
                            }else if(sourceArr.q_type == 'normal'){
                                _.each(destArr, function(item, index){
                                    if(_.findWhere(sourceArr.conditions, {"id":item.id.toString()})){
                                        destArr[index].selected = true;
                                    }else{
                                        destArr[index].selected = false;
                                    }
                                });
                                // Removing
                                destArr = _.filter(destArr, function(val){
                                    if(val.selected){
                                        return true;
                                    }else{
                                        return false;
                                    }
                                });
                            }else if(sourceArr.q_type == 'range'){
                                _.each(sourceArr.range_sets, function(data){
                                    // Only push once when its empty otherwise it will create duplicate
                                    if(sourceArr.range_sets.length > destArr.length){
                                        destArr.push({
                                            "hasValidQuotas":false,
                                            "percentage":100,
                                            "flexiblePer":0,
                                            "maximum":"",
                                            "minimum":"",
                                            "number":"",
                                            "flexible":true,
                                            "max":data.to,
                                            "min":data.from,
                                            "achieved":0,
                                            "per":""
                                        });
                                    }
                                });
                            }
                            return destArr;
                        };
                        _.each(data.quotaV2Data.qualifications, function(qualifications){
                            if(qualifications.q_name == 'gender'){
                                $scope.sltGender = fillQual(qualifications, $scope.sltGender);
                                showAddQuotaData($scope.genderInfo, $scope.sltGender, 'gender');
                            }else if(qualifications.q_name == 'race'){
                                $scope.sltRace = fillQual(qualifications, $scope.sltRace);
                                showAddQuotaData($scope.race, $scope.sltRace, 'race');
                            }else if(qualifications.q_name == 'relationships'){
                                $scope.sltRelation = fillQual(qualifications, $scope.sltRelation);
                                showAddQuotaData($scope.relation, $scope.sltRelation, 'relation');
                            }else if(qualifications.q_name == 'children'){
                                $scope.sltChildren = fillQual(qualifications, $scope.sltChildren);
                                showAddQuotaData($scope.children, $scope.sltChildren, 'children');
                            }else if(qualifications.q_name == 'educations'){
                                $scope.sltEducation = fillQual(qualifications, $scope.sltEducation);
                                showAddQuotaData($scope.education, $scope.sltEducation, 'edu');
                            }else if(qualifications.q_name == 'employments'){
                                $scope.sltEmployment = fillQual(qualifications, $scope.sltEmployment);
                                showAddQuotaData($scope.employement, $scope.sltEmployment, 'emp');
                            }else if(qualifications.q_name == 'device'){
                                $scope.sltDevice = fillQual(qualifications, $scope.sltDevice);
                                showAddQuotaData($scope.deviceInfo, $scope.sltDevice, 'dvc');
                            }else if(qualifications.q_name == 'regions'){
                                $scope.sltRegion = fillQual(qualifications, $scope.sltRegion);
                                showAddQuotaData($scope.region, $scope.sltRegion, 'rgn');
                            }else if(qualifications.q_name == 'divisions'){
                                $scope.sltDivision = fillQual(qualifications, $scope.sltDivision);
                                showAddQuotaData($scope.division, $scope.sltDivision, 'dvsn');
                            }else if(qualifications.q_name == 'raceBera'){
                                $scope.sltRaceBera = fillQual(qualifications, $scope.sltRaceBera);
                                showAddQuotaData($scope.raceBera, $scope.sltRaceBera, 'rb');
                            }else if(qualifications.q_name == 'hispanicOrigin'){
                                $scope.hispanicOrigin = fillQual(qualifications, $scope.hispanicOrigin);
                                showAddQuotaData($scope.hispanic, $scope.hispanicOrigin, 'hispanic');
                            }else if(qualifications.q_name == 'states'){
                                $scope.selectedStates = [];
                                $scope.selectedStates = fillQual(qualifications, $scope.selectedStates);
                            }else if(qualifications.q_name == 'csa'){
                                $scope.selectedCSAs = [];
                                $scope.selectedCSAs = fillQual(qualifications, $scope.selectedCSAs);
                            }else if(qualifications.q_name == 'msa'){
                                $scope.selectedMSAs = [];
                                $scope.selectedMSAs = fillQual(qualifications, $scope.selectedMSAs);
                            }else if(qualifications.q_name == 'dma'){
                                $scope.selectedDMAs = [];
                                $scope.selectedDMAs = fillQual(qualifications, $scope.selectedDMAs);
                            }else if(qualifications.q_name == 'county'){
                                $scope.selectedCountys = [];
                                $scope.selectedCountys = fillQual(qualifications, $scope.selectedCountys);
                            }else if(qualifications.q_name == 'age'){
                                $scope.ageTempArr = [];
                                $scope.ageTempArr = fillQual(qualifications, $scope.ageTempArr);
                                ageTempVar = fillQual(qualifications, $scope.ageTempArr);
                            }else if(qualifications.q_name == 'houseHoldIncome'){
                                $scope.incomeTempArr = [];
                                $scope.incomeTempArr = fillQual(qualifications, $scope.incomeTempArr);
                            }else if(qualifications.q_name == 'zipcodes'){
                                // Do Nothing -- Only sending file url from frontend
                            }else{
                                advanceQual.push(qualifications);
                            }
                        });
                    }
                    // Checking if Advance Target exists then disable
                    if(data.quotaV2Data.advance_target && data.quotaV2Data.advance_target.length > 0){

                        var checkGroupedAdvncd = _.where(data.quotaV2Data.quotas, {"isActive": true});

                        _.each(data.quotaV2Data.advance_target, function(singleTarget){
                            if(singleTarget.question_type == 'range'){
                                $scope.tempAdvArray.push({
                                    "respondent_question_id": singleTarget.respondent_question_id,
                                    "stem1": singleTarget.stem1,
                                    "stem1_ui": singleTarget.stem1_ui,
                                    "stem2": singleTarget.stem2,
                                    "selected": singleTarget.selected,
                                    "qualification_id": singleTarget.qualification_id,
                                    "range" : {
                                        'condition': singleTarget.selected[singleTarget.qualification_id[0]].answer_data.condition,
                                        'from': singleTarget.selected[singleTarget.qualification_id[0]].answer_data.from,
                                        'to': singleTarget.selected[singleTarget.qualification_id[0]].answer_data.to,
                                        'orig_value': singleTarget.selected[singleTarget.qualification_id[0]].answer_data.orig_value
                                    },
                                    "question_type" :singleTarget.question_type,
                                    "answers" : singleTarget.answers,
                                    "buyer_text" : singleTarget.buyer_text,
                                    "question_description" : singleTarget.question_description,
                                    "rangeQuesOption": singleTarget.rangeQuesOption,
                                    "units": singleTarget.units
                                });
                                $scope.advanceDataPayload = _.uniq($scope.advanceDataPayload.concat($scope.tempAdvArray), "respondent_question_id");
                            }else{
                                if(checkGroupedAdvncd.length) {
                                    var checkedMessedQuota = _.filter(checkGroupedAdvncd, function(snglQuotaCheck) {
                                        return snglQuotaCheck.quotaCategory == "advance";
                                    });
                                    var groupedAdvncdData = [];
                                    _.filter(checkGroupedAdvncd, function(snglQuotaCheck) {
                                        _.each(snglQuotaCheck.criteria, function(criteriaArr) {
                                            if(criteriaArr.qualification_code == singleTarget.qualification_id && snglQuotaCheck.quotaCategory == "grouped") {
                                                groupedAdvncdData.push(snglQuotaCheck);
                                            }
                                        })
                                    });

                                    if(groupedAdvncdData.length) {
                                        var selectedQuestionArr = [];
                                        angular.copy(singleTarget, selectedQuestionArr);
                                        selectedQuestionArr.selected[selectedQuestionArr.qualification_id].answer_data = new Array();
                                       _.each(groupedAdvncdData, function(groupObj) {
                                           var name = "";
                                           var idArr = [];
                                           var name_arr = []; 
                                           var idenKey = "";
                                           _.each(groupObj.criteria, function(criteriaIter) {
                                                idenKey = criteriaIter.qualification_code;
                                               _.each(criteriaIter.conditions, function(condArr) {
                                                    name = name + condArr.name + " " +"or" + " ";
                                                    idArr.push(condArr.id);
                                                    name_arr.push(condArr.name);
                                                    idenKey = idenKey + '_' + condArr.id;
                                               })
                                    
                                               
                                               if(criteriaIter.qualification_code == selectedQuestionArr.qualification_id) {
                                                   
                                                   var quotaPayLoadObj = {
                                                        iden_key: idenKey,
                                                        id: idArr,
                                                        maximum: groupObj.quantities.number,
                                                        name_arr: name_arr,
                                                        minimum: groupObj.quantities.number,
                                                        name: name.substring(0, name.length - 3),
                                                        number: groupObj.quantities.number,
                                                        per: groupObj.quantities.percentage,
                                                        percentage: groupObj.quantities.percentage,
                                                        selected: true,
                                                        qualification_id: criteriaIter.qualification_code,
                                                        condditionGroup: true,
                                                        "haveAdvGroup": true,
                                                        qual_name: criteriaIter.qualification_name,
                                                        qual_id: criteriaIter.qualification_code
                                                   }
                                                  
                                                   var isExistObject = _.findWhere(selectedQuestionArr.selected[selectedQuestionArr.qualification_id].answer_data, quotaPayLoadObj);
                                                  
                                                   if(!isExistObject) {
                                                    selectedQuestionArr.selected[selectedQuestionArr.qualification_id].answer_data.push(quotaPayLoadObj);
                                                   }
                                               }
                                           })
                                       })

                                       _.each(checkedMessedQuota, function(otherQuotas) {
                                          _.each(otherQuotas.criteria, function(lyrdCritria) {
                                              _.each(lyrdCritria.conditions, function(condCheck){
                                                if(lyrdCritria.qualification_code == selectedQuestionArr.qualification_id) {
                                                    var quotaPayLoadObj = {
                                                        id: condCheck.id,
                                                        maximum: otherQuotas.quantities.number,
                                                        minimum: otherQuotas.quantities.number,
                                                        name: condCheck.name,
                                                        number: otherQuotas.quantities.number,
                                                        per: otherQuotas.quantities.percentage,
                                                        percentage: otherQuotas.quantities.percentage,
                                                        selected: true,
                                                        qual_name: lyrdCritria.qualification_name,
                                                        qual_id: lyrdCritria.qualification_code
                                                    }
                                                    var nextExistObject = _.findWhere(selectedQuestionArr.selected[selectedQuestionArr.qualification_id].answer_data, quotaPayLoadObj);
                                                    if(!nextExistObject) {
                                                        selectedQuestionArr.selected[selectedQuestionArr.qualification_id].answer_data.push(quotaPayLoadObj);
                                                    }
                                                }
                                              })
                                          })
                                       })
                                       _.uniq(selectedQuestionArr.selected[selectedQuestionArr.qualification_id].answer_data, "id"); 

                                        $scope.tempAdvArray.push({
                                            "respondent_question_id": singleTarget.respondent_question_id,
                                            "stem1": singleTarget.stem1,
                                            "stem1_ui": singleTarget.stem1_ui,
                                            "stem2": singleTarget.stem2,
                                            "selected": selectedQuestionArr.selected,
                                            "qualification_id": singleTarget.qualification_id,
                                            "allOptions": singleTarget.answers[singleTarget.qualification_id[0]].answer_data,
                                            "question_type" :singleTarget.question_type,
                                            "answers" : singleTarget.answers,
                                            "buyer_text" : singleTarget.buyer_text,
                                            "question_description" : singleTarget.question_description,
                                            "hasQuota": singleTarget.hasQuota
                                        });

                                        $scope.advanceGoupModel.push({
                                            "respondent_question_id": singleTarget.respondent_question_id,
                                            "stem1": singleTarget.stem1,
                                            "stem1_ui": singleTarget.stem1_ui,
                                            "stem2": singleTarget.stem2,
                                            "selected": singleTarget.selected,
                                            "qualification_id": singleTarget.qualification_id,
                                            "allOptions": singleTarget.answers[singleTarget.qualification_id[0]].answer_data,
                                            "question_type" :singleTarget.question_type,
                                            "answers" : singleTarget.answers,
                                            "buyer_text" : singleTarget.buyer_text,
                                            "question_description" : singleTarget.question_description,
                                            "hasQuota": singleTarget.hasQuota
                                        });

                                        _.each(groupedAdvncdData, function(item){
                                            _.each(item.criteria, function(snglCriteria) {
                                                item['iden_key'] = snglCriteria.qualification_code;
                                                _.each(snglCriteria.conditions, function(snglCond) {
                                                    item['iden_key'] = item['iden_key'] + '_' + snglCond.id;
                                                })
                                            })
                                            advQuota.push(item);
                                        });
                    
                                        $scope.advanceDataPayload = _.uniq($scope.advanceDataPayload.concat($scope.advanceGoupModel), "respondent_question_id");
                                    }
                                    else {
                                        $scope.tempAdvArray.push({
                                            "respondent_question_id": singleTarget.respondent_question_id,
                                            "stem1": singleTarget.stem1,
                                            "stem1_ui": singleTarget.stem1_ui,
                                            "stem2": singleTarget.stem2,
                                            "selected": singleTarget.selected,
                                            "qualification_id": singleTarget.qualification_id,
                                            "allOptions": singleTarget.answers[singleTarget.qualification_id[0]].answer_data,
                                            "question_type" :singleTarget.question_type,
                                            "answers" : singleTarget.answers,
                                            "buyer_text" : singleTarget.buyer_text,
                                            "question_description" : singleTarget.question_description,
                                            "hasQuota": singleTarget.hasQuota
                                        });
                                        $scope.advanceDataPayload = _.uniq($scope.advanceDataPayload.concat($scope.tempAdvArray), "respondent_question_id");
                                    }
                                }
                                else {
                                    $scope.tempAdvArray.push({
                                        "respondent_question_id": singleTarget.respondent_question_id,
                                        "stem1": singleTarget.stem1,
                                        "stem1_ui": singleTarget.stem1_ui,
                                        "stem2": singleTarget.stem2,
                                        "selected": singleTarget.selected,
                                        "qualification_id": singleTarget.qualification_id,
                                        "allOptions": singleTarget.answers[singleTarget.qualification_id[0]].answer_data,
                                        "question_type" :singleTarget.question_type,
                                        "answers" : singleTarget.answers,
                                        "buyer_text" : singleTarget.buyer_text,
                                        "question_description" : singleTarget.question_description,
                                        "hasQuota": singleTarget.hasQuota
                                    });
                                    $scope.advanceDataPayload = _.uniq($scope.advanceDataPayload.concat($scope.tempAdvArray), "respondent_question_id");
                                }
                            }
                            //console.log('$scope.tempAdvArray '+JSON.stringify($scope.tempAdvArray));
                        });
                        // Adding data to temp advance data array
                        advanceData = data.quotaV2Data.advance_target;
                        $scope.diableAdvanceTarget = true;
                    }
                    /*-----------Getting Quotas----------*/
                    if(data.quotaV2Data && data.quotaV2Data.quotas && data.quotaV2Data.quotas.length > 0){
                        /*----------Auto Nesting---------*/
                        var autoNestedQuotas = _.filter(data.quotaV2Data.quotas, function(autoNested){
                            return autoNested.quotaCategory == "autoNested" && autoNested.isActive
                        });
                        // Pushing the data in UI object to show on page
                        if(autoNestedQuotas.length > 0){
                            var zipcodeGroupNo = 0;
                            var zipRefKeyArr = new Array();
                            var tempQualArr = new Array();
                            _.each(autoNestedQuotas, function(nestedQuotas){
                                var combinedKeyArr = new Array();
                                // getting names using qualification keys and qualifications
                                //console.log('nestedQuotas '+JSON.stringify(nestedQuotas));
                                _.each(nestedQuotas.criteria, function(qual){
                                    // Child_gender 220 and and Child_age 230 will not enter in loop because these are children internal qualifications
                                    if(qual.qualification_code != parseInt(config.childMasterQual.gender) && qual.qualification_code != parseInt(config.childMasterQual.age)){
                                        /*-----Child Age and Gender details used in this function----*/
                                            var child_gender_arr = _.findWhere(nestedQuotas.criteria, {"qualification_code":parseInt(config.childMasterQual.gender)});
                                            var child_gender_name = new String();
                                            var child_gender_code = new String();
                                            if(child_gender_arr){
                                                child_gender_name = child_gender_arr.conditions.length > 1? 'Either': child_gender_arr.conditions[0].name;
                                                child_gender_code = (child_gender_arr.conditions.length > 1)? 'both': child_gender_arr.conditions[0].id;
                                            }
                                            var child_age_arr =_.findWhere(nestedQuotas.criteria, {"qualification_code":parseInt(config.childMasterQual.age)});

                                        /*-----Child Age and Gender details used in this function----*/
                                        if(qual.q_type == 'normal'){
                                            //console.log('\n\n qual '+JSON.stringify(qual));
                                            if(qual.qualification_code == config.childMasterQual.id){
                                                if(child_age_arr && child_gender_name){
                                                    $scope.childAgeUnit = {
                                                        'value': child_age_arr.range_sets[0].units,
                                                        'name' : ($scope.childAgeUnit.value == config.childMasterQual.ageUnitYr)? 'year':'month' 
                                                    }
                                                    combinedKeyArr.push(child_gender_name+'_'+child_age_arr.range_sets[0].from+'-'+child_age_arr.range_sets[0].to);
                                                }else{
                                                    combinedKeyArr.push(qual.conditions[0].name);
                                                }
                                            }else if(qual.qualification_code == config.zipcodesQual.id){
                                                //console.log('zipRefKeyArr '+JSON.stringify(zipRefKeyArr));
                                                //console.log('qual.buyer_ziplist_ref '+qual.buyer_ziplist_ref);
                                                if(zipRefKeyArr.indexOf(qual.buyer_ziplist_ref) == -1){
                                                    //console.log('in');
                                                    zipRefKeyArr.push(qual.buyer_ziplist_ref);
                                                    zipcodeGroupNo++;
                                                }
                                                var zipGrpNm = qual.buyer_ziplist_ref.lastIndexOf("_");
                                                    zipGrpNm = qual.buyer_ziplist_ref.substr(0, zipGrpNm);
                                                if(combinedKeyArr.indexOf(zipGrpNm) == -1){
                                                    combinedKeyArr.push(zipGrpNm);
                                                }
                                                _.each(qual.conditions, function(item){
                                                    if(_.findIndex(tempQualArr, {'name':item.name}) == -1){
                                                        tempQualArr.push(item);
                                                    }
                                                });
                                                if(_.isArray(qual.conditions) && qual.conditions.length == 0){
                                                    var missCon =  _.findWhere(tempQualArr, {'name':zipGrpNm});
                                                    console.log('Missed Condition in Zipcode ',JSON.stringify(missCon));
                                                    qual.conditions[0] = angular.copy(missCon);
                                                }else{
                                                    qual.conditions[0]['id'] = qual.buyer_ziplist_ref;
                                                }
                                            }else{
                                                // To show name on UI
                                                var name_arr = _.map(qual.conditions, function(single){ return single.name });
                                                names = name_arr.join('-');
                                                combinedKeyArr.push(names);

                                                // For pushing details on the condition groupinf array
                                                if(qual.conditions.length > 1){
                                                    var ids = _.map(qual.conditions, function(single){ return parseInt(single.id) });
                                                    var name_arr = _.map(qual.conditions, function(single){ return single.name });
                                                    var condditionGroup = false;
                                                }else{
                                                    var ids =  parseInt(qual.conditions[0].id);
                                                    var name_arr =  qual.conditions[0].name;
                                                    var condditionGroup = false;
                                                }
                                                // If key not exist add it in conditiongroupingArray
                                                if(_.has($scope.conditionGroupingArray, [qual.qualification_name]) == false){
                                                    $scope.conditionGroupingArray[qual.qualification_name] = new Array();
                                                }
                                                // Check if pre-exist
                                                if(typeof(ids) == 'object'){
                                                    var preExist = _.find($scope.conditionGroupingArray[qual.qualification_name], function(single){
                                                        if(typeof(single.id) == 'object' && single.id.length == ids.length && _.difference(single.id, ids).length == 0){
                                                            return true;
                                                        }else{
                                                            return false;
                                                        }
                                                    });
                                                    if(!preExist){
                                                        var origNames = name_arr.join(' or ');
                                                        $scope.conditionGroupingArray[qual.qualification_name].push({
                                                            "qual_id" : qual.qualification_code,
                                                            "qual_name" :  qual.qualification_name,
                                                            "per" : qual.layered_percent,
                                                            "percentage" : qual.layered_percent,
                                                            "selected" : true,
                                                            "id" : ids,
                                                            "name_arr" : name_arr,
                                                            "condditionGroup":condditionGroup,
                                                            "name": origNames
                                                        });
                                                    }
                                                }else{
                                                    var preExist = _.findIndex($scope.conditionGroupingArray[qual.qualification_name], {"id":ids});
                                                    if(preExist == -1){
                                                        $scope.conditionGroupingArray[qual.qualification_name].push({
                                                            "qual_id" : qual.qualification_code,
                                                            "qual_name" :  qual.qualification_name,
                                                            "per" : qual.layered_percent,
                                                            "percentage" : qual.layered_percent,
                                                            "selected" : true,
                                                            "id" : ids,
                                                            "name_arr" : name_arr,
                                                            "condditionGroup":condditionGroup,
                                                            "name": name_arr
                                                        });
                                                    }
                                                }
                                                
                                            }
                                            // Also pushing data in raw objects used before nesting to live edit
                                            // if obj is created in first loop then do not create next time
                                            if(!nestingQuotasDetailObj[qual.qualification_name]){
                                                nestingQuotasDetailObj[qual.qualification_name] = [];
                                                if(qual.qualification_code == config.childMasterQual.id){
                                                    if(qual.layered_percent && child_gender_name && child_age_arr){
                                                        nestingQuotasDetailObj[qual.qualification_name].push(qual.qualification_code+'?'+qual.qualification_name+'?'+child_age_arr.range_sets[0].from+'-'+child_age_arr.range_sets[0].to+'?range?'+qual.layered_percent+'?'+child_gender_name);
                                                    // For No Children
                                                    }else if(qual.layered_percent && child_gender_name == '' && !child_age_arr){
                                                        nestingQuotasDetailObj[qual.qualification_name].push(qual.qualification_code+'?'+qual.qualification_name+'?'+qual.conditions[0].id+'?'+qual.conditions[0].name+'?normal?'+qual.layered_percent);
                                                    }else{
                                                        nestingQuotasDetailObj[qual.qualification_name].push(qual.qualification_code+'?'+qual.qualification_name+'?'+child_age_arr.range_sets[0].from+'-'+child_age_arr.range_sets[0].to+'?range?'+nestedQuotas.quantities.percentage+'_'+child_gender_name);
                                                    }
                                                }else if(qual.qualification_code == config.zipcodesQual.id){
                                                    if(qual.layered_percent){
                                                        nestingQuotasDetailObj[qual.qualification_name].push(qual.qualification_code+'?'+qual.qualification_name+'?'+qual.conditions[0].name+'?'+qual.conditions[0].name+'?normal?'+qual.layered_percent+'?'+qual.buyer_ziplist_ref);
                                                    }else{
                                                        nestingQuotasDetailObj[qual.qualification_name].push(qual.qualification_code+'?'+qual.qualification_name+'?'+qual.conditions[0].name+'?'+qual.conditions[0].name+'?normal?'+nestedQuotas.quantities.percentage+'?'+qual.buyer_ziplist_ref);
                                                    }
                                                }else{
                                                    // For Grouping + Nesting
                                                    var ids = _.map(qual.conditions, function(eachCondition){ return eachCondition.id });
                                                    var names = _.map(qual.conditions, function(eachCondition){ return eachCondition.name });
                                                    ids = ids.join('-');
                                                    names = names.join('-');
                                                    if(qual.layered_percent){
                                                        nestingQuotasDetailObj[qual.qualification_name].push(qual.qualification_code+'?'+qual.qualification_name+'?'+ids+'?'+names+'?normal?'+qual.layered_percent);
                                                    }else{
                                                        nestingQuotasDetailObj[qual.qualification_name].push(qual.qualification_code+'?'+qual.qualification_name+'?'+ids+'?'+names+'?normal?'+nestedQuotas.quantities.percentage);
                                                    }
                                                }
                                            }
                                            //console.log('nestingQuotasDetailObj[qual.qualification_name]\n\n'+JSON.stringify(nestingQuotasDetailObj[qual.qualification_name]));
                                            if(_.find(nestingQuotasDetailObj[qual.qualification_name], function(item){ if((qual.conditions.length && item.indexOf(qual.conditions[0].name) != -1) || (qual.buyer_ziplist_ref && item.indexOf(qual.buyer_ziplist_ref) != -1)){return true}else{return false} }) == undefined){
                                                if(qual.qualification_name == "children"){
                                                    if(qual.layered_percent && child_gender_name && child_age_arr){
                                                        // To avoid duplicate data
                                                        if(_.indexOf(nestingQuotasDetailObj[qual.qualification_name], (qual.qualification_code+'?'+qual.qualification_name+'?'+child_age_arr.range_sets[0].from+'-'+child_age_arr.range_sets[0].to+'?range?'+qual.layered_percent+'?'+child_gender_name)) == -1){
                                                            //console.log('qual 1 other '+JSON.stringify(qual))
                                                            nestingQuotasDetailObj[qual.qualification_name].push(qual.qualification_code+'?'+qual.qualification_name+'?'+child_age_arr.range_sets[0].from+'-'+child_age_arr.range_sets[0].to+'?range?'+qual.layered_percent+'?'+child_gender_name);
                                                        }
                                                    }else if(qual.layered_percent && child_gender_name == '' && !child_age_arr){
                                                        if(_.indexOf(nestingQuotasDetailObj[qual.qualification_name], (qual.qualification_code+'?'+qual.qualification_name+'?'+qual.conditions[0].id+'?'+qual.conditions[0].name+'?normal?'+qual.layered_percent)) == -1){
                                                            nestingQuotasDetailObj[qual.qualification_name].push(qual.qualification_code+'?'+qual.qualification_name+'?'+qual.conditions[0].id+'?'+qual.conditions[0].name+'?normal?'+qual.layered_percent);
                                                        }
                                                    }else if(child_gender_name && child_age_arr){
                                                        // To avoid duplicate data
                                                        if(_.indexOf(nestingQuotasDetailObj[qual.qualification_name], (qual.qualification_code+'?'+qual.qualification_name+'_'+child_age_arr.range_sets[0].from+'-'+child_age_arr.range_sets[0].to+'?range?'+nestedQuotas.quantities.percentage+'?'+child_gender_name)) == -1){
                                                            //console.log('qual 2 other '+JSON.stringify(nestedQuotas))
                                                        nestingQuotasDetailObj[qual.qualification_name].push(qual.qualification_code+'?'+qual.qualification_name+'?'+child_age_arr.range_sets[0].from+'-'+child_age_arr.range_sets[0].to+'?range?'+nestedQuotas.quantities.percentage+'?'+child_gender_name);
                                                        }
                                                    }
                                                }else if(qual.qualification_code == config.zipcodesQual.id){
                                                    if(qual.layered_percent){
                                                        nestingQuotasDetailObj[qual.qualification_name].push(qual.qualification_code+'?'+qual.qualification_name+'?'+qual.conditions[0].name+'?'+qual.conditions[0].name+'?normal?'+qual.layered_percent+'?'+qual.buyer_ziplist_ref);
                                                    }else{
                                                        nestingQuotasDetailObj[qual.qualification_name].push(qual.qualification_code+'?'+qual.qualification_name+'?'+qual.conditions[0].name+'?'+qual.conditions[0].name+'?normal?'+nestedQuotas.quantities.percentage+'?'+qual.buyer_ziplist_ref);
                                                    }
                                                }else{
                                                    var ids = _.map(qual.conditions, function(eachCondition){ return eachCondition.id });
                                                    var names = _.map(qual.conditions, function(eachCondition){ return eachCondition.name });
                                                    ids = ids.join('-');
                                                    names = names.join('-');
                                                    if(qual.layered_percent){
                                                        nestingQuotasDetailObj[qual.qualification_name].push(qual.qualification_code+'?'+qual.qualification_name+'?'+ids+'?'+names+'?normal?'+qual.layered_percent);
                                                    }else{
                                                        nestingQuotasDetailObj[qual.qualification_name].push(qual.qualification_code+'_'+qual.qualification_name+'_'+ids+'_'+names+'_normal_'+nestedQuotas.quantities.percentage);
                                                    }
                                                }
                                            }
                                        }else if(qual.q_type == 'range_sets'){
                                            combinedKeyArr.push(qual.range_sets[0].from+'-'+qual.range_sets[0].to);
                                            // Also pushing data in raw objects used before nesting to live edit
                                            if(!nestingQuotasDetailObj[qual.qualification_name]){
                                                nestingQuotasDetailObj[qual.qualification_name] = [];
                                                if(qual.layered_percent){
                                                    nestingQuotasDetailObj[qual.qualification_name].push(qual.qualification_code+'?'+qual.qualification_name+'?'+qual.range_sets[0].from+'-'+qual.range_sets[0].to+'?range?'+qual.layered_percent);
                                                }else{
                                                    nestingQuotasDetailObj[qual.qualification_name].push(qual.qualification_code+'?'+qual.qualification_name+'?'+qual.range_sets[0].from+'-'+qual.range_sets[0].to+'?range?'+nestedQuotas.quantities.percentage);
                                                }
                                            }
                                            if(_.find(nestingQuotasDetailObj[qual.qualification_name], function(item){ if(item.indexOf(qual.range_sets[0].from+'-'+qual.range_sets[0].to) != -1){return true}else{return false} }) == undefined){
                                                if(qual.layered_percent){
                                                    nestingQuotasDetailObj[qual.qualification_name].push(qual.qualification_code+'?'+qual.qualification_name+'?'+qual.range_sets[0].from+'-'+qual.range_sets[0].to+'?range?'+qual.layered_percent);
                                                }else{
                                                    nestingQuotasDetailObj[qual.qualification_name].push(qual.qualification_code+'?'+qual.qualification_name+'?'+qual.range_sets[0].from+'-'+qual.range_sets[0].to+'?range?'+nestedQuotas.quantities.percentage);
                                                }
                                            }
                                            // For showing age and income in box
                                            if(qual.qualification_name == 'age'){
                                                $scope.ageData.min = (_.min($scope.ageTempArr, function(elm){ if(elm.min != "" && elm.min != undefined) {
                                                    return elm.min;
                                                } })).min;
                                                $scope.ageData.max = (_.max($scope.ageTempArr, function(elm){ return elm.max; })).max;
                                            }
                                            if(qual.qualification_name == 'houseHoldIncome'){
                                                $scope.houseHoldIncome.min = (_.min($scope.incomeTempArr, function(elm){ 
                                                    parseInt(elm.min);  // For making empty field integer
                                                    return elm.min;
                                                })).min || 0;
                                                $scope.houseHoldIncome.max = (_.max($scope.incomeTempArr, function(elm){ return elm.max; })).max;
                                            }
                                        }
                                        //console.log('nestingQuotasDetailObj '+JSON.stringify(nestingQuotasDetailObj));
                                        //push nested quotas category name in an array to show heading in nesting modal if it not exists
                                        //console.log('\n\n\ nestingQuotasDetailObj '+JSON.stringify(nestingQuotasDetailObj));
                                        if($scope.nestingQuotasArr.indexOf(qual.qualification_name) == -1){
                                            $scope.nestingQuotasArr.push(qual.qualification_name);
                                            //Array used for applied quota
                                            $scope.nestingQuotasArrFinal.push(qual.qualification_name);
                                        }

                                        // Adding layered percent in qualifications array so can be used for nesting at live edit
                                        var addlayeredPercent = function(arr, qual, maximum){
                                            if(qual.qualification_name == "age" || qual.qualification_name == "houseHoldIncome" || qual.qualification_name == "children"){
                                                //Mataching array with same min and max values
                                                if(qual.qualification_name == "children"){
                                                    // To excluse duplicate data
                                                        var num = Math.round((qual.layered_percent * $scope.completesNeeded)/100);
                                                        var flexibility = 0;
                                                        var minimum = Math.round(num - (num * parseInt(flexibility)) / 100);
                                                            var min = new Number();
                                                            _.each(arr, function(item){
                                                                if(item.minimum){
                                                                    min = min + item.minimum;
                                                                } 
                                                            });
                                                        var maximum = Math.min(parseInt(num + (num * parseInt(flexibility)) / 100), Math.round($scope.completesNeeded - (min - minimum)));
                                                        if(child_gender_code && child_age_arr && child_age_arr.range_sets[0].from && _.findIndex(arr.have, {"min":child_age_arr.range_sets[0].from} ) == -1){
                                                            arr.have.push({
                                                                "hasValidQuotas":false,
                                                                "percentage":qual.layered_percent,
                                                                "flexiblePer": flexibility,
                                                                "maximum":maximum,
                                                                "minimum":minimum,
                                                                "number":num,
                                                                "flexible":true,
                                                                "max":child_age_arr.range_sets[0].to,
                                                                "min":child_age_arr.range_sets[0].from,
                                                                "achieved":0,
                                                                "per":qual.layered_percent,
                                                                "id": qual.conditions[0].id,
                                                                "name": qual.conditions[0].name,
                                                                "qual_id":qual.qualification_code,
                                                                "gender":child_gender_code
                                                            });
                                                        }else if(qual.conditions && qual.conditions[0].id == 111 && maximum != '' && minimum != ''){
                                                            arr.no = [{
                                                                "hasValidQuotas" : false,
                                                                "percentage" : qual.layered_percent,
                                                                "flexiblePer": flexibility,
                                                                "maximum":maximum,
                                                                "minimum":minimum,
                                                                "number":num,
                                                                "flexible":true,
                                                                "max":'',
                                                                "min":'',
                                                                "achieved":0,
                                                                "per":qual.layered_percent,
                                                                "id": qual.conditions[0].id,
                                                                "name": qual.conditions[0].name,
                                                                "qual_id":qual.qualification_code,
                                                                "gender":''
                                                            }];
                                                        }else{
                                                            console.log('child_gender_code or child_age_arr are missing');
                                                        }
                                                }else{
                                                    var matchedArr = _.findWhere(arr, {"min":qual.range_sets[0].from});
                                                    //get index of matched Array
                                                    ind = _.indexOf(arr, matchedArr);
                                                    //updating per and maximum values at same index
                                                    if(ind != -1){
                                                        arr[ind].per = qual.layered_percent;
                                                        arr[ind].number = Math.round((arr[ind].per * $scope.completesNeeded)/100);
                                                        arr[ind].minimum = Math.round(arr[ind].number - (arr[ind].number * parseInt(arr[ind].flexiblePer)) / 100);
                                                        // to calculate total minimum to get maximum value
                                                            var min = new Number();
                                                            _.each(arr, function(item){
                                                                if(item.minimum){
                                                                    min = min + item.minimum;
                                                                } 
                                                            });
                                                        arr[ind].maximum = Math.min(parseInt(arr[ind].number + (arr[ind].number * parseInt(arr[ind].flexiblePer)) / 100), Math.round($scope.completesNeeded - (min - arr[ind].minimum)));
                                                    }
                                                }
                                            }else if(qual.qualification_name == "zipcodes"){
                                                _.each(arr, function(item){
                                                    if(item.name == qual.conditions[0].name){
                                                        console.log('matched in');
                                                        console.log('qual.layered_percent ',qual.layered_percent);
                                                        item.per = qual.layered_percent;
                                                        // Activate Nesting Method checks maximum value to auto nesting 
                                                        item.maximum = maximum;
                                                    }
                                                });
                                            }else{
                                                _.each(arr, function(data){
                                                    if(parseInt(data.id) == parseInt(qual.conditions[0].id)){
                                                        data.per = qual.layered_percent;
                                                        // Activate Nesting Method checks maximum value to auto nesting 
                                                        data.maximum = maximum;
                                                    }
                                                });
                                            }
                                            //console.log('data '+JSON.stringify(arr));
                                            return arr;
                                        }

                                        if(qual.qualification_name == 'gender'){
                                            $scope.genderInfo = addlayeredPercent($scope.genderInfo, qual, nestedQuotas.quantities.maximum);
                                        }else if(qual.qualification_name == 'age'){
                                            $scope.ageTempArr = addlayeredPercent($scope.ageTempArr, qual, nestedQuotas.quantities.maximum);
                                            if($scope.ageTempArr[0].number){
                                                $scope.ageTempArr.unshift({
                                                    "min": '',
                                                    "max": '',
                                                    "number": '',
                                                    "per": '',
                                                    "flexiblePer": '0',
                                                    "flexible": $scope.ageTempArr[0].flexible
                                                });
                                            }
                                        }else if(qual.qualification_name == 'houseHoldIncome'){
                                            $scope.incomeTempArr = addlayeredPercent($scope.incomeTempArr, qual, nestedQuotas.quantities.maximum);
                                            if($scope.incomeTempArr[0].number){
                                                $scope.incomeTempArr.unshift({
                                                    "min": '',
                                                    "max": '',
                                                    "number": '',
                                                    "per": '',
                                                    "flexiblePer": '0',
                                                    "flexible": $scope.incomeTempArr[0].flexible
                                                });
                                            }
                                        }else if(qual.qualification_name == 'children'){
                                            $scope.chldTempArr = addlayeredPercent($scope.chldTempArr, qual, nestedQuotas.quantities.maximum);
                                            if($scope.chldTempArr.have[0].number){
                                                $scope.chldTempArr.have.unshift({
                                                    "min": '',
                                                    "max": '',
                                                    "gender":'',
                                                    "number": '',
                                                    "per": '',
                                                    "flexiblePer": '0',
                                                    "flexible": $scope.chldTempArr.have[0].flexible
                                                });
                                            }
                                        }else if(qual.qualification_name == 'race'){
                                            $scope.race = addlayeredPercent($scope.race, qual, nestedQuotas.quantities.maximum);
                                        }else if(qual.qualification_name == 'educations'){
                                            $scope.education = addlayeredPercent($scope.education, qual, nestedQuotas.quantities.maximum);
                                        }else if(qual.qualification_name == 'employments'){
                                            $scope.employement = addlayeredPercent($scope.employement, qual, nestedQuotas.quantities.maximum);
                                        }else if(qual.qualification_name == 'relationships'){
                                            $scope.relation = addlayeredPercent($scope.relation, qual, nestedQuotas.quantities.maximum);
                                        }else if(qual.qualification_name == 'regions'){
                                            $scope.region = addlayeredPercent($scope.region, qual, nestedQuotas.quantities.maximum);
                                        }else if(qual.qualification_name == 'divisions'){
                                            $scope.division = addlayeredPercent($scope.division, qual, nestedQuotas.quantities.maximum);
                                        }else if(qual.qualification_name == 'states'){
                                            $scope.selectedStates = addlayeredPercent($scope.selectedStates, qual, nestedQuotas.quantities.maximum);
                                        }else if(qual.qualification_name == 'csa'){
                                            $scope.selectedCSAs = addlayeredPercent($scope.selectedCSAs, qual, nestedQuotas.quantities.maximum);
                                        }else if(qual.qualification_name == 'msa'){
                                            $scope.selectedMSAs = addlayeredPercent($scope.selectedMSAs, qual, nestedQuotas.quantities.maximum);
                                        }else if(qual.qualification_name == 'county'){
                                            $scope.selectedCountys = addlayeredPercent($scope.selectedCountys, qual, nestedQuotas.quantities.maximum);
                                        }else if(qual.qualification_name == 'dma'){
                                            $scope.selectedDMAs = addlayeredPercent($scope.selectedDMAs, qual, nestedQuotas.quantities.maximum);
                                        }else if(qual.qualification_name == 'zipcodes'){
                                            $scope.selectedZipcodes = addlayeredPercent($scope.selectedZipcodes, qual, nestedQuotas.quantities.maximum);
                                            console.log('$scope.selectedZipcodes >>> ',JSON.stringify($scope.selectedZipcodes));
                                        }
                                    }
                                });
                                $scope.nestedQuotasUiObj.push({
                                    //"nestingkey":elm.join('_'),
                                    "number":nestedQuotas.quantities.number, 
                                    "percentage" : nestedQuotas.quantities.percentage,
                                    "minimum" : nestedQuotas.quantities.minimum,
                                    "maximum" : nestedQuotas.quantities.maximum,
                                    "combinedKey": combinedKeyArr,
                                    "flexible": nestedQuotas.quantities.isFlexible,
                                    "flexiblePer": nestedQuotas.quantities.flexibility,
                                    "fielded": nestedQuotas.quantities.achieved
                                });
                            });
                            //console.log('$scope.nestedQuotasUiObj '+JSON.stringify($scope.nestedQuotasUiObj));
                            $scope.nestedQuota.has = true;
                        }else{
                            $scope.nestedQuota.has = false;
                        }
                        // Pushing data in Original Quota V2 Array In case of Live Survey Edit and Update
                        _.each(autoNestedQuotas, function(item){
                            nestedTempQuotaData.push(item);
                        });

                        // Advance Quotas
                        var advanceQuotas = _.filter(data.quotaV2Data.quotas, function(advance){
                            return advance.quotaCategory == "advance" && advance.isActive
                        });
                        _.each(advanceQuotas, function(item){
                            console.log('item ',JSON.stringify(item));
                            item['iden_key'] = item.criteria[0].qualification_code+'_'+item.criteria[0].conditions[0].id;
                            advQuota.push(item);
                        });
                        
                        /*------------Getting layered Quota---------*/
                        
                        // filter layered quota PD-961
                        var layeredQuotas = _.filter(data.quotaV2Data.quotas, function(layered){
                            return (layered.quotaCategory == "layered" || layered.quotaCategory == "grouped") && layered.isActive
                        });
                        
                        // grouping layered quota on category basis
                        var groupedData = _.groupBy(layeredQuotas, function(quota){
                            return quota.criteria[0].qualification_name
                        });
                        // Function puts the data into particular array after grouping to show on UI
                        var putDataInQuotaModal = function(sourceArr, destArr, layeredKey){
                            var condGroupingArr = [];
                            _.each(sourceArr, function(quota){
                                if(quota.criteria[0].qualification_code == config.childMasterQual.id){   // for children
                                    if(quota.criteria.length > 1){
                                        //destArr['have'] = new Array();
                                        var childQualId = new Number();
                                        var chldCritIndex = new Number();
                                        var gndrCritIndex = new Number();
                                        var ageCritIndex = new Number();
                                        // finding the index of gender, age and original child criteria
                                        childQualId = (_.findWhere(masterData, {"masterKey":layeredKey})).id;
                                        chldCritIndex = _.findIndex(quota.criteria, {"qualification_code": childQualId});
                                        gndrCritIndex = _.findIndex(quota.criteria, {"qualification_code":config.childMasterQual.gender});
                                        ageCritIndex = _.findIndex(quota.criteria, {"qualification_code":config.childMasterQual.age});
                                        var chldGender = new String();
                                        if(quota.criteria[gndrCritIndex].conditions.length == 2){
                                            chldGender = "both";
                                        }else{
                                            chldGender = quota.criteria[gndrCritIndex].conditions[0].id.toString();
                                        }
                                        //console.log('chldGender '+ageCritIndex);

                                        _.each(quota.criteria[ageCritIndex].range_sets, function(range){
                                            destArr.have.push({
                                                "id":quota.criteria[chldCritIndex].conditions[0].id,
                                                "gender":chldGender,
                                                "name":quota.criteria[chldCritIndex].conditions[0].name,
                                                "hasValidQuotas": quota.quantities.hasValidQuotas,
                                                "qual_id":quota.criteria[chldCritIndex].qualification_code,
                                                "percentage": quota.quantities.percentage,
                                                "per":quota.quantities.percentage,
                                                "maximum": quota.quantities.maximum,
                                                "minimum": quota.quantities.minimum,
                                                "number": quota.quantities.number,
                                                "flexiblePer": quota.quantities.flexibility,
                                                "flexible": quota.quantities.isFlexible,
                                                "min": range.from,
                                                "max": range.to,
                                                "achieved": quota.quantities.achieved
                                            });
                                        });
                                        if(quota.criteria[2].range_sets[0].units == config.childMasterQual.ageUnitYr.toString()){
                                            $scope.childAgeUnit.name = 'year';
                                            $scope.childAgeUnit.value = parseInt(quota.criteria[2].range_sets[0].units);
                                        }else{
                                            $scope.childAgeUnit.name = 'month';
                                            $scope.childAgeUnit.value = parseInt(quota.criteria[2].range_sets[0].units);
                                        }
                                    }else{
                                        destArr['no'] = new Array();
                                        destArr.no.push({
                                            "id":quota.criteria[0].conditions[0].id,
                                            "name":quota.criteria[0].conditions[0].name,
                                            "hasValidQuotas": quota.quantities.hasValidQuotas,
                                            "qual_id":quota.criteria[0].qualification_code,
                                            "percentage": quota.quantities.percentage,
                                            "per":quota.quantities.percentage,
                                            "maximum": quota.quantities.maximum,
                                            "minimum": quota.quantities.minimum,
                                            "number": quota.quantities.number,
                                            "flexiblePer": quota.quantities.flexibility,
                                            "flexible": quota.quantities.isFlexible,
                                            "achieved": quota.quantities.achieved
                                        });
                                    }
                                }else if(quota.criteria[0].q_type == "normal"){
                                    if(quota.quotaCategory == "grouped") {
                                        var dynamicName = "";
                                        var dynamicID = [];
                                        var q_nameArr = [];
                                        var qualsArr = ['states', 'csa', 'msa', 'dma', 'county'];
                                        
                                        _.each(quota.criteria[0].conditions, function(mergeCondName) {
                                            dynamicID.push(parseInt(mergeCondName.id));
                                            q_nameArr.push(mergeCondName.name);
                                            dynamicName = dynamicName + mergeCondName.name + " " +"or" + " ";
                                            condGroupingArr.push({"id": parseInt(mergeCondName.id), "name": mergeCondName.name});
                                            var index = _.findIndex(destArr, {"id": parseInt(mergeCondName.id)});
                                            //destArr.splice(index, 1);
                                            if(index != -1){
                                                destArr[index]['hasValidQuotas'] = quota.quantities.hasValidQuotas;
                                                destArr[index]['percentage'] = 0;
                                                destArr[index]['per'] = 0;
                                                destArr[index]['percent'] = 0;
                                                destArr[index]['maximum'] = 0;
                                                destArr[index]['minimum'] = 0;
                                                destArr[index]['number'] = 0;
                                                destArr[index]['flexiblePer'] = quota.quantities.flexibility;
                                                destArr[index]['flexible'] = quota.quantities.isFlexible;
                                                destArr[index]['achieved'] = 0;
                                                destArr[index]['selected'] = quota.quantities.selected || true;
                                                destArr[index]['name'] = mergeCondName.name;
                                            }
                                        });

                                        var groupedRow = {
                                            "hasValidQuotas": quota.quantities.hasValidQuotas,
                                            "percentage": quota.quantities.percentage,
                                             "per": quota.quantities.percentage,
                                             "percent": quota.quantities.percentage,
                                             "maximum": quota.quantities.maximum,
                                             "minimum": quota.quantities.minimum,
                                             "number": quota.quantities.number,
                                             "flexiblePer": quota.quantities.flexibility,
                                             "flexible": quota.quantities.isFlexible,
                                             "achieved": quota.quantities.achieved,
                                             "selected": quota.quantities.selected,
                                             "name": dynamicName.substring(0, dynamicName.length - 3),
                                             "id": parseInt(dynamicID),
                                             "condditionGroup": true,
                                             "name_arr": q_nameArr

                                        }
                                        if(!_.contains(qualsArr, layeredKey)) {
                                            destArr.push(groupedRow);
                                        }
                                    } 
                                    else {
                                        _.each(quota.criteria[0].conditions, function(cond){
                                            var index = _.findIndex(destArr, {"id": parseInt(cond.id)});
                                            if(index != -1){
                                                destArr[index]['hasValidQuotas'] = quota.quantities.hasValidQuotas;
                                                destArr[index]['percentage'] = quota.quantities.percentage;
                                                destArr[index]['per'] = quota.quantities.percentage;
                                                destArr[index]['percent'] = quota.quantities.percentage;
                                                destArr[index]['maximum'] = quota.quantities.maximum;
                                                destArr[index]['minimum'] = quota.quantities.minimum;
                                                destArr[index]['number'] = quota.quantities.number;
                                                destArr[index]['flexiblePer'] = quota.quantities.flexibility;
                                                destArr[index]['flexible'] = quota.quantities.isFlexible;
                                                destArr[index]['achieved'] = quota.quantities.achieved;
                                                destArr[index]['selected'] = quota.quantities.selected;
                                                destArr[index]['name'] = cond.name;
                                                //PD-1130
                                                if(_.has(quota.quantities, "hasCensusRepoQuota")) {
                                                   destArr[index]["hasCensusRepoQuota"] = quota.quantities.hasCensusRepoQuota;
                                                }
                                            }
                                        });
                                    }
                                    
                                }else if(quota.criteria[0].q_type == "range_sets"){
                                    _.each(quota.criteria[0].range_sets, function(range){
                                        var setQuotaObject = {
                                            "hasValidQuotas": quota.quantities.hasValidQuotas,
                                            "qual_id":quota.criteria[0].qualification_code,
                                            "percentage": quota.quantities.percentage,
                                            "per":quota.quantities.percentage,
                                            "maximum": quota.quantities.maximum,
                                            "minimum": quota.quantities.minimum,
                                            "number": quota.quantities.number,
                                            "flexiblePer": quota.quantities.flexibility,
                                            "flexible": quota.quantities.isFlexible,
                                            "min": range.from,
                                            "max": range.to,
                                            "achieved": quota.quantities.achieved
                                        }
                                        //PD-1130
                                        if(_.has(quota.quantities, "hasCensusRepoQuota")) {
                                               setQuotaObject.hasCensusRepoQuota = quota.quantities.hasCensusRepoQuota;
                                            }
                                        destArr.push(setQuotaObject);
                                    });
                                }
                            });
                            return destArr;
                        };
                        
                        //Check Census Repo Applied or not PD-1130
                        var hasCensusRepoApplied = function(quotaDataArr) {
                            var censusRepoFlag = false;
                            _.each(quotaDataArr, function(quota) {
                               if(_.has(quota.quantities, "hasCensusRepoQuota") && quota.quantities.hasCensusRepoQuota) {
                                   censusRepoFlag = true;
                               }
                            });
                            return censusRepoFlag;
                        }

                        //Check Grouped Quota Payload PD-961
                        var hasGroupedQuotas = function(groupData, quotaData, layeredKey) {
                            var tempQuotaObj = _.clone(quotaData);
                            var qualsArr = ['states', 'csa', 'msa', 'dma', 'county'];
                            _.each(groupData, function(sngleQuotas) {
                                if(sngleQuotas.quotaCategory == "grouped") {
                                    var dynamicName = "";
                                    var dynamicID = [];
                                    var q_nameArr = [];
                                    _.each(sngleQuotas.criteria[0].conditions, function(mergeCondName) {
                                        dynamicID.push(parseInt(mergeCondName.id));
                                        dynamicName = dynamicName + mergeCondName.name + " " +"or" + " ";
                                        q_nameArr.push(mergeCondName.name);
                                        var index = _.findIndex(tempQuotaObj, {"id": parseInt(mergeCondName.id)});
                                        tempQuotaObj.splice(index, 1);
                                        var matchedGroupObj = _.findWhere(quotaData, {id: parseInt(mergeCondName.id)});
                                        if(matchedGroupObj) {
                                            var getIndexMatch = _.indexOf(quotaData, matchedGroupObj);
                                            if(getIndexMatch > -1) {
                                                quotaData[getIndexMatch]["setGrupActive"] = true;
                                            }
                                        }

                                    });
                                    var raceObject = {
                                        "name":dynamicName.substring(0, dynamicName.length - 3),
                                        "id":dynamicID,
                                        "selected":true,
                                        "qual_id":sngleQuotas.criteria[0].qualification_code,
                                        "qual_name":sngleQuotas.criteria[0].qualification_name,
                                        "condditionGroup": true,
                                        "percentage": sngleQuotas.quantities.percentage,
                                        "achieved": sngleQuotas.quantities.achieved,
                                        "buyer_in_progress": sngleQuotas.counter.Buyer_side_In_Progress,
                                        "locked": sngleQuotas.locked,
                                        "flexiblePer": sngleQuotas.quantities.flexibility,
                                        "name_arr": q_nameArr,
                                        "number": sngleQuotas.quantities.number,
                                        "minimum": sngleQuotas.quantities.minimum,
                                        "maximum": sngleQuotas.quantities.maximum 
                                    }
                                    if(_.contains(qualsArr, sngleQuotas.criteria[0].qualification_name)) {
                                        raceObject["number"] = sngleQuotas.quantities.number;
                                        raceObject["minimum"] = sngleQuotas.quantities.minimum;
                                        raceObject["maximum"] = sngleQuotas.quantities.maximum;

                                    }
                                    tempQuotaObj.push(raceObject);
                                }
                            })
                            manageCondtitionGroupingArray(layeredKey, tempQuotaObj);

                            return tempQuotaObj;
                        }

                        // Putting data into particular quota
                        var targetLocType = ""; // related to old location Surveys
                        _.each(Object.keys(groupedData), function(layeredKey){
                            if(layeredKey == 'gender'){
                                $scope.sltGender = putDataInQuotaModal(groupedData[layeredKey], $scope.sltGender, layeredKey);
                                // For showing qualifications qualifications
                                showAddQuotaData($scope.genderInfo, $scope.sltGender, 'gender');
                                // Changing Flags
                                //PD-1130
                                var appliedGndrCensus = hasCensusRepoApplied(groupedData[layeredKey]);
                                if($scope.sltGender.length > 0 && $scope.sltGender[0].hasOwnProperty('number') && $scope.sltGender[0].hasOwnProperty('hasValidQuotas')){
                                    $scope.gndrQuotaFlag.resetGen = false;
                                    $scope.gndrQuotaFlag.hasGndrFlag = true;
                                    //PD-1130
                                    if(appliedGndrCensus) {
                                        $scope.censusRepoFlag.hasCensusRepoGndr = true;    
                                    }
                                   
                                    // For toggle Button
                                    $scope.gndrQuotaFlag.editGndrFlag = true;
                                    $scope.gndrQuotaFlag.gndrFlx = $scope.sltGender[0].flexible;
                                    $scope.gndrQuotaFlag.gndrFlxValue = $scope.sltGender[0].flexiblePer;
                                }
                            }else if(layeredKey == 'race'){
                                $scope.sltRace = putDataInQuotaModal(groupedData[layeredKey], $scope.sltRace, layeredKey);
                                // For showing qualifications
                                //showAddQuotaData($scope.race, $scope.sltRace, 'race');
                                var appliedGndrCensus = hasCensusRepoApplied(groupedData[layeredKey]);

                                var groupedTest = _.findWhere(groupedData[layeredKey], {"quotaCategory" : "grouped"});
                                if(groupedTest) {
                                    raceModelLiveEdit = _.clone($scope.race);

                                    $scope.newraceModal = hasGroupedQuotas(groupedData[layeredKey], $scope.race, layeredKey);
                                    
                                    showAddQuotaData($scope.newraceModal, $scope.sltRace, 'race');
                                }
                                else {
                                    showAddQuotaData($scope.race, $scope.sltRace, 'race');
                                }
                                // Changing Flags
                                if ($scope.sltRace.length > 0 && $scope.sltRace[0].hasOwnProperty('number') && $scope.sltRace[0].hasOwnProperty('hasValidQuotas')){
                                    $scope.raceQuotaFlag = {
                                        resetRace : false,
                                        hasRaceFlag : true,
                                        editRaceFlag : true
                                    }
                                    //PD-1130
                                    if(appliedGndrCensus) {
                                        $scope.censusRepoFlag.hasCensusRepoRace = true; 
                                    }
                                    
                                    // For toggle Button
                                    $scope.raceQuotaFlag.raceFlx = $scope.sltRace[0].flexible;
                                    $scope.raceQuotaFlag.raceFlxValue = $scope.sltRace[0].flexiblePer;
                                }
                            }else if(layeredKey == 'raceBera'){
                                //PD-1402
                                $scope.sltRaceBera = putDataInQuotaModal(groupedData[layeredKey], $scope.sltRaceBera, layeredKey);
                                var groupedTest = _.findWhere(groupedData[layeredKey], {"quotaCategory" : "grouped"}); 
                                if(groupedTest) {
                                    raceBeraModelLiveEdit = _.clone($scope.raceBera);

                                    $scope.groupingRaceBeraModel = hasGroupedQuotas(groupedData[layeredKey], $scope.raceBera, layeredKey);
                                    
                                    showAddQuotaData($scope.groupingRaceBeraModel, $scope.sltRaceBera, 'raceBera');
                                }
                                else  {
                                     // For showing qualifications
                                    showAddQuotaData($scope.raceBera, $scope.sltRaceBera, 'raceBera');
                                }
                               
                                // Changing Flags
                                if ($scope.sltRaceBera.length > 0 && $scope.sltRaceBera[0].hasOwnProperty('number') && $scope.sltRaceBera[0].hasOwnProperty('hasValidQuotas')){
                                    $scope.rbQuotaFlag.resetRb = false;
                                    $scope.rbQuotaFlag.hasRbFlag = true;
                                    $scope.rbQuotaFlag.editRbFlag = true;
                                    // For toggle Button
                                    $scope.rbQuotaFlag.rbFlx = $scope.sltRaceBera[0].flexible;
                                    $scope.rbQuotaFlag.rbFlxValue = $scope.sltRaceBera[0].flexiblePer;
                                }
                            }else if(layeredKey == 'hispanicOrigin'){
                                $scope.hispanicOrigin = putDataInQuotaModal(groupedData[layeredKey], $scope.hispanicOrigin, layeredKey);
                                // For showing qualifications
                                showAddQuotaData($scope.hispanic, $scope.hispanicOrigin, 'hispanic');
                                //PD-1130
                                var appliedGndrCensus = hasCensusRepoApplied(groupedData[layeredKey]);
                                // Changing Flags
                                if ($scope.hispanicOrigin.length > 0 && $scope.hispanicOrigin[0].hasOwnProperty('number') && $scope.hispanicOrigin[0].hasOwnProperty('hasValidQuotas')){
                                    $scope.hisQuotaFlag.resetHisOri = false;
                                    $scope.hisQuotaFlag.hasHisOriFlag = true;
                                    //PD-1130
                                    if(appliedGndrCensus) {
                                       $scope.censusRepoFlag.hasCensusRepoHis = true;  
                                    }
                                    $scope.hisQuotaFlag.editHisOriFlag = true;
                                    // For toggle Button
                                    $scope.hisQuotaFlag.hispanicFlx = $scope.hispanicOrigin[0].flexible;
                                    $scope.hisQuotaFlag.hispanicFlxValue = $scope.hispanicOrigin[0].flexiblePer;
                                }
                            }else if(layeredKey == 'educations'){
                                $scope.sltEducation = putDataInQuotaModal(groupedData[layeredKey], $scope.sltEducation, layeredKey);
                                // For showing qualifications qualifications
                                //showAddQuotaData($scope.education, $scope.sltEducation, 'edu');
                                //PD-1130
                                var appliedGndrCensus = hasCensusRepoApplied(groupedData[layeredKey]);
                                //PD-961
                                var groupedTest = _.findWhere(groupedData[layeredKey], {"quotaCategory" : "grouped"});
                                if(groupedTest) {
                                    educationModelLiveEdit = _.clone($scope.education);

                                    $scope.groupingeducationModal = hasGroupedQuotas(groupedData[layeredKey], $scope.education, layeredKey);
                                    
                                    showAddQuotaData($scope.groupingeducationModal, $scope.sltEducation, 'edu');
                                }
                                else {
                                    showAddQuotaData($scope.education, $scope.sltEducation, 'edu');
                                }
                                // Changing Flags
                                if ($scope.sltEducation.length > 0 && $scope.sltEducation[0].hasOwnProperty('number') && $scope.sltEducation[0].hasOwnProperty('hasValidQuotas')){
                                    $scope.eduQuotaFlag.resetEdu = false;
                                    $scope.eduQuotaFlag.hasEduFlag = true;
                                    if(appliedGndrCensus) {
                                        $scope.censusRepoFlag.hasCensusRepoEdu = true;
                                    }
                                    $scope.eduQuotaFlag.editEduFlag = true;
                                    // For toggle Button
                                    $scope.eduQuotaFlag.eduFlx = $scope.sltEducation[0].flexible;
                                    $scope.eduQuotaFlag.eduFlxValue = $scope.sltEducation[0].flexiblePer;
                                }
                            }else if(layeredKey == 'employments'){
                                $scope.sltEmployment = putDataInQuotaModal(groupedData[layeredKey], $scope.sltEmployment, layeredKey);
                                // For showing qualifications qualifications
                                //showAddQuotaData($scope.employement, $scope.sltEmployment, 'emp');
                                var appliedGndrCensus = hasCensusRepoApplied(groupedData[layeredKey]);
                                //PD-961
                                var groupedTest = _.findWhere(groupedData[layeredKey], {"quotaCategory" : "grouped"});
                                if(groupedTest) {
                                    employmentModelLiveEdit = _.clone($scope.employement);

                                    $scope.groupingemploymentModal = hasGroupedQuotas(groupedData[layeredKey], $scope.employement, layeredKey);
                                    
                                    showAddQuotaData($scope.groupingemploymentModal, $scope.sltEmployment, 'emp');
                                }
                                else {
                                    showAddQuotaData($scope.employement, $scope.sltEmployment, 'emp');
                                }
                                // Changing Flags
                                if($scope.sltEmployment.length > 0 && $scope.sltEmployment[0].hasOwnProperty('number') && $scope.sltEmployment[0].hasOwnProperty('hasValidQuotas')){
                                    $scope.empQuotaFlag.resetEmp = false;
                                    $scope.empQuotaFlag.hasEmpFlag = true;
                                    if(appliedGndrCensus) {
                                        $scope.censusRepoFlag.hasCensusRepoEmploy = true;
                                    }
                                    $scope.empQuotaFlag.editEmpFlag = true;
                                    // For toggle Button
                                    $scope.empQuotaFlag.empFlx = $scope.sltEmployment[0].flexible;
                                    $scope.empQuotaFlag.empFlxValue = $scope.sltEmployment[0].flexiblePer;
                                }
                            }else if(layeredKey == 'relationships'){
                                $scope.sltRelation = putDataInQuotaModal(groupedData[layeredKey], $scope.sltRelation, layeredKey);
                                
                                //PD-961
                                var groupedTest = _.findWhere(groupedData[layeredKey], {"quotaCategory" : "grouped"});
                                if(groupedTest) {
                                    relationModelLiveEdit = _.clone($scope.relation);
                                    $scope.newrelationModal = hasGroupedQuotas(groupedData[layeredKey], $scope.relation, layeredKey);
                                    
                                    showAddQuotaData($scope.newrelationModal, $scope.sltRelation, 'relation');
                                }
                                else {
                                    showAddQuotaData($scope.relation, $scope.sltRelation, 'relation');
                                }
                                // Changing Flags
                                if ($scope.sltRelation.length > 0 && $scope.sltRelation[0].hasOwnProperty('number') && $scope.sltRelation[0].hasOwnProperty('hasValidQuotas')){
                                    $scope.rlnQuotaFlag.resetRel = false;
                                    $scope.rlnQuotaFlag.hasRlnFlag = true;
                                    $scope.rlnQuotaFlag.editRlnFlag = true;
                                    // For toggle Button
                                    $scope.rlnQuotaFlag.rlnFlx = $scope.sltRelation[0].flexible;
                                    $scope.rlnQuotaFlag.rlnFlxValue = $scope.sltRelation[0].flexiblePer;
                                }
                            }else if(layeredKey == 'device'){
                                //PD-1402
                                $scope.sltDevice = putDataInQuotaModal(groupedData[layeredKey], $scope.sltDevice, layeredKey);
                                
                                var groupedTest = _.findWhere(groupedData[layeredKey], {"quotaCategory" : "grouped"});
                                if(groupedTest) {
                                    deviceModelLiveEdit = _.clone($scope.deviceInfo);
                                    $scope.groupingDeviceModel = hasGroupedQuotas(groupedData[layeredKey], $scope.deviceInfo, layeredKey);
                                    
                                    showAddQuotaData($scope.groupingDeviceModel, $scope.sltDevice, 'dvc');
                                }
                                else {
                                    showAddQuotaData($scope.deviceInfo, $scope.sltDevice, 'dvc');
                                }
                                
                                // Changing Flags
                                if ($scope.sltDevice.length > 0 && $scope.sltDevice[0].hasOwnProperty('number') && $scope.sltDevice[0].hasOwnProperty('hasValidQuotas')){
                                    $scope.dvcQuotaFlag.resetDev = false;
                                    $scope.dvcQuotaFlag.hasDeviceFlag = true;
                                    $scope.dvcQuotaFlag.editDvcFlag = true;
                                    // For toggle Button
                                    $scope.dvcQuotaFlag.dvcFlx = $scope.sltDevice[0].flexible;
                                    $scope.dvcQuotaFlag.dvcFlxValue = $scope.sltDevice[0].flexiblePer;
                                }
                            }else if(layeredKey == 'regions'){
                    
                                $scope.sltRegion = putDataInQuotaModal(groupedData[layeredKey], $scope.sltRegion, layeredKey);
                                //PD-1402
                                var groupedTest = _.findWhere(groupedData[layeredKey], {"quotaCategory" : "grouped"});
                                if(groupedTest) {
                                    censusRgnModelLiveEdit = _.clone($scope.region);
                                    $scope.groupingCensusRgnModel = hasGroupedQuotas(groupedData[layeredKey], $scope.region, layeredKey);
                                    
                                    // For showing qualifications qualifications
                                    showAddQuotaData($scope.groupingCensusRgnModel, $scope.sltRegion, 'rgn');
                                }
                                else {
                                    // For showing qualifications qualifications
                                    showAddQuotaData($scope.region, $scope.sltRegion, 'rgn');
                                }
                                
                                // Changing Flags
                                if($scope.sltRegion.length > 0 && $scope.sltRegion[0].hasOwnProperty('number') && $scope.sltRegion[0].hasOwnProperty('hasValidQuotas')){
                                    $scope.regQuotaFlag.resetReg = false;
                                    $scope.regQuotaFlag.hasRegionFlag = true;
                                    $scope.regQuotaFlag.editRegionFlag = true;
                                    // For toggle Button
                                    $scope.regQuotaFlag.regionFlx = $scope.sltRegion[0].flexible;
                                    $scope.regQuotaFlag.regionFlxValue = $scope.sltRegion[0].flexiblePer;
                                    if(data.survey[0].locationKey != undefined && data.survey[0].locationKey != null && data.survey[0].locationKey != ""){
                                        targetLocType = 'region';
                                    }
                                }
                            }else if(layeredKey == 'divisions'){
                                $scope.sltDivision = putDataInQuotaModal(groupedData[layeredKey], $scope.sltDivision, layeredKey);
                                //PD-1402
                                var groupedTest = _.findWhere(groupedData[layeredKey], {"quotaCategory" : "grouped"});
                                if(groupedTest) {
                                    divisionModelLiveEdit = _.clone($scope.division);
                                    $scope.groupingDivisionModel = hasGroupedQuotas(groupedData[layeredKey], $scope.division, layeredKey);
                                    
                                    // For showing qualifications qualifications
                                    
                                    showAddQuotaData($scope.groupingDivisionModel, $scope.sltDivision, 'dvsn');
                                }
                                else {
                                     // For showing qualifications qualifications
                                    showAddQuotaData($scope.division, $scope.sltDivision, 'dvsn');
                                }

                                if($scope.sltDivision.length > 0 && $scope.sltDivision[0].hasOwnProperty('number') && $scope.sltDivision[0].hasOwnProperty('hasValidQuotas')){
                                    $scope.dvsnQuotaFlag.resetDivi = false;
                                    $scope.dvsnQuotaFlag.hasDivisionFlag = true;
                                    $scope.dvsnQuotaFlag.editDivisionFlag = true;
                                    // For toggle Button
                                    $scope.dvsnQuotaFlag.divisionFlx = $scope.sltDivision[0].flexible;
                                    $scope.dvsnQuotaFlag.divisionFlxValue = $scope.sltDivision[0].flexiblePer;
                                   
                                    if(data.survey[0].locationKey != undefined && data.survey[0].locationKey != null && data.survey[0].locationKey != ""){
                                        targetLocType = 'division';
                                    }
                                }
                            }else if(layeredKey == 'states'){
                                $scope.selectedStates = putDataInQuotaModal(groupedData[layeredKey], $scope.selectedStates, layeredKey);
                                //PD-1402
                                var groupedTest = _.findWhere(groupedData[layeredKey], {"quotaCategory" : "grouped"});
                                if(groupedTest) {
                                    $scope.groupingStateModel = hasGroupedQuotas(groupedData[layeredKey], $scope.selectedStates, layeredKey);
                                    _.each($scope.groupingStateModel, function(stateQuota){
                                        stateQuota.selected = true;
                                    });
                                    
                                }
                                else {
                                    _.each($scope.selectedStates, function(stateQuota){
                                        stateQuota.selected = true;
                                    });
                                }
                                // Changing Flags and Adding qualifications in location variables
                                
                                if($scope.selectedStates.length > 0 && $scope.selectedStates[0].hasOwnProperty('number') && $scope.selectedStates[0].hasOwnProperty('hasValidQuotas')){
                                    $scope.resetStateQuotas = false;
                                    $scope.editStateFlag = true;
                                    $scope.hasStateFlag = true;
                                    // For Toggle Button
                                    $scope.stateFlexibility.flxValue = $scope.selectedStates[0].flexiblePer;
                                    $scope.stateFlexibility.isFlexible = $scope.selectedStates[0].flexible;
                                    if(data.survey[0].locationKey != undefined && data.survey[0].locationKey != null && data.survey[0].locationKey != ""){
                                        targetLocType = 'state';
                                    }
                                }
                            }else if(layeredKey == 'csa'){
                                $scope.selectedCSAs = putDataInQuotaModal(groupedData[layeredKey], $scope.selectedCSAs, layeredKey);
                                // Changing Flags and Adding qualifications in location variables
                                //PD-1402
                                var groupedTest = _.findWhere(groupedData[layeredKey], {"quotaCategory" : "grouped"});
                                if(groupedTest) {
                                    $scope.groupingCsaModel = hasGroupedQuotas(groupedData[layeredKey], $scope.selectedCSAs, layeredKey);
                                    _.each($scope.groupingCsaModel, function(stateQuota){
                                        stateQuota.selected = true;
                                    });
                                    
                                }
                                else {
                                    _.each($scope.selectedCSAs, function(csaQuota){
                                        csaQuota.selected = true;
                                    });
                                }
                                if($scope.selectedCSAs.length > 0 && $scope.selectedCSAs[0].hasOwnProperty('number') && $scope.selectedCSAs[0].hasOwnProperty('hasValidQuotas')){
                                    $scope.resetCSAQuotas = false;
                                    $scope.editCSAFlag = true;
                                    $scope.hasCSAFlag = true;
                                    // For Toggle Button
                                    $scope.csaFlexibility.flxValue = $scope.selectedCSAs[0].flexiblePer;
                                    $scope.csaFlexibility.isFlexible = $scope.selectedCSAs[0].flexible;
                                    if(data.survey[0].locationKey != undefined && data.survey[0].locationKey != null && data.survey[0].locationKey != ""){
                                        targetLocType = 'csa';
                                    }
                                }
                            }else if(layeredKey == 'msa'){
                                $scope.selectedMSAs = putDataInQuotaModal(groupedData[layeredKey], $scope.selectedMSAs, layeredKey);
                                // Changing Flags and Adding qualifications in location variables
                                //PD-1402
                                var groupedTest = _.findWhere(groupedData[layeredKey], {"quotaCategory" : "grouped"});
                                if(groupedTest) {
                                    $scope.groupingMsaModel = hasGroupedQuotas(groupedData[layeredKey], $scope.selectedMSAs, layeredKey);
                                    _.each($scope.groupingMsaModel, function(stateQuota){
                                        stateQuota.selected = true;
                                    });
                                    
                                }
                                else {
                                    _.each($scope.selectedMSAs, function(msaQuota){
                                        msaQuota.selected = true;
                                    });
                                }
                                if($scope.selectedMSAs.length > 0 && $scope.selectedMSAs[0].hasOwnProperty('number') && $scope.selectedMSAs[0].hasOwnProperty('hasValidQuotas')) {
                                    $scope.resetMSAQuotas = false;
                                    $scope.editMSAFlag = true;
                                    $scope.hasMSAFlag = true;
                                    // For Toggle Button
                                    $scope.msaFlexibility.flxValue = $scope.selectedMSAs[0].flexiblePer;
                                    $scope.msaFlexibility.isFlexible = $scope.selectedMSAs[0].flexible;
                                    if(data.survey[0].locationKey != undefined && data.survey[0].locationKey != null && data.survey[0].locationKey != ""){
                                        targetLocType = 'msa';
                                    }
                                }
                            }else if(layeredKey == 'dma'){
                                $scope.selectedDMAs = putDataInQuotaModal(groupedData[layeredKey], $scope.selectedDMAs, layeredKey);
                                // Changing Flags and Adding qualifications in location variables
                                //PD-1402
                                var groupedTest = _.findWhere(groupedData[layeredKey], {"quotaCategory" : "grouped"});
                                if(groupedTest) {
                                    $scope.groupingDmaModel = hasGroupedQuotas(groupedData[layeredKey], $scope.selectedDMAs, layeredKey);
                                    _.each($scope.groupingDmaModel, function(stateQuota){
                                        stateQuota.selected = true;
                                    });
                                    
                                }
                                else {
                                   _.each($scope.selectedDMAs, function(dmaQuota){
                                        dmaQuota.selected = true;
                                    }); 
                                }
                                
                                if($scope.selectedDMAs.length > 0 && $scope.selectedDMAs[0].hasOwnProperty('number') && $scope.selectedDMAs[0].hasOwnProperty('hasValidQuotas')){
                                    $scope.resetDMAQuotas = false;
                                    $scope.editDMAFlag = true;
                                    $scope.hasDMAFlag = true;
                                    // For Toggle Button
                                    $scope.dmaFlexibility.flxValue = $scope.selectedDMAs[0].flexiblePer;
                                    $scope.dmaFlexibility.isFlexible = $scope.selectedDMAs[0].flexible;
                                    if(data.survey[0].locationKey != undefined && data.survey[0].locationKey != null && data.survey[0].locationKey != ""){
                                        targetLocType = 'dma';
                                    }
                                }
                            }else if(layeredKey == 'county'){
                                $scope.selectedCountys = putDataInQuotaModal(groupedData[layeredKey], $scope.selectedCountys, layeredKey);
                                // Changing Flags and Adding qualifications in location variables
                                //PD-1402
                                var groupedTest = _.findWhere(groupedData[layeredKey], {"quotaCategory" : "grouped"});
                                if(groupedTest) {
                                    $scope.groupingCountyModel = hasGroupedQuotas(groupedData[layeredKey], $scope.selectedCountys, layeredKey);
                                    _.each($scope.groupingCountyModel, function(stateQuota){
                                        stateQuota.selected = true;
                                    });
                                    
                                }
                                else {
                                  _.each($scope.selectedCountys, function(countyQuota){
                                        countyQuota.selected = true;
                                    });  
                                }
                                
                                if($scope.selectedCountys.length > 0 && $scope.selectedCountys[0].hasOwnProperty('number') && $scope.selectedCountys[0].hasOwnProperty('hasValidQuotas')) {
                                    $scope.resetCountyQuotas = false;
                                    $scope.editCountyFlag = true;
                                    $scope.hasCountyFlag = true;
                                    // For Toggle Button
                                    $scope.countyFlexibility.flxValue = $scope.selectedCountys[0].flexiblePer;
                                    $scope.countyFlexibility.isFlexible = $scope.selectedCountys[0].flexible;
                                    if(data.survey[0].locationKey != undefined && data.survey[0].locationKey != null && data.survey[0].locationKey != ""){
                                        targetLocType = 'county';
                                    }
                                }
                            }else if(layeredKey == 'age'){
                                $scope.ageTempArr = [];
                                $scope.ageTempArr = putDataInQuotaModal(groupedData[layeredKey], $scope.ageTempArr, layeredKey);
                                //PD-1130
                                var appliedGndrCensus = hasCensusRepoApplied(groupedData[layeredKey]);
                                //Checking data for Age Array
                                if($scope.ageTempArr.length > 0 && $scope.ageTempArr[0].hasOwnProperty('hasValidQuotas') && $scope.ageTempArr[0].hasOwnProperty('number')){
                                    $scope.ageQuotaFlag.ageFlx = $scope.ageTempArr[0].flexible;
                                    $scope.ageQuotaFlag.ageFlxValue = parseInt($scope.ageTempArr[0].flexiblePer);
                                    $scope.ageData.min = (_.min($scope.ageTempArr, function(elm){ 
                                        return elm.min;
                                    })).min;
                                    $scope.ageData.max = (_.max($scope.ageTempArr, function(elm){ return elm.max; })).max;
                                    $scope.ageTempArr.unshift({
                                        "min": '',
                                        "max": '',
                                        "number": '',
                                        "per": '',
                                        "flexiblePer": '0',
                                        "flexible": $scope.ageTempArr[0].flexible
                                    });
                                    $scope.ageQuotaFlag.resetAge = false;
                                    $scope.ageQuotaFlag.hasAgeFlag = true;
                                    //PD-1130
                                    if(appliedGndrCensus) {
                                        $scope.censusRepoFlag.hasCensusRepoAge = true;
                                    } 
                                    $scope.ageQuotaFlag.editAgeFlag = true;
                                    $scope.ageQuotaFlag.clearAgeFlag = true;
                                }
                            }else if(layeredKey == 'houseHoldIncome'){
                                $scope.incomeTempArr = [];
                                $scope.incomeTempArr = putDataInQuotaModal(groupedData[layeredKey], $scope.incomeTempArr, layeredKey);
                                //PD-1130
                                var appliedGndrCensus = hasCensusRepoApplied(groupedData[layeredKey]);
                                //Checking data for income Array
                                if($scope.incomeTempArr.length > 0 && $scope.incomeTempArr[0].hasOwnProperty('hasValidQuotas') && $scope.incomeTempArr[0].hasOwnProperty('number')){
                                    $scope.incomeQuotaFlag.incomeFlxValue = parseInt($scope.incomeTempArr[0].flexiblePer);
                                    $scope.incFlx = $scope.incomeTempArr[0].flexible;
                                    $scope.houseHoldIncome.min = (_.min($scope.incomeTempArr, function(elm){ 
                                        return elm.min;
                                     })).min;
                                    $scope.houseHoldIncome.max = (_.max($scope.incomeTempArr, function(elm){ return elm.max; })).max;
                                    $scope.incomeTempArr.unshift({
                                        "min": '',
                                        "max": '',
                                        "number": '',
                                        "per": '',
                                        "flexiblePer": '0',
                                        "flexible": $scope.incomeTempArr[0].flexible
                                    });
                                    $scope.incomeQuotaFlag.resetInc = false;
                                    $scope.incomeQuotaFlag.hasIncomeFlag = true;
                                    //PD-1130
                                    if(appliedGndrCensus) {
                                        $scope.censusRepoFlag.hasCensusRepoIncome = true;
                                    }
                                     
                                    $scope.incomeQuotaFlag.editIncomeFlag = true;
                                    $scope.incomeQuotaFlag.clearIncomeFlag = true;
                                };
                            }else if(layeredKey == 'children'){
                                $scope.chldTempArr = putDataInQuotaModal(groupedData[layeredKey], $scope.chldTempArr, layeredKey);
                                //Checking data for income Array
                                if($scope.chldTempArr.no || $scope.chldTempArr.have){
                                    $scope.childQuotaFlag.chldFlxValue = parseInt($scope.chldTempArr.have[0].flexiblePer) ? parseInt($scope.chldTempArr.have[0].flexiblePer): parseInt($scope.chldTempArr.no[0].flexiblePer);
                                    $scope.childQuotaFlag.chldFlx = $scope.chldTempArr.have[0].flexible ? $scope.chldTempArr.have[0].flexible:$scope.chldTempArr.no[0].flexible;
                                    if($scope.chldTempArr.have[0].number){
                                        $scope.chldTempArr.have.unshift({
                                            "id": $scope.chldTempArr.have[0].id,
                                            "min": '',
                                            "max": '',
                                            "gender":'',
                                            "number": '',
                                            "per": '',
                                            "flexiblePer": '0',
                                            "flexible": $scope.childQuotaFlag.chldFlx
                                        });
                                    }
                                    $scope.childQuotaFlag.editChldFlag = true;
                                    $scope.childQuotaFlag.hasChldFlag = true;
                                    $scope.childQuotaFlag.resetChild = false;
                                    $scope.chldTotalRemRace = 0;
                                }
                            }
                            else if(layeredKey == "zipcodes") {
                                
                                _.each(groupedData[layeredKey], function(singleQuota){
                                    var zipCodeQuota = {
                                        'hasValidQuotas': singleQuota.quantities.hasValidQuotas,
                                        'percentage': singleQuota.quantities.percentage,
                                        'per': singleQuota.quantities.percentage,
                                        'percent': singleQuota.quantities.percentage,
                                        'maximum': singleQuota.quantities.maximum,
                                        'minimum': singleQuota.quantities.minimum,
                                        'number': singleQuota.quantities.number,
                                        'flexiblePer': singleQuota.quantities.flexibility,
                                        'flexible': singleQuota.quantities.isFlexible,
                                        'achieved': singleQuota.quantities.achieved,
                                        'selected': true
                                    };
                                    _.each(singleQuota.criteria, function(singleCriteria) {
                                        zipCodeQuota["qual_id"] = singleCriteria.qualification_code;
                                        zipCodeQuota["qual_name"]=  singleCriteria.qualification_name;
                                        zipCodeQuota["name"] = singleCriteria.conditions[0].name;
                                        zipCodeQuota["buyer_ziplist_ref"] = singleCriteria.buyer_ziplist_ref;

                                    })
                                    $scope.selectedZipcodes.push(zipCodeQuota);
                                    $scope.zipcodeFlexibility.isFlexible = singleQuota.quantities.isFlexible;
                                    $scope.zipcodeFlexibility.flxValue = singleQuota.quantities.flexibility
                                });
                                angular.copy($scope.selectedZipcodes, $scope.zipCodeQuotaManage);
                                _.each($scope.zipCodeQuotaManage, function(snglQta) {
                                    snglQta.number = "";
                                    snglQta.percentage = "";
                                    snglQta.per = "";
                                    snglQta.maximum = "";
                                    snglQta.minimum = "";
                                    snglQta.achieved = "";
                                })
                                $scope.zipcodeQuotaFlg.editZipcodeFlag = true;
                                $scope.zipcodeQuotaFlg.resetZipQuotaFlg = false;
                            }
                        });
                        // Changed due to default quota is added in same variable for age
                        // ageTempVar is taken for holding qualifications in case of default quota
                        if(!$scope.ageData.min && !$scope.ageData.max){
                            if($scope.ageTempArr.length > 0){
                                $scope.ageData.min = $scope.ageTempArr[0].min;
                                $scope.ageData.max = $scope.ageTempArr[0].max;
                            }else if(ageTempVar.length > 0){
                                $scope.ageData.min = ageTempVar[0].min;
                                $scope.ageData.max = ageTempVar[0].max;
                            }else{
                                $scope.ageData.min = 13;
                                $scope.ageData.max = 99;
                            }
                        }
                        if(!$scope.houseHoldIncome.min && !$scope.houseHoldIncome.max && $scope.incomeTempArr.length > 0){
                            $scope.houseHoldIncome.min = $scope.incomeTempArr[0].min;
                            $scope.houseHoldIncome.max = $scope.incomeTempArr[0].max;
                        }
                    }else{
                        // fill age and income min and max values if quotas are not present
                        if($scope.ageTempArr.length > 0){
                            $scope.ageData.min = $scope.ageTempArr[0].min;
                            $scope.ageData.max = $scope.ageTempArr[0].max;
                        }else if(ageTempVar.length > 0){
                            $scope.ageData.min = ageTempVar[0].min;
                            $scope.ageData.max = ageTempVar[0].max;
                        }else{
                            $scope.ageData.min = 13;
                            $scope.ageData.max = 99;
                        }
                        if($scope.houseHoldIncome.length > 0){
                            $scope.houseHoldIncome.min = $scope.incomeTempArr[0].min;
                            $scope.houseHoldIncome.max = $scope.incomeTempArr[0].max;
                        }else{
                            $scope.houseHoldIncome.min = 0;
                            $scope.houseHoldIncome.max = 999999;
                        }
                    }
                    //ZiCode Quota Payload for ADD QUota Button enable
                    if(data.zipQuotaArr && data.zipQuotaArr.length > 0) {
                        $scope.selectedZipcodes = [];
                        _.each(data.zipQuotaArr, function(snglZip) {
                            var tempObject = {
                                flexible:true,
                                flexiblePer:0,
                                hasValidQuotas:false,
                                maximum: "",
                                minimum: "",
                                name: snglZip.group_name,
                                number: "",
                                percentage: "",
                                selected:true,
                                zipWithNoQuota: true,
                                buyer_ziplist_ref : snglZip.byr_pst_ref
                            }
                            $scope.selectedZipcodes.push(tempObject);
                        })
                        $scope.zipcodeQuotaFlg.addZipQuotaFlg = true;
                    }
                    //Some Age, Income and Children variables changes in every case to show the default data in boxes
                    $scope.ageSltBoxTlt();
                    $scope.incomeSltBoxTlt();

                    $scope.properties.surveyTitle = data.survey[0].surveyTitle;
                    $scope.properties.oldSurveyTitle = data.survey[0].surveyTitle;
                    // set locale again 
                    $scope.properties.locale = data.survey[0].locale;
                    
                    /*----------For the cloned Survey PD-1549--------------*/ 
                    if($stateParams.id == 'CreateSurveys' && $scope.newId){                                                                                     
                        if(data.survey[0].surveyTitle.substring(0,5) == 'CLONE') {
                            var cloneStrArr = data.survey[0].surveyTitle.split('-');
                            var cloneNum = cloneStrArr[0].split('CLONE');
                
                            if(!isNaN(parseInt(cloneNum[1]))) {
                                var cloneCount = parseInt(cloneNum[1]) + 1;
                            }
                            else {
                                var cloneCount = 1;
                            }
                            var matchIndex = _.indexOf(cloneStrArr, cloneStrArr[0]);

                            cloneStrArr.splice(matchIndex, 1);
                            var tailStr = "";
                            _.each(cloneStrArr, function(str) {
                                tailStr += "-" + str;
                            })
                            $scope.properties.surveyTitle = "CLONE" + cloneCount + tailStr;
                            
                        }
                        else{
                            $scope.properties.surveyTitle = 'CLONE-' + data.survey[0].surveyTitle;  
                            
                        }
                    }
                    /*----------Cloned Surveys Ends----------*/

                    $scope.properties.numberOfCompletes = data.survey[0].number;
                    $scope.properties.currencyFx = data.survey[0].currencyFx || {fx: 321,symbol: '$'};
                    $scope.properties.oldNumberOfCompletes = data.survey[0].number;
                    $scope.completes = data.survey[0].number;
                    $scope.properties.samplesType = data.survey[0].samplesType;
                    $scope.properties.country = data.survey[0].country;
                    $scope.properties.language = data.survey[0].language;
                    $scope.properties.lengthOfSurvey = data.survey[0].lengthOfSurvey;
                    $scope.incidence = data.survey[0].incidence;
                    $scope.properties.field_time = data.survey[0].field_time || 0;    //PD-569
                    $scope.field_time = data.survey[0].field_time || 0;               //PD-569
                    $scope.properties.oldFieldTime = data.survey[0].field_time || 0;
                    $scope.properties.creationDate = data.survey[0].creation_date;
                    $scope.zipCodes = data.survey[0].location.zipcode.values;
                    //$scope.location.zipcode.values = data.survey[0].location.zipcode.values;
                    $scope.cpi = data.survey[0].cpi;
                    $scope.properties.countryCode = data.survey[0].locale.countryCode;
                    $scope.properties.countryName = data.survey[0].locale.countryName;
                    $scope.properties.languageCode = data.survey[0].locale.languageCode;
                    $scope.properties.languageName = data.survey[0].locale.languageName;
                    $scope.properties.languageTranslate = data.survey[0].locale.languageTranslate

                    $scope.blrFld.lang = data.survey[0].language;
                    $scope.blrFld.cntry = data.survey[0].country;
                    $scope.blrFld.LOI = data.survey[0].lengthOfSurvey;
                    $scope.blrFld.incd = data.survey[0].incidence;
                    
                    calculateTotalCost();
                    $scope.samplesValue = getValueOfDropDown($scope.samples, data.survey[0].samplesType);
                    $scope.countryValue = getValueOfDropDown($scope.country, data.survey[0].country);
                    $scope.languageValue = getLanguageDropdownValue(data.survey[0].country, data.survey[0].language);

                    optionsToDisplay(data.survey[0].locale.countryCode);
                    $scope.getCompletes(data.survey[0].number);
                    if (data.survey[0].supplier.length > 0) {
                        $scope.goFinalSurvey = true;
                    }
                    //getting file path of zipcodes 
                    if(data.survey[0].zipcodeFilePath != undefined && data.survey[0].zipcodeFilePath != null && data.survey[0].zipcodeFilePath != "") {
                        $scope.properties.zipcodeFilePath = data.survey[0].zipcodeFilePath;
                        zipcodeFilePath = data.survey[0].zipcodeFilePath;
                    }

                    //PD-321
                    //check for locationKey;
                    if(data.survey[0].locationKey != undefined && data.survey[0].locationKey != null && data.survey[0].locationKey != "") {
                        //assign selected location
                        $scope.locationData.type = data.survey[0].locationKey;
                        $scope.locationData.selected = true;
                        $timeout(function() {
                            //id pattern 'tab-' for tab
                            //to set tab active
                            document.getElementById('tab-'+data.survey[0].locationKey).classList.add("active");
                            angular.element(angular.element('#tab-'+data.survey[0].locationKey)[0].firstChild.getAttribute('href')).addClass('active');
                        },0);
                    }else {
                        //PD-321 
                        //selct tab
                        if(targetLocType != undefined && targetLocType != null && targetLocType != "") {
                            $scope.locationData.type = targetLocType;
                            $scope.locationData.selected = true;
                            $timeout(function() {
                                //id pattern 'tab-' for tab
                                //to set tab active
                                document.getElementById('tab-'+targetLocType).classList.add("active");
                                angular.element(angular.element('#tab-'+targetLocType)[0].firstChild.getAttribute('href')).addClass('active');
                            },0);
                        }
                    }
                    //Check If Clone is Live/pause/closed byPass this function (Added by Amar)
                    if(data.survey[0].status === 11 && $scope.clone) {
                        getTotalAchivedInLocation();
                    }
                    
                    $scope.loader.show = false;
                }
            }).error(function(err) {
                $scope.loader.show = false;
                notify({
                    message: "Error in Update",
                    classes: 'alert-danger',
                    duration: 4000
                });
            })
        }
    };
    
    function getTotalAchivedInLocation(){
        $scope.locationData.achieved = 0;
        /*PD-709*/
       $scope.currLocQuotaFielded = 0;
        if($scope.srvId == undefined) {
            $scope.srvId = $scope.newId;
        }
        createSurvey.getSurveyManagement($scope.srvId, 'buyer', $scope.properties.locale).success(function(data){
            if(data.apiStatus == "Success"){
                $scope.locationData.achieved = (data && data.result && data.result.length > 0 && data.result[0].fielded) ? data.result[0].fielded : 0;
            }
        }).error(function(err){
            notify({message:"Something went wrong in fetching fielded for location",classes:'alert-danger',duration:2000} );
        });
        if($scope.locationData.type == "region") {
            _.each($scope.region , function(value){
                if(value.achieved){
                    $scope.currLocQuotaFielded = $scope.currLocQuotaFielded+ value.achieved;
                }
            })
        }
        if($scope.locationData.type == "division") {
            _.each($scope.division , function(value){
                if(value.achieved){
                    $scope.currLocQuotaFielded = $scope.currLocQuotaFielded+ value.achieved;
                }
            })
        }
        if($scope.locationData.type == "state") {
            _.each($scope.selectedStates , function(value){
                if(value.achieved){
                    $scope.currLocQuotaFielded = $scope.currLocQuotaFielded+ value.achieved;
                }
            })
        }
        if($scope.locationData.type == "dma") {
            _.each($scope.selectedDMAs , function(value){
                if(value.achieved){
                    $scope.currLocQuotaFielded = $scope.currLocQuotaFielded+ value.achieved;
                }
            })
        }
        if($scope.locationData.type == "csa") {
            _.each($scope.selectedCSAs , function(value){
                if(value.achieved){
                    $scope.currLocQuotaFielded = $scope.currLocQuotaFielded+ value.achieved;
                }
            })
        }
        if($scope.locationData.type == "msa") {
            _.each($scope.selectedMSAs , function(value){
                if(value.achieved){
                    $scope.currLocQuotaFielded = $scope.currLocQuotaFielded+ value.achieved;
                }
            })
        }
        if($scope.locationData.type == "county") {
            _.each($scope.selectedCountys , function(value){
                if(value.achieved){
                    $scope.currLocQuotaFielded = $scope.currLocQuotaFielded+ value.achieved;
                }
            })
        }
    }

    $scope.goToSuppliers = function() {
        if ($scope.srvId) {
            $scope.saveSurvey('moveToNext');
        }
    };

    function getValueOfDropDown(arr, id) {
        for (var i in arr) {
            if (arr[i].id == id) {
                return arr[i].name;
            }
        }
    }

    function getLanguageDropdownValue(ctId, lgId) {
        commonApi.getLanguageByCountry(ctId).success(function(dataLang) {
            if (dataLang.languages != null) {
                $scope.lang = dataLang.languages;
                for (var i in dataLang.languages) {
                    if (dataLang.languages[i].id == lgId) {
                        document.getElementById("languagedrop").innerHTML = dataLang.languages[i].name; //update value in UI
                        return $scope.languageValue = dataLang.languages[i].name;
                    }
                }
            }
        });
    }

    function showAddQuotaData(arr, data, msg) {
        for (var i in arr) {
            arr[i].selected = false;
        }
        for (var i in arr) {
            if(arr[i].id && arr[i].id instanceof Array && arr[i].condditionGroup) {
                arr[i].selected = true;
            }
            for (var j in data) {
                if (arr[i].id == data[j].id) {
                    arr[i].selected = true;
                    arr[i].minimum = data[j].minimum;
                    arr[i].maximum = data[j].maximum;
                    arr[i].number = data[j].number;
                    arr[i].per = data[j].percentage;
                    arr[i].achieved = data[j].achieved;
                    data[j].selected = true;
                    //PD-1130
                    if(_.has(data[j], "hasCensusRepoQuota")) {
                        arr[i].hasCensusRepoQuota = data[j].hasCensusRepoQuota;
                    }
                }
                if (msg == 'gender') {
                    $scope.gndrQuotaFlag.gndrFlxValue = data[j].flexiblePer;
                    if ($scope.gndrQuotaFlag.gndrFlxValue == null || $scope.gndrQuotaFlag.gndrFlxValue == undefined) {
                        $scope.gndrQuotaFlag.gndrFlxValue = 0;
                    }
                }

                if (msg == 'race') {
                    $scope.raceQuotaFlag.raceFlxValue = data[j].flexiblePer;
                    if ($scope.raceQuotaFlag.raceFlxValue == null || $scope.raceQuotaFlag.raceFlxValue == undefined) {
                        $scope.raceQuotaFlag.raceFlxValue = 0;
                    }
                }
                if (msg == 'relation') {
                    $scope.rlnQuotaFlag.rlnFlxValue = data[j].flexiblePer;
                    if ($scope.rlnQuotaFlag.rlnFlxValue == null || $scope.rlnQuotaFlag.rlnFlxValue == undefined) {
                        $scope.rlnQuotaFlag.rlnFlxValue = 0;
                    }
                }
                if(msg == 'children'){
                    $scope.childQuotaFlag.chldFlxValue = data[j].flexiblePer;
                    if ($scope.childQuotaFlag.chldFlxValue == null || $scope.childQuotaFlag.chldFlxValue == undefined) {
                        $scope.childQuotaFlag.chldFlxValue = 0;
                    }
                }
                if (msg == 'emp') {
                    $scope.empQuotaFlag.empFlxValue = data[j].flexiblePer;
                    if ($scope.empQuotaFlag.empFlxValue == null || $scope.empQuotaFlag.empFlxValue == undefined) {
                        $scope.empQuotaFlag.empFlxValue = 0;
                    }
                }
                if (msg == 'edu') {
                    $scope.eduQuotaFlag.eduFlxValue = data[j].flexiblePer;
                    if ($scope.eduQuotaFlag.eduFlxValue == null || $scope.eduQuotaFlag.eduFlxValue == undefined) {
                        $scope.eduQuotaFlag.eduFlxValue = 0;
                    }
                }
                if (msg == 'dvc') {
                    $scope.dvcQuotaFlag.dvcFlxValue = data[j].flexiblePer;
                    if ($scope.dvcQuotaFlag.dvcFlxValue == null || $scope.dvcQuotaFlag.dvcFlxValue == undefined) {
                        $scope.dvcQuotaFlag.dvcFlxValue = 0;
                    }
                }
                if (msg == 'dvsn') {
                    $scope.dvsnQuotaFlag.divisionFlxValue = data[j].flexiblePer;
                    if ($scope.dvsnQuotaFlag.divisionFlxValue == null || $scope.dvsnQuotaFlag.divisionFlxValue == undefined) {
                        $scope.dvsnQuotaFlag.divisionFlxValue = 0;
                    }
                }

                if (msg == 'rgn') {
                    $scope.regQuotaFlag.regionFlxValue = data[j].flexiblePer;
                    if ($scope.regQuotaFlag.regionFlxValue == null || $scope.regQuotaFlag.regionFlxValue == undefined) {
                        $scope.regQuotaFlag.regionFlxValue = 0;
                    }
                }

                if (msg == 'rb') {
                    $scope.rbQuotaFlag.rbFlxValue = data[j].flexiblePer;
                    if ($scope.rbQuotaFlag.rbFlxValue == null || $scope.rbQuotaFlag.rbFlxValue == undefined) {
                        $scope.rbQuotaFlag.rbFlxValue = 0;
                    }
                }

                if (msg == 'hispanic') {
                    $scope.hisQuotaFlag.hispanicFlxValue = data[j].flexiblePer;
                    if ($scope.hisQuotaFlag.hispanicFlxValue == null || $scope.hisQuotaFlag.hispanicFlxValue == undefined) {
                        $scope.hisQuotaFlag.hispanicFlxValue = 0;
                    }
                }

            }
        }

    }
    
    function setRegionForNationalRepresentative() {
        if($scope.completesNeeded){
            var complete = $scope.completesNeeded - $scope.locationData.achieved;
        }
        if($scope.completesNeeded > 0) {
            if($scope.properties.countryCode) {
                var total = 0;
                $scope.sltRegion = [];
                _.each($scope.region, function(item){
                    item.selected= true;

                    var regionObj = {
                        id : item.id,
                        flexible : true,
                        flexiblePer : 10
                    };

                     if($scope.properties.countryCode == 'US') {
                        if (item.id == 'Northeast' || item.name == 'Northeast') {
                            regionObj.percentage = 18;
                        }
                        else if (item.id == 'West' || item.name == 'West') {
                            regionObj.percentage = 23;
                        }
                        else if (item.id == 'South' || item.name == 'South') {
                            regionObj.percentage = 37;
                        }
                        else if (item.id == 'Midwest' || item.name == 'Midwest') {
                            regionObj.percentage = 22;
                        }
                    } else if($scope.properties.countryCode == 'CA') {
                        if (item.id == 1 || item.name == 'Atlantic') {
                            regionObj.percentage = 20;
                        }
                        else if (item.id == 2 || item.name == 'Northern') {
                            regionObj.percentage = 20;
                        }
                        else if (item.id == 3 || item.name == 'Ontario') {
                            regionObj.percentage = 20;
                        }
                        else if (item.id == 4 || item.name == 'Quebec') {
                            regionObj.percentage = 20;
                        }
                        else if (item.id == 5 || item.name == 'Western') {
                            regionObj.percentage = 20;
                        }
                    }

                    regionObj.number = Math.round(complete * (regionObj.percentage/100));
                    regionObj.number = (regionObj.number <= 0 && (parseInt(i)+1) <= complete) ? 1 : regionObj.number;
                    item.number = regionObj.number;

                    total = total + regionObj.number;

                    $scope.quotaNumberChange(item.id ,$scope.region, 0, 'regionSw');

                    //item = $scope.region[i];
                    regionObj.minimum = item.minimum || 0;
                    regionObj.maximum = item.maximum || 0;
                    regionObj.name = item.name;
                    regionObj.hasValidQuotas = true;
                    $scope.sltRegion.push(regionObj);
                });
                if(total < complete) {
                    var remainder = complete - total;

                    $scope.region[0].number = $scope.region[0].number + remainder;
                    $scope.quotaNumberChange($scope.region[0].id, $scope.region, 0, 'regionSw');

                    $scope.sltRegion[0].number = $scope.region[0].number || 0;
                    $scope.sltRegion[0].minimum = $scope.region[0].minimum || 0;
                    $scope.sltRegion[0].maximum = $scope.region[0].maximum || 0;
                }else if(total > complete) {
                    var diff = total - complete;

                    for(var j in $scope.region) {
                        if($scope.region[j].number > diff) {
                            $scope.region[j].number = $scope.region[j].number - diff;
                            $scope.quotaNumberChange($scope.region[j].id, $scope.region, 0, 'regionSw');

                            $scope.sltRegion[j].number = $scope.region[j].number || 0;
                            $scope.sltRegion[j].minimum = $scope.region[j].minimum || 0;
                            $scope.sltRegion[j].maximum = $scope.region[j].maximum || 0;

                            break;
                        }
                    }
                }

                //quota added go flags also updated
                $scope.regQuotaFlag.editRegionFlag = true;
                $scope.regQuotaFlag.hasRegionFlag = true;
                $scope.regQuotaFlag.resetReg = false;
            } else {
                $scope.locationData.selected = false;
                $scope.locationData.type = "";
                notify({
                    message: "Please select country and launguage before setting Nattional quotas..",
                    classes: 'alert-warning',
                    duration: 4000
                });
            }

        } else {
            $scope.locationData.selected = false;
            $scope.locationData.type = "";

            notify({
                message: "Please specify total number of completes before setting Nattional quotas.",
                classes: 'alert-warning',
                duration: 4000
            });
        }
        
    }
    //it is remove because when we change the completes and go to final page directly then it is not update the supplier value  
    /*$scope.gotoFinal = function() {
        if ($scope.goFinalSurvey == true) {
            $state.go('launchsurvey', {
                surveyid: $stateParams.key
            });
        }
    };*/

    $scope.languageBeforeCountry = function () {
        if($scope.lngFlag == false){
            notify({message:"You need to pick a country before you can choose a language",classes:'alert-warning',duration:4000} );
        }
    }

    $scope.completesBeforeQuota = function() {
        $scope.checkDirty = true;
        if ($scope.properties.numberOfCompletes == undefined) {
            notify({
                message: "Please specify total number of completes before setting quotas.",
                classes: 'alert-warning',
                duration: 4000
            });
        }
    };

    /*========Reset Modal on Close
    =============================*/

    $scope.raceResetModal = function(element, race, raceFlxValue) {
        if ($scope.raceQuotaFlag.resetRace == true) {
            for (var i in $scope.race) {
                $scope.race[i].number = '';
                $scope.race[i].per = '';
                $scope.race[i].minimum = '';
                $scope.race[i].maximum = '';
            }
            $scope.quotaTotalRemRace = $scope.completesNeeded;
        }
    };

    $scope.rbResetModal = function(element, raceBera, rbFlxValue) {
        if ($scope.rbQuotaFlag.resetRb == true) {
            _.each($scope.raceBera, function(rb){
                rb.number = '';
                rb.per = '';
                rb.minimum = '';
                rb.maximum = '';
            });
            $scope.quotaTotalRemRace = $scope.completesNeeded;
        }
    };

    $scope.hispanicResetModal = function(element, hispanic, hispanicFlxValue) {
        if ($scope.hisQuotaFlag.resetHisOri == true) {
            _.each($scope.hispanic, function(his){
                his.number = '';
                his.per = '';
                his.minimum = '';
                his.maximum = '';
            });
            $scope.quotaTotalRemRace = $scope.completesNeeded;
        }
    };

    $scope.relationResetModal = function(element, relation, rlnFlxValue) {
        if ($scope.rlnQuotaFlag.resetRel == true) {
            for (var i in $scope.relation) {
                $scope.relation[i].number = '';
                $scope.relation[i].per = '';
                $scope.relation[i].minimum = '';
                $scope.relation[i].maximum = '';
            }
            $scope.quotaTotalRemRace = $scope.completesNeeded;
        }
    };
    $scope.empResetModal = function(element, employement, empFlxValue) {
        if ($scope.empQuotaFlag.resetEmp == true) {
            for (var i in $scope.employement) {
                $scope.employement[i].number = '';
                $scope.employement[i].per = '';
                $scope.employement[i].minimum = '';
                $scope.employement[i].maximum = '';
            }
            $scope.quotaTotalRemRace = $scope.completesNeeded;
        }
    };
    $scope.eduResetModal = function(element, education, eduFlxValue) {
        if ($scope.eduQuotaFlag.resetEdu == true) {
            for (var i in $scope.education) {
                $scope.education[i].number = '';
                $scope.education[i].per = '';
                $scope.education[i].minimum = '';
                $scope.education[i].maximum = '';
            }
            $scope.quotaTotalRemRace = $scope.completesNeeded;
        }
    };
    $scope.genderResetModal = function(element, genderInfo, gndrFlxValue) {
        if ($scope.gndrQuotaFlag.resetGen == true) {
            for (var i in $scope.genderInfo) {
                $scope.genderInfo[i].number = '';
                $scope.genderInfo[i].per = '';
                $scope.genderInfo[i].minimum = '';
                $scope.genderInfo[i].maximum = '';
            }
            $scope.quotaTotalRemRace = $scope.completesNeeded;
        }
    };
    $scope.commonResetModal = function(element, dataArr, resetFlag, totalRem, modalName){
        if(modalName == 'houseHoldIncome' || modalName == 'children' || modalName == 'age'){
            if(resetFlag == true && !$scope.isNested(modalName)) {
                if (dataArr[0] == undefined) {
                    // Do Nothing
                } else {
                    dataArr = [];
                    totalRem = $scope.completesNeeded;
                }
            }
        }else{
            if(resetFlag == true) {
                _.each(dataArr, function(item){
                    if(!item.hasCensusRepoQuota) {
                        item.number = '';
                        item.per = '';
                        item.minimum = '';
                        item.maximum = '';
                    }
                });
                totalRem = $scope.completesNeeded;
                if(modalName == 'regions' || modalName == 'divisions'){
                    $scope.currLocQuotaFielded = 0;
                }
            }
        }
    }
    $scope.childResetModal = function(element, chldTempArr, chldFlxValue) {
        if ($scope.childQuotaFlag.resetChild == true && !$scope.isNested('children')) {
            if(Object.keys($scope.chldTempArr).length == 0) {
                // Do Nothing
            } else {
                //clear no-children Quota
                $scope.chldTempArr.no[0]['flexPer'] = 0;
                $scope.chldTempArr.no[0]['minimum'] = '';
                $scope.chldTempArr.no[0]['maximum'] = '';
                $scope.chldTempArr.no[0]['number'] = '';
                $scope.chldTempArr.no[0]['per'] = '';
                $scope.chldTempArr.no[0]['percentage'] = '';
                //clear have-children Quota
               
                $scope.chldTotalRemRace = $scope.completesNeeded;
                _.each($scope.chldTempArr.have, function(item, index){
                    if(index != 0){
                        $scope.chldTempArr.have.splice(index, 1);
                    }else{
                        $scope.chldTempArr.have[0]['number'] = '';
                        $scope.chldTempArr.have[0]['minimum'] = '';
                        $scope.chldTempArr.have[0]['maximum'] = '';
                        $scope.chldTempArr.have[0]['min'] = '';
                        $scope.chldTempArr.have[0]['max'] = '';
                        $scope.chldTempArr.have[0]['per'] = '';
                        $scope.chldTempArr.have[0]['gender'] = '';
                        $scope.chldTempArr.have[0]['percentage'] = '';
                    }
                });
            }
        }
    }
    $scope.ageResetModal = function (element, ageTempArr, ageFlxValue) {
        if ($scope.ageQuotaFlag.resetAge == true && !$scope.isNested('age')) {
            if ($scope.ageTempArr[0] == undefined) {
                // Do Nothing
            } else {
                $scope.ageTempArr = [];
                $scope.ageTotalRemRace = $scope.completesNeeded;
            }
        }
    };

    $scope.incomeResetModal = function (element, incomeTempArr, incomeFlxValue) {
        if ($scope.incomeQuotaFlag.resetInc == true && !$scope.isNested('houseHoldIncome')) {
            if ($scope.incomeTempArr[0] == undefined) {
                // Do Nothing
            } else {
                $scope.incomeTempArr = [];
                $scope.incomeTotalRemRace = $scope.completesNeeded;
            }
        }
    };


    $scope.deviceResetModal = function(element, deviceInfo, dvcFlxValue) {
        if ($scope.dvcQuotaFlag.resetDev == true) {
            for (var i in $scope.genderInfo) {
                $scope.deviceInfo[i].number = '';
                $scope.deviceInfo[i].per = '';
                $scope.deviceInfo[i].minimum = '';
                $scope.deviceInfo[i].maximum = '';
            }
            $scope.quotaTotalRemRace = $scope.completesNeeded;
        }
    };

    $scope.regionResetModal = function(element, region, regionFlxValue) {
        if ($scope.regQuotaFlag.resetReg == true) {
            for (var i in $scope.region) {
                $scope.region[i].number = '';
                $scope.region[i].per = '';
                $scope.region[i].minimum = '';
                $scope.region[i].maximum = '';
            }
            $scope.quotaTotalRemRace = $scope.completesNeeded;
            $scope.currLocQuotaFielded = 0;
        }
    };

    $scope.divisionResetModal = function(element, division, divisionFlxValue) {
        if ($scope.dvsnQuotaFlag.resetDivi == true) {
            for (var i in $scope.division) {
                $scope.division[i].number = '';
                $scope.division[i].per = '';
                $scope.division[i].minimum = '';
                $scope.division[i].maximum = '';
            }
            $scope.quotaTotalRemRace = $scope.completesNeeded;
            $scope.currLocQuotaFielded = 0;
        }
    };
    //reset state quotas
    $scope.stateQuotaResetModal = function() {
        if ($scope.resetStateQuotas == true) {
            for (var i in $scope.selectedStates) {
                delete $scope.selectedStates[i].number;
                delete $scope.selectedStates[i].percentage;
                delete $scope.selectedStates[i].per;
                delete $scope.selectedStates[i].minimum;
                delete $scope.selectedStates[i].maximum;
                delete $scope.selectedStates[i].flexiblePer;
                delete $scope.selectedStates[i].hasValidQuotas;
            }
            $scope.stateFlexibility.isFlexible = true;
            $scope.stateFlexibility.flxValue = 0;
            $scope.quotaTotalRemRace = $scope.completesNeeded;

            $scope.editStateFlag = false;
            $scope.hasStateFlag = false;
            //PD-1402
            if($scope.isGrouped('states')) {
                $scope.groupingStateModel = [];
            }
            removeGroupingOnResetQuota("states");
        }
    };

    //reset DMA quotas
    $scope.dmaQuotaResetModal = function() {
        if ($scope.resetDMAQuotas == true) {
            for (var i in $scope.selectedDMAs) {
                delete $scope.selectedDMAs[i].number;
                delete $scope.selectedDMAs[i].percentage;
                delete $scope.selectedDMAs[i].per;
                delete $scope.selectedDMAs[i].minimum;
                delete $scope.selectedDMAs[i].maximum;
                delete $scope.selectedDMAs[i].flexiblePer;
                delete $scope.selectedDMAs[i].hasValidQuotas;
            }
            $scope.dmaFlexibility.isFlexible = true;
            $scope.dmaFlexibility.flxValue = 0;
            $scope.quotaTotalRemRace = $scope.completesNeeded;

            $scope.editDMAFlag = false;
            $scope.hasDMAFlag = false;
            $scope.currLocQuotaFielded = 0;
            //PD-1402
            if($scope.isGrouped('dma')) {
                $scope.groupingDmaModel = [];
            }
            removeGroupingOnResetQuota("dma");
        }
    };

    //reset CSA quotas
    $scope.csaQuotaResetModal = function() {
        if ($scope.resetCSAQuotas == true) {
            for (var i in $scope.selectedCSAs) {
                delete $scope.selectedCSAs[i].number;
                delete $scope.selectedCSAs[i].percentage;
                delete $scope.selectedCSAs[i].per;
                delete $scope.selectedCSAs[i].minimum;
                delete $scope.selectedCSAs[i].maximum;
                delete $scope.selectedCSAs[i].flexiblePer;
                delete $scope.selectedCSAs[i].hasValidQuotas;
            }
            $scope.csaFlexibility.isFlexible = true;
            $scope.csaFlexibility.flxValue = 0;
            $scope.quotaTotalRemRace = $scope.completesNeeded;

            $scope.editCSAFlag = false;
            $scope.hasCSAFlag = false;
            $scope.currLocQuotaFielded = 0;
            //PD-1402
            if($scope.isGrouped('csa')) {
                $scope.groupingCsaModel = [];
            }
            removeGroupingOnResetQuota("csa");
        }
    };

    //reset MSA quotas 
    $scope.msaQuotaResetModal = function() {
        if ($scope.resetMSAQuotas == true) {
            for (var i in $scope.selectedMSAs) {
                delete $scope.selectedMSAs[i].number;
                delete $scope.selectedMSAs[i].percentage;
                delete $scope.selectedMSAs[i].per;
                delete $scope.selectedMSAs[i].minimum;
                delete $scope.selectedMSAs[i].maximum;
                delete $scope.selectedMSAs[i].flexiblePer;
                delete $scope.selectedMSAs[i].hasValidQuotas;
            }
            $scope.msaFlexibility.isFlexible = true;
            $scope.msaFlexibility.flxValue = 0;
            $scope.quotaTotalRemRace = $scope.completesNeeded;

            $scope.editMSAFlag = false;
            $scope.hasMSAFlag = false;
            $scope.currLocQuotaFielded = 0;
            //PD-1402
            if($scope.isGrouped('msa')) {
                $scope.groupingMsaModel = [];
            }
            
            removeGroupingOnResetQuota("msa");
        }
    };

    //reset county quotas
    $scope.countyQuotaResetModal = function() {
        if ($scope.resetCountyQuotas == true) {
            for (var i in $scope.selectedCountys) {
                delete $scope.selectedCountys[i].number;
                delete $scope.selectedCountys[i].percentage;
                delete $scope.selectedCountys[i].per;
                delete $scope.selectedCountys[i].minimum;
                delete $scope.selectedCountys[i].maximum;
                delete $scope.selectedCountys[i].flexiblePer;
                delete $scope.selectedCountys[i].hasValidQuotas;
            }
            $scope.countyFlexibility.isFlexible = true;
            $scope.countyFlexibility.flxValue = 0;
            $scope.quotaTotalRemRace = $scope.completesNeeded;

            $scope.editCountyFlag = false;
            $scope.hasCountyFlag = false;
            $scope.currLocQuotaFielded = 0;
            //PD-1402
            if($scope.isGrouped('county')) {
                $scope.groupingCountyModel = [];
            }
            removeGroupingOnResetQuota("county");
        }
    };

    /*=========================
    Reset Modal on Close=======*/
    //PD-1303
    $scope.tabbing = function(event, previd, nextid) {
        if (event.shiftKey && event.which == 0) {
            var element = $window.document.getElementById(previd);
        } else if (event.which == 0 || event.which == 9) {
            var element = $window.document.getElementById(nextid);
        }

        if (element)
            element.focus();

    };

    $scope.chldNeedOption = "don't";
    $scope.changeChldNeed = function(option) {
        $scope.chldNeedOption = option;
    };

    /*-----For Closing Live Survey Editing Window-----*/
    $scope.closeManage = function(key){
        $state.go('editSurvey', {key: key});
    };

    //source arrays for state, csa, msa and county autocompletes
    $scope.stateList = [];
    $scope.csaList = [];
    $scope.msaList = [];
    $scope.countyList = [];
    $scope.dmaList = [];

    $scope.clearFields = function() {
        for (var i in $scope.race) {
            $scope.race[i].number = '';
            $scope.race[i].per = '';
            $scope.race[i].minimum = '';
            $scope.race[i].maximum = '';
        }
        for (var i in $scope.relation) {
            $scope.relation[i].number = '';
            $scope.relation[i].per = '';
            $scope.relation[i].minimum = '';
            $scope.relation[i].maximum = '';
        }
        for (var i in $scope.employement) {
            $scope.employement[i].number = '';
            $scope.employement[i].per = '';
            $scope.employement[i].minimum = '';
            $scope.employement[i].maximum = '';
        }
        for (var i in $scope.education) {
            $scope.education[i].number = '';
            $scope.education[i].per = '';
            $scope.education[i].minimum = '';
            $scope.education[i].maximum = '';
        }
        for (var i in $scope.genderInfo) {
            $scope.genderInfo[i].number = '';
            $scope.genderInfo[i].per = '';
            $scope.genderInfo[i].minimum = '';
            $scope.genderInfo[i].maximum = '';
        }
        for (var i in $scope.deviceInfo) {
            $scope.deviceInfo[i].number = '';
            $scope.deviceInfo[i].per = '';
            $scope.deviceInfo[i].minimum = '';
            $scope.deviceInfo[i].maximum = '';
        }
        for (var i in $scope.division) {
            $scope.division[i].number = '';
            $scope.division[i].per = '';
            $scope.division[i].minimum = '';
            $scope.division[i].maximum = '';
        }
    }

    $rootScope.$on("CallMethod", function(){
        $scope.clearFields();
    });

    //for state tab
    $scope.statename = {name: "", id: ""};
    $scope.selectedStates = new Array();
    $scope.stateFlexibility = {
        isFlexible: true,
        flxValue: 0
    };

    //PD-321
    var setSelectedStateData = function(state) {
        var matched = $scope.selectedStates.filter(function(item) {
            return (item.id === state.id)
        });
        if(matched.length === 0){
            state.selected = true;
            $scope.selectedStates.push(state); 
        } 
        
        //clear after selection
        $scope.stateList = [];
        $scope.csaList = [];
        $scope.msaList = [];
        $scope.countyList = [];
        $scope.dmaList = [];
        $scope.statename = {name: "", id: ""};
    };

    //on state selected
    $scope.onStateSelected = function (state) {
        if($scope.hasStateFlag){
            if(confirm('Adding or Removing a qualification will affect the current quotas. Would you like to continue?')){
                _.each($scope.selectedStates, function(item){
                    delete item.number;
                    delete item.percentage;
                    delete item.per;
                    delete item.minimum;
                    delete item.maximum;
                    delete item.flexiblePer;
                    delete item.hasValidQuotas;
                    delete item.percent;
                });
                $scope.editStateFlag = false;
                $scope.hasStateFlag = false;
                $scope.resetStateQuotas = true;
                //check location
                if($scope.locationData.selected) {
                    if($scope.locationData.type != "state") {
                        //warn and wait
                        $timeout(function() {
                            angular.element('#clrmodel').trigger('click');
                            $scope.locationData.currentClickItem = "state";
                            $scope.locationData.currItem = state;
                        },0);
                    }else {
                        setSelectedStateData(state);
                    }
                }else {
                    //set location flags
                    $scope.locationData.selected = true;
                    $scope.locationData.type = "state";
                    setSelectedStateData(state);
                }
            }
        }else{
            //check location
            if($scope.locationData.selected) {
                if($scope.locationData.type != "state") {
                    //warn and wait
                    $timeout(function() {
                        angular.element('#clrmodel').trigger('click');
                        $scope.locationData.currentClickItem = "state";
                        $scope.locationData.currItem = state;
                    },0);
                }else {
                    setSelectedStateData(state);
                }
            }else {
                //set location flags
                $scope.locationData.selected = true;
                $scope.locationData.type = "state";
                setSelectedStateData(state);
            }
        }
    };

    //remove Single Qualification State, Dma, Csa, County, Msa from selected list
    $scope.removeLocation = function (location, index) {
        switch(location){
            case "state":
                if($scope.hasStateFlag){
                    if(confirm('Adding or Removing a qualification will affect the current quotas. Would you like to continue?')){
                        _.each($scope.selectedStates, function(item){
                            delete item.percentage;
                            delete item.per;
                            delete item.percent;
                            delete item.maximum;
                            delete item.minimum;
                            delete item.number;
                        });
                        $scope.editStateFlag = false;
                        $scope.hasStateFlag = false;
                        $scope.resetStateQuotas = true;
                        $scope.selectedStates.splice(index, 1);
                    }
                }else{
                    $scope.selectedStates.splice(index, 1);
                }
                break;
            case "dma":
                if($scope.hasDMAFlag){
                    if(confirm('Adding or Removing a qualification will affect the current quotas. Would you like to continue?')){
                        _.each($scope.selectedDMAs, function(item){
                            delete item.percentage;
                            delete item.per;
                            delete item.percent;
                            delete item.maximum;
                            delete item.minimum;
                            delete item.number;
                        });
                        $scope.editDMAFlag = false;
                        $scope.hasDMAFlag = false;
                        $scope.resetDMAQuotas = true;
                        $scope.selectedDMAs.splice(index, 1);
                    }
                }else{
                    $scope.selectedDMAs.splice(index, 1);
                }
                break;
            case "csa":
                if($scope.hasCSAFlag){
                    if(confirm('Adding or Removing a qualification will affect the current quotas. Would you like to continue?')){
                        _.each($scope.selectedCSAs, function(item){
                            delete item.percentage;
                            delete item.per;
                            delete item.percent;
                            delete item.maximum;
                            delete item.minimum;
                            delete item.number;
                        });
                        $scope.selectedCSAs.splice(index, 1);
                        $scope.editCSAFlag = false;
                        $scope.hasCSAFlag = false;
                        $scope.resetCSAQuotas = true;
                    }
                }else{
                    $scope.selectedCSAs.splice(index, 1);
                }
                break;
            case "msa":
                if($scope.hasMSAFlag){
                    if(confirm('Adding or Removing a qualification will affect the current quotas. Would you like to continue?')){
                        _.each($scope.selectedMSAs, function(item){
                            delete item.percentage;
                            delete item.per;
                            delete item.percent;
                            delete item.maximum;
                            delete item.minimum;
                            delete item.number;
                        });
                        $scope.editMSAFlag = false;
                        $scope.hasMSAFlag = false;
                        $scope.resetMSAQuotas = true;
                        $scope.selectedMSAs.splice(index, 1);
                    }
                }else{
                    $scope.selectedMSAs.splice(index, 1);
                }
                break;
            case "county":
                if($scope.hasCountyFlag){
                    if(confirm('Adding or Removing a qualification will affect the current quotas. Would you like to continue?')){
                        _.each($scope.selectedCountys, function(item){
                            delete item.percentage;
                            delete item.per;
                            delete item.percent;
                            delete item.maximum;
                            delete item.minimum;
                            delete item.number;
                        });
                        $scope.editCountyFlag = false;
                        $scope.hasCountyFlag = false;
                        $scope.resetCountyQuotas = true;
                        $scope.selectedCountys.splice(index, 1);
                    }
                }else{
                    $scope.selectedCountys.splice(index, 1);
                }
                break;
        }
    };

    //for dma tab
    $scope.selectedDMAName = "";
    $scope.selectedDMAs = [];
    $scope.dmaFlexibility = {
        isFlexible: true,
        flxValue: 0
    };

    $scope.selectionDMA = true;
    $scope.resetDMAQuotas = true;

    //PD-321
    var setSelectedDmaData = function(dma) {
        var matched = $scope.selectedDMAs.filter(function(item) {
            return (item.id === dma.id)
        });
        if(matched.length === 0){
            dma.selected = true;
            $scope.selectedDMAs.push(dma); 
        } 
        
        //clear after selection
        $scope.stateList = [];
        $scope.csaList = [];
        $scope.msaList = [];
        $scope.countyList = [];
        $scope.dmaList = [];
        $scope.selectedDMAName = "";
    };

    //on dma selected
    $scope.onDMASelected = function (dma) {
        if($scope.hasDMAFlag){
            if(confirm('Adding or Removing a qualification will affect the current quotas. Would you like to continue?')){
                _.each($scope.selectedDMAs, function(item){
                    delete item.number;
                    delete item.percentage;
                    delete item.per;
                    delete item.minimum;
                    delete item.maximum;
                    delete item.flexiblePer;
                    delete item.hasValidQuotas;
                    delete item.percent;
                });
                $scope.editDMAFlag = false;
                $scope.hasDMAFlag = false;
                $scope.resetDMAQuotas = true;
                //check location
                if($scope.locationData.selected) {
                    if($scope.locationData.type != "dma") {
                        //warn and wait
                        $timeout(function() {
                            angular.element('#clrmodel').trigger('click');
                            $scope.locationData.currentClickItem = "dma";
                            $scope.locationData.currItem = dma;
                        },0);
                    }else {
                        setSelectedDmaData(dma);
                    }
                }else{
                    //set location flags
                    $scope.locationData.selected = true;
                    $scope.locationData.type = "dma";
                    setSelectedDmaData(dma);
                }
            }
        }else{
            //check location
            if($scope.locationData.selected) {
                if($scope.locationData.type != "dma") {
                    //warn and wait
                    $timeout(function() {
                        angular.element('#clrmodel').trigger('click');
                        $scope.locationData.currentClickItem = "dma";
                        $scope.locationData.currItem = dma;
                    },0);
                }else {
                    setSelectedDmaData(dma);
                }
            }else{
                //set location flags
                $scope.locationData.selected = true;
                $scope.locationData.type = "dma";
                setSelectedDmaData(dma);
            }
        }
        
    };

    
    //dma tab end

    //for csa tab
    $scope.selectedCSAName = "";
    $scope.selectedCSAs = [];
    $scope.csaFlexibility = {
        isFlexible: true,
        flxValue: 0
    };

    $scope.selectionCSA = true;
    $scope.resetCSAQuotas = true;

    //PD-321
    var setSelectedCsaData = function(csa) {
        var matched = $scope.selectedCSAs.filter(function(item) {
            return (item.id === csa.id)
        });
        if(matched.length === 0){
            csa.selected = true;
            $scope.selectedCSAs.push(csa); 
        } 

        //clear after selection
        $scope.stateList = [];
        $scope.csaList = [];
        $scope.msaList = [];
        $scope.countyList = [];
        $scope.dmaList = [];
        $scope.selectedCSAName = "";
    };

    //on csa selected
    $scope.onCSASelected = function (csa) {
        if($scope.hasCSAFlag){
            if(confirm('Adding or Removing a qualification will affect the current quotas. Would you like to continue?')){
                _.each($scope.selectedCSAs, function(item){
                    delete item.number;
                    delete item.percentage;
                    delete item.per;
                    delete item.minimum;
                    delete item.maximum;
                    delete item.flexiblePer;
                    delete item.hasValidQuotas;
                    delete item.percent;
                });
                $scope.editCSAFlag = false;
                $scope.hasCSAFlag = false;
                $scope.resetCSAQuotas = true;
                //check location
                if($scope.locationData.selected) {
                    if($scope.locationData.type != "csa") {
                        //warn and wait
                        $timeout(function() {
                            angular.element('#clrmodel').trigger('click');
                            $scope.locationData.currentClickItem = "csa";
                            $scope.locationData.currItem = csa;
                        },0);

                    }else {
                        setSelectedCsaData(csa);
                    }
                }else {
                    //set location flags
                    $scope.locationData.selected = true;
                    $scope.locationData.type = "csa";

                    setSelectedCsaData(csa);
                }
            }
        }else{
            //check location
            if($scope.locationData.selected) {
                if($scope.locationData.type != "csa") {
                    //warn and wait
                    $timeout(function() {
                        angular.element('#clrmodel').trigger('click');
                        $scope.locationData.currentClickItem = "csa";
                        $scope.locationData.currItem = csa;
                    },0);

                }else {
                    setSelectedCsaData(csa);
                }
            }else {
                //set location flags
                $scope.locationData.selected = true;
                $scope.locationData.type = "csa";

                setSelectedCsaData(csa);
            }
        }
    };
    //csa tab end

    //for msa tab
    $scope.selectedMSAName = "";
    $scope.selectedMSAs = [];
    $scope.msaFlexibility = {
        isFlexible: true,
        flxValue: 0
    };

    $scope.selectionMSA = true;
    $scope.resetMSAQuotas = true;

    //PD-321
    var setSelectedMsaData = function(msa) {
        var matched = $scope.selectedMSAs.filter(function(item) {
            return (item.id === msa.id)
        });
        if(matched.length === 0){
            msa.selected = true;
            $scope.selectedMSAs.push(msa); 
        } 
        
        //clear after selection
        $scope.stateList = [];
        $scope.csaList = [];
        $scope.msaList = [];
        $scope.countyList = [];
        $scope.dmaList = [];
        $scope.selectedMSAName = "";
    };

    //on msa selected
    $scope.onMSASelected = function (msa) {
        if($scope.hasMSAFlag){
            if(confirm('Adding or Removing a qualification will affect the current quotas. Would you like to continue?')){
                _.each($scope.selectedMSAs, function(item){
                    delete item.number;
                    delete item.percentage;
                    delete item.per;
                    delete item.minimum;
                    delete item.maximum;
                    delete item.flexiblePer;
                    delete item.hasValidQuotas;
                    delete item.percent;
                });
                $scope.editMSAFlag = false;
                $scope.hasMSAFlag = false;
                $scope.resetMSAQuotas = true;
                //check location
                if($scope.locationData.selected) {
                    if($scope.locationData.type != "msa") {
                        //warn and wait
                        $timeout(function() {
                            angular.element('#clrmodel').trigger('click');
                            $scope.locationData.currentClickItem = "msa";
                            $scope.locationData.currItem = msa;
                        },0);
                    }else {
                        setSelectedMsaData(msa);
                    }
                }else {
                    //set location flags
                    $scope.locationData.selected = true;
                    $scope.locationData.type = "msa";
                    setSelectedMsaData(msa);
                }
            }
        }else{
            //check location
            if($scope.locationData.selected) {
                if($scope.locationData.type != "msa") {
                    //warn and wait
                    $timeout(function() {
                        angular.element('#clrmodel').trigger('click');
                        $scope.locationData.currentClickItem = "msa";
                        $scope.locationData.currItem = msa;
                    },0);

                }else {
                    setSelectedMsaData(msa);
                }
            }else {
                //set location flags
                $scope.locationData.selected = true;
                $scope.locationData.type = "msa";

                setSelectedMsaData(msa);
            }
        }
    };

    //for county tab
    $scope.selectedCountyName = "";
    $scope.selectedCountys = [];
    $scope.countyFlexibility = {
        isFlexible: true,
        flxValue: 0
    };

    $scope.selectionCounty = true;
    $scope.resetCountyQuotas = true;

    //PD-321
    var setSelectedCountyData = function(county) {
        var matched = $scope.selectedCountys.filter(function(item) {
            return (item.id === county.id)
        });
        if(matched.length === 0){
            county.selected = true;
            $scope.selectedCountys.push(county); 
        } 
        //clear after selection
        $scope.stateList = [];
        $scope.csaList = [];
        $scope.msaList = [];
        $scope.countyList = [];
        $scope.dmaList = [];
        $scope.selectedCountyName = "";
    };

    //on county selected
    $scope.onCountySelected = function (county) {
        if($scope.hasCountyFlag){
            if(confirm('Adding or Removing a qualification will affect the current quotas. Would you like to continue?')){
                _.each($scope.selectedCountys, function(item){
                    delete item.number;
                    delete item.percentage;
                    delete item.per;
                    delete item.minimum;
                    delete item.maximum;
                    delete item.flexiblePer;
                    delete item.hasValidQuotas;
                    delete item.percent;
                });
                $scope.editCountyFlag = false;
                $scope.hasCountyFlag = false;
                $scope.resetCountyQuotas = true;
                //check location
                if($scope.locationData.selected) {
                    if($scope.locationData.type != "county") {
                        //warn and wait
                        $timeout(function() {
                            angular.element('#clrmodel').trigger('click');
                            $scope.locationData.currentClickItem = "county";
                            $scope.locationData.currItem = county;
                        },0);
                    }else {
                        setSelectedCountyData(county);
                    }
                }else {
                    //set location flags
                    $scope.locationData.selected = true;
                    $scope.locationData.type = "county";
                    setSelectedCountyData(county);
                }
            }
        }else{
            //check location
            if($scope.locationData.selected) {
                if($scope.locationData.type != "county") {
                    //warn and wait
                    $timeout(function() {
                        angular.element('#clrmodel').trigger('click');
                        $scope.locationData.currentClickItem = "county";
                        $scope.locationData.currItem = county;
                    },0);
                }else {
                    setSelectedCountyData(county);
                }
            }else {
                //set location flags
                $scope.locationData.selected = true;
                $scope.locationData.type = "county";
                setSelectedCountyData(county);
            }
        }
        

    };

    $scope.clearDataFunc = function() {
        $state.reload();
    }

    //for Zipcode tab
    //$scope.selectedZipcodeName = "";
    $scope.selectedZipcodes = [];
    $scope.zipCodeQuotaManage = [];
    $scope.zipcodeQuotaFlg = {
        editZipcodeFlag: false,
        addZipQuotaFlg: false,
        resetZipQuotaFlg: true
    }
    
    $scope.zipcodeFlexibility = {
        isFlexible: true,
        flxValue: 0
    };

    $scope.selectionZipcode = true;
    $scope.resetZipcodeQuotas = true;

    var setSelectedZipData = function(file) {
        $scope.showLoader = 'DataLoading';
        if(file != null && file != undefined && file.name && (file.name.indexOf('.csv') > 0 || file.name.indexOf('.xlsx') > 0 || file.name.indexOf('.xls')) > 0) {
            //call the upload method of the lib
            createSurvey.uploadZipcodesFile($scope.properties.countryCode, file).then(
                function(response) {
                    /*$scope.location.zipcode.values = response.data.validZipcodes;
                    $scope.selectedZipcodes = response.data.validZipcodes;*/
                    //zipcodesDataArr = response.data.validZipcodes;
                    zipcodeFilePath = response.data.zipcodeFilePath;
                    $scope.showLoader = "";
                    //Grouped Zipcode
                             
                    $scope.selectedZipcodes = [];
                    $scope.zipcodeQuotaFlg.addZipQuotaFlg = false;
                    if(_.keys(response.data.zipcodes.groupedZipCodes).length > 0) {
                        _.each(response.data.zipcodes.groupedZipCodes, function(val, key) {
                            var tempObject = {
                                flexible:true,
                                flexiblePer:0,
                                hasValidQuotas:false,
                                maximum: "",
                                minimum: "",
                                name: key,
                                number: "",
                                percentage: "",
                                selected:true
                            }
                            $scope.selectedZipcodes.push(tempObject);
                        })
                        $scope.zipcodeQuotaFlg.addZipQuotaFlg = true;
                        angular.copy($scope.selectedZipcodes, $scope.zipCodeQuotaManage)
                    }

                    //notif messages
                    //if all are correct
                    if(response.data.zipcodes.validZipcodes.length > 0 && response.data.zipcodes.duplicateZipcodes == 0 && response.data.zipcodes.modifiedZipcodes == 0 && response.data.zipcodes.incorrectZipcodes == 0) {
                        notify({
                            message: response.data.zipcodes.totalZipcodes +" out of " +  response.data.zipcodes.totalZipcodes + " zipcodes successfully uploaded",
                            classes: 'alert-success',
                            duration: 5000
                        });
                    }

                    //if not all correct but some modifications made and no duplicate and no incorrect
                    if(response.data.zipcodes.validZipcodes.length > 0 && response.data.zipcodes.modifiedZipcodes != 0 && response.data.zipcodes.incorrectZipcodes == 0 && response.data.zipcodes.duplicateZipcodes == 0) {
                        notify({
                            message: response.data.zipcodes.totalZipcodes +" out of " +  response.data.zipcodes.totalZipcodes + " zipcodes successfully uploaded. Some Lines Were Modified Because They Were Only 4 or 3 Digits Long",
                            classes: 'alert-success',
                            duration: 5000
                        });
                    }

                    //if not all valid and some zipcodes are skipped, incorrect zipcodes and duplicates
                    if(response.data.zipcodes.validZipcodes.length > 0 && response.data.zipcodes.incorrectZipcodes != 0 || response.data.zipcodes.duplicateZipcodes != 0) {
                        if(response.data.zipcodes.incorrectZipcodes != 0) {
                            notify({
                                message: response.data.zipcodes.validZipcodes.length +" out of " +  response.data.zipcodes.totalZipcodes + " zipcodes successfully uploaded. " + response.data.zipcodes.incorrectZipcodes +" incorrect zipcode(s) skipped",
                                classes: 'alert-success',
                                duration: 5000
                            });
                        } else{
                            notify({
                                message: response.data.zipcodes.validZipcodes.length +" out of " +  response.data.zipcodes.totalZipcodes + " zipcodes successfully uploaded." + response.data.zipcodes.duplicateZipcodes + " duplicate zipcodes skipped",
                                classes: 'alert-success',
                                duration: 5000
                            });
                        }
                    }

                    //no zipcodes found
                    if(response.data.zipcodes.validZipcodes.length == 0) {
                        notify({
                            message: "Your Upload Failed. Please Check Your File And Try Again",
                            classes: 'alert-danger',
                            duration: 5000
                        });
                    }  
                },
                function(error) {
                    $scope.showLoader = "";
                    notify({
                        message: error.data.msg,
                        classes: 'alert-danger',
                        duration: 5000
                    });
            });
        }else {
            $scope.showLoader = "";
            notify({
                message: "Your Upload Failed. Please Check Your File And Try Again",
                classes: 'alert-danger',
                duration: 5000
            });
        }
    };

    //zipcode upload
    $scope.uploadZipcodes = function(file, event) {
        //check for location
        if (file && file.name != null && file.name !="") {
            var validExts = new Array(".xlsx", ".xls", ".csv");
            var fileExt = file.name;
            fileExt = fileExt.substring(fileExt.lastIndexOf('.'));
            if (validExts.indexOf(fileExt) < 0) {
                notify({
                        message: "Only csv, xlsx, xls files are valid. Please upload a valid file.",
                        classes: 'alert-danger',
                        duration: 5000
                    });
                return false;
            }
          } 
        if($scope.locationData.selected) {
            //check already zip or not
            if($scope.locationData.type != "zip" && file != null) {
                $timeout(function() {
                    $scope.locationData.currentClickItem = "zip";
                    $scope.locationData.currItem = file;
                    angular.element('#clrmodel').trigger('click');
                    angular.element('#clickOkModel').trigger('click');
                    $scope.locationData.currItem = file;
                    setSelectedZipData(file);
                    event.preventDefault();
                },0);
            }else if(file != null && file != undefined && file != ""){
                $scope.locationData.selected = true;
                $scope.locationData.type = "zip";
                $scope.locationData.currentClickItem = "zip";
                setSelectedZipData(file);
            } 
        }else {
            //set location flags
            if(file != null && file != undefined && file != "") {
                $scope.locationData.selected = true;
                $scope.locationData.type = "zip";
                $scope.locationData.currentClickItem = "zip";
                setSelectedZipData(file); 
            }
        }
    }; 

   //clear zipcodes
    $scope.clearZipcodes = function() {
        zipcodesDataArr = [];
        zipcodeFilePath = "";
        $scope.selectedZipcodes = [];
        $scope.zipcodeQuotaFlg.addZipQuotaFlg = false;
        $scope.locationData.selected = false;
        $scope.locationData.type = "";
        notify({
            message: "zipcodes cleared successfully",
            classes: 'alert-success',
            duration: 2000
        });
    };

    //view latest upload zipcodes
    $scope.viewLatestZipcodes = function() {
        //Cleaning the p tag before appending zipcode data
        var myEl = angular.element( document.querySelector( '#view-zipcodes' ) );
        myEl.empty();

        if(zipcodeFilePath != undefined && zipcodeFilePath != null && zipcodeFilePath != "") {

            var file = {
                filePath: zipcodeFilePath
            };
            //read zipcodes from the path in the file
            createSurvey.viewLatestUploadZip(file, $scope.properties.countryCode).then(
                function(response) {
                    //show zipcodes in regular js way
                    // not use $scope 
                    //because lots of data in return in the response will crash $scope 
                    var divel = document.getElementById('view-zipcodes');
                    divel.appendChild(document.createTextNode(response.data.zipcodesArr));
                },
                function(error) {
                    notify({
                        message: "error getting zipcodes",
                        classes: 'alert-success',
                        duration: 2000
                    });
                });
        }else {
            notify({
                message: "No zipcodes uploaded.",
                classes: 'alert-success',
                duration: 2000
            });
        }
    };

    $scope.addZipcodeQuota = function() {
        _.each($scope.selectedZipcodes, function(zipQuota){
            if(zipQuota.number != undefined && zipQuota.number != null && zipQuota.number != "") {
                zipQuota.flexiblePer = $scope.zipcodeFlexibility.flxValue;
                zipQuota.flexible = $scope.zipcodeFlexibility.isFlexible;
                zipQuota.hasValidQuotas = true;
    
                var zipMasterData = _.findWhere(masterData, {"masterKey" : "zipcodes"});
                zipQuota["qual_id"] = zipMasterData.id;
                zipQuota["qual_name"] = zipMasterData.masterKey;
            }
        });
        var originalCloneDate  = new Array();
        angular.copy($scope.selectedZipcodes, originalCloneDate);
        _.each(originalCloneDate, function(zipQuota){
            if(_.has(zipQuota, "number") && (zipQuota.number == "" || zipQuota.number == null || zipQuota.number == 0 || zipQuota.number == undefined)) {
                var getObjectOfZip = _.findWhere($scope.selectedZipcodes, {name: zipQuota.name});
                if(getObjectOfZip) {
                    var getDelIndex = _.indexOf($scope.selectedZipcodes, getObjectOfZip);
                    if(getDelIndex > -1) {
                        $scope.selectedZipcodes.splice(getDelIndex, 1);
                    }
                }
            }
        })
    
        $scope.zipcodeQuotaFlg.editZipcodeFlag = true;
        $scope.zipcodeQuotaFlg.addZipQuotaFlg = false;
        $scope.zipcodeQuotaFlg.resetZipQuotaFlg = false;
        notify({
            message: 'Quotas applied',
            classes: 'alert-success',
            duration: 2000
        });
        console.log('$scope.selectedZipcodes ',JSON.stringify($scope.selectedZipcodes));
    }

    $scope.zipcodeQuotaResetModal = function(resetZipQuotaFlg) {
        if(resetZipQuotaFlg) {
            _.each($scope.selectedZipcodes, function(zipGroup) {
                zipGroup.number = "";
                zipGroup.percentage = "";
                zipGroup.minimum = "";
                zipGroup.maximum = "";
                zipGroup.per = "";
                zipGroup.totalRem = "";
            })
            angular.copy($scope.zipCodeQuotaManage, $scope.selectedZipcodes);
            $scope.zipcodeQuotaFlg.editZipcodeFlag = false;
            $scope.zipcodeQuotaFlg.resetZipQuotaFlg = true;
            $scope.zipcodeQuotaFlg.addZipQuotaFlg = true;
        }
         console.log("clear Zip Quota", $scope.selectedZipcodes)
    }
   
    //national representative selected
    $scope.nationalRepSelected = false;

    //national representative
    $scope.setNationalRep = function() {
        console.log('$scope.locationData ',JSON.stringify($scope.locationData));
        if($scope.locationData.selected) {
            if($scope.locationData.type == "natrep") {
                notify({
                    message: "National Representative is already applied",
                    classes: 'alert-warning',
                    duration: 2000
                });
            }else {
                $timeout(function() {
                    angular.element('#clrmodel').trigger('click');
                    $scope.locationData.currentClickItem = "natrep";
                },0);
            }  
        }else {

            if($scope.completesNeeded > 0) {

                $scope.locationData.type = "natrep";
                $scope.locationData.selected = true;
                //call fun to set nat rep
                setRegionForNationalRepresentative();

            }else {
                $scope.locationData.selected = false;
                $scope.locationData.type = "";

                notify({
                    message: "Please specify total number of completes before setting National quotas.",
                    classes: 'alert-warning',
                    duration: 4000
                });
            }
        } 
    };

    //edit quota clicked when natrep selected
    $scope.editNatRepQuota = function() {
        if($scope.locationData.selected && $scope.locationData.type == "natrep") {
            //alert for clear natrep and set to region
            $timeout(function() {
                angular.element('#clrmodel').trigger('click');
                $scope.locationData.currentClickItem = "regionquotaedit";
            },0);
        }
    };

    //data for anyother location is selected or not
    $scope.locationData = {
        type: "",
        selected: false,
        currentClickItem: "",
        currIndex: 0, //this is for region and division PD-321
        currItem: {}, //this is for state csa msa and county PD-321
        achieved:0    //PD-505
    };

   
    $scope.cancelClearLocation = function() {
        //$scope.locationData.currentClickItem = "";
        //$scope.locationData.currIndex = 0;
        if($scope.locationData.type == "natrep") {
            $scope.sltRegion = [];
            setRegionForNationalRepresentative();
        }
        if($scope.locationData.currentClickItem != "" && $scope.locationData.currentClickItem == "region") {
            $scope.region[$scope.locationData.currIndex].selected = false;
        }
        if($scope.locationData.currentClickItem != "" && $scope.locationData.currentClickItem == "division") {
            $scope.division[$scope.locationData.currIndex].selected = false;
        }

        $scope.locationData.currentClickItem = "";
        $scope.locationData.currIndex = 0;
    };

    //clear location link clicked
    $scope.clearCompleteLocation = function() {
        if($scope.locationData.selected) {
            $timeout(function() {
                $scope.locationData.currentClickItem = "";
                $scope.locationData.currItem = {};
                angular.element('#clrmodel1').trigger('click');
            },0);
        }else {
            notify({
                message: "No location qualifications/quotas to clear",
                classes: 'alert-warning',
                duration: 2000
            });
        }
    };

   //clear all location qualification and quotas
    $scope.clearAllLocation = function($event) {
        /*-----Remove other AutoNested Location Quota First-----*/
            if(($scope.locationData.type == 'region' || $scope.locationData.type == 'natrep') && $scope.isNested('regions')){
                $timeout(function() {
                    angular.element('button[key-name = "regions"]').triggerHandler('click');
                    $scope.applyNesting();
                }, 0);
            }else if($scope.locationData.type == 'division' && $scope.isNested('divisions')){
                $timeout(function() {
                    angular.element('button[key-name = "divisions"]').triggerHandler('click');
                    $scope.applyNesting();
                }, 0);
            }else if($scope.locationData.type == 'state' && $scope.isNested('states')){
                console.log('in state remove');
                $timeout(function() {
                    angular.element('button[key-name = "states"]').triggerHandler('click');
                    $scope.applyNesting();
                }, 0);
            }else if($scope.locationData.type == 'dma' && $scope.isNested('dma')){
                $timeout(function() {
                    angular.element('button[key-name = "dma"]').triggerHandler('click');
                    $scope.applyNesting();
                }, 0);
            }else if($scope.locationData.type == 'csa' && $scope.isNested('csa')){
                $timeout(function() {
                    angular.element('button[key-name = "csa"]').triggerHandler('click');
                    $scope.applyNesting();
                }, 0);
            }else if($scope.locationData.type == 'msa' && $scope.isNested('msa')){
                $timeout(function() {
                    angular.element('button[key-name = "msa"]').triggerHandler('click');
                    $scope.applyNesting();
                }, 0);
            }else if($scope.locationData.type == 'county' && $scope.isNested('county')){
                $timeout(function() {
                    angular.element('button[key-name = "county"]').triggerHandler('click');
                    $scope.applyNesting();
                }, 0);
            }else if(($scope.locationData.type == 'zipcodes' || $scope.locationData.type == 'zip') && $scope.isNested('zipcodes')){
                console.log('in zip');
                $timeout(function() {
                    angular.element('button[key-name = "zipcodes"]').triggerHandler('click');
                    $scope.applyNesting();
                }, 0);
            }
        // Timeout added so that the location detail array will not get empty till nesting gets reset
        $timeout(function(){
            /*-----------------------------------------------------*/
            if($scope.locationData.currentClickItem === "regionquotaedit"){
                _.each($scope.region , function(value){
                    if(value.achieved){
                        $scope.currLocQuotaFielded = $scope.currLocQuotaFielded+ value.achieved;
                    }
                })
            }else{
              $scope.currLocQuotaFielded = 0;
            }
            if($scope.locationData.currentClickItem == "regionquota") {
                //clear only region quota and set region as selected
                $scope.clearCensusRegion();
                $scope.locationData.type = "region";
                $scope.locationData.selected = true;
                $scope.locationData.currentClickItem = "";

            }else if($scope.locationData.currentClickItem == "regionquotaedit") {
                //set region as selected and open edit box
                $scope.locationData.type = "region";
                $scope.locationData.selected = true;
                $scope.locationData.currentClickItem = "";
                $timeout(function() {
                    angular.element('#regeditquota').trigger('click');
                },100);

            }else {
                $scope.locationData.type = "";
                $scope.locationData.selected = false;
                //also clear data
                _.each($scope.region, function(region){
                    region.selected = false;
                });
                _.each($scope.division, function(division){
                    division.selected = false;
                });

                $scope.clearCensusRegion();
                $scope.clearCensusDivision();

                $scope.sltRegion = [];
                $scope.sltDivision = [];
                $scope.resetStateQuotas = true;
                $scope.resetDMAQuotas = true;
                $scope.resetCSAQuotas = true;
                $scope.resetMSAQuotas = true;
                $scope.resetCountyQuotas = true;

                $scope.stateQuotaResetModal();
                $scope.dmaQuotaResetModal();
                $scope.csaQuotaResetModal(); 
                $scope.msaQuotaResetModal();
                $scope.countyQuotaResetModal();

                // For Clearing Zips
                zipcodesDataArr = [];
                zipcodeFilePath = "";
                $scope.selectedZipcodes = [];
                $scope.zipcodeQuotaFlg.addZipQuotaFlg = false;
                $scope.locationData.selected = false;
                $scope.locationData.type = "";
                $scope.zipcodeQuotaFlg.editZipcodeFlag = false;
                $scope.zipcodeQuotaFlg.addZipQuotaFlg = false;
                $scope.zipcodeQuotaFlg.resetZipQuotaFlg = false;
                // For Clearing Zips

                $scope.selectedStates = new Array();
                $scope.selectedDMAs = new Array();
                $scope.selectedCSAs = new Array();
                $scope.selectedMSAs = new Array();
                $scope.selectedCountys = new Array();
                $scope.selectedZipcodes = new Array();

                //select back the item selected

                if($scope.locationData.currentClickItem != "" && $scope.locationData.currentClickItem == "region") {
                    $scope.zipcodeQuotaFlg.addZipQuotaFlg = false;
                    $scope.zipcodeQuotaFlg.editZipcodeFlag = false;
                    $scope.locationData.selected = true;
                    $scope.locationData.type = "region";
                    $scope.region[$scope.locationData.currIndex].selected = true;
                    //call select fun
                    setSelectedRegionData($scope.region[$scope.locationData.currIndex].id, $scope.region[$scope.locationData.currIndex].selected, $scope.region, $scope.locationData.currIndex);

                }else if($scope.locationData.currentClickItem != "" && $scope.locationData.currentClickItem == "division") {
                    $scope.zipcodeQuotaFlg.addZipQuotaFlg = false;
                    $scope.zipcodeQuotaFlg.editZipcodeFlag = false;
                    $scope.locationData.selected = true;
                    $scope.locationData.type = "division";
                    $scope.division[$scope.locationData.currIndex].selected = true;

                    //call select fun
                    setSelectedDivisonData($scope.division[$scope.locationData.currIndex].id, $scope.division[$scope.locationData.currIndex].selected, $scope.division, $scope.locationData.currIndex);

                } else if($scope.locationData.currentClickItem != "" && $scope.locationData.currentClickItem == "natrep") {
                    if($scope.completesNeeded > 0) {
                        $scope.zipcodeQuotaFlg.addZipQuotaFlg = false;
                        $scope.zipcodeQuotaFlg.editZipcodeFlag = false;
                        $scope.locationData.selected = true;
                        $scope.locationData.type = "natrep";
                        //call fun to set quota
                        setRegionForNationalRepresentative();
                    }else {
                        $scope.locationData.selected = false;
                        $scope.locationData.type = "";
                        notify({
                            message: "Please specify total number of completes before setting Nattional quotas.",
                            classes: 'alert-warning',
                            duration: 4000
                        });
                    }
                    
                }else if($scope.locationData.currentClickItem != "" && $scope.locationData.currentClickItem == "state") {
                    //set location flags
                    $scope.zipcodeQuotaFlg.addZipQuotaFlg = false;
                    $scope.zipcodeQuotaFlg.editZipcodeFlag = false;
                    $scope.locationData.selected = true;
                    $scope.locationData.type = "state";
                    setSelectedStateData($scope.locationData.currItem);
                }else if($scope.locationData.currentClickItem != "" && $scope.locationData.currentClickItem == "dma") {
                    //set location flags
                    $scope.zipcodeQuotaFlg.addZipQuotaFlg = false;
                    $scope.zipcodeQuotaFlg.editZipcodeFlag = false;
                    $scope.locationData.selected = true;
                    $scope.locationData.type = "dma";
                    setSelectedDmaData($scope.locationData.currItem);
                }else if($scope.locationData.currentClickItem != "" && $scope.locationData.currentClickItem == "csa") {
                    //set location flags
                    $scope.zipcodeQuotaFlg.addZipQuotaFlg = false;
                    $scope.zipcodeQuotaFlg.editZipcodeFlag = false;
                    $scope.locationData.selected = true;
                    $scope.locationData.type = "csa";
                    setSelectedCsaData($scope.locationData.currItem);
                }else if($scope.locationData.currentClickItem != "" && $scope.locationData.currentClickItem == "msa") {
                    //set location flags
                    $scope.zipcodeQuotaFlg.addZipQuotaFlg = false;
                    $scope.zipcodeQuotaFlg.editZipcodeFlag = false;
                    $scope.locationData.selected = true;
                    $scope.locationData.type = "msa";
                    setSelectedMsaData($scope.locationData.currItem);
                }else if($scope.locationData.currentClickItem != "" && $scope.locationData.currentClickItem == "county") {
                    //set location flags
                    $scope.zipcodeQuotaFlg.addZipQuotaFlg = false;
                    $scope.zipcodeQuotaFlg.editZipcodeFlag = false;
                    $scope.locationData.selected = true;
                    $scope.locationData.type = "county";
                    setSelectedCountyData($scope.locationData.currItem);
                }else if($scope.locationData.currentClickItem != "" && $scope.locationData.currentClickItem == "zip"){
                    //set location flags
                    $scope.locationData.selected = true;
                    $scope.locationData.type = "zip";
                    setSelectedZipData($scope.locationData.currItem);
                }else{
                    $scope.locationData.currentClickItem = "";
                    $scope.locationData.currIndex = 0;
                }
            }
        }, 0);
    };
    $scope.getAchievedForAgeIncome = function(srvId, modalName, minRange, maxRange, index){
        if($stateParams.edit == 'editStep1' && maxRange > minRange && (minRange != undefined || minRange != null || minRange != '')){
            createSurvey.getAchievedForAgeIncome(srvId, modalName, minRange, maxRange).success(function(data) {
                if(data.apiStatus == 'success'){
                    if(modalName == 'age'){
                        $scope.ageTempArr[index].achieved = data.achieved;
                    }else if(modalName == 'hhi'){
                        $scope.incomeTempArr[index].achieved = data.achieved;
                    }
                }
            }).error(function(err){
                console.log(err);
            })
        }
    };

    /*-----------------Auto Nesting Quotas-------------------*/

    $scope.activateNesting = function(arrName, arrDetails, $event, questionType){
        console.log('arrDetails ',JSON.stringify(arrDetails));
        $scope.loader.show = true;
        if(questionType){
            arrName = $filter('lowercase')(arrName);
            arrName = arrName.trim();
            arrName = arrName.replace(/ /g,'_');
            console.log('arrName ',arrName);
            //console.log('arrDetails 2 ',JSON.stringify(arrDetails));
        }
        // Checking the key pre exists in nesting Quotas
        if(arrDetails.length > 0 || _.keys(arrDetails).length > 0){
            //Check if location Array have percent or not
            if(arrName == 'states' || arrName == 'dma' || arrName == 'csa' || arrName == 'msa' || arrName == 'county'){
                _.each(arrDetails, function(item){
                    if(item.percentage){
                        item.per = item.percentage;
                    }else if(item.percent){
                        item.per = item.percent;
                    }
                });
            }
            if($scope.nestingQuotasArr.indexOf(arrName) == -1){
                // Checking the nesting quotas length doesn't exceed 4
                if($scope.nestingQuotasArr.length == 4){
                    $scope.loader.show = false;
                    notify({
                        message: 'You may only nest a maximum of 4 qualifications at a time',
                        classes: 'alert-warning',
                        duration: 2000
                    });
                }else{
                    $scope.nestingQuotasArr.push(arrName);
                    $($event.target).addClass('active');
                    var curr_arr = new Array();
                    if(arrName == 'children'){
                        var childMasterData = _.findWhere(masterData, {"masterKey" : "children"});
                        _.each(_.keys(arrDetails), function(singleKey){
                            _.each(arrDetails[singleKey], function(elm){
                                elm.qual_id = childMasterData.id;
                                elm.qual_name = childMasterData.masterKey;
                            });
                        });
                        _.each(_.keys(arrDetails), function(singleKey){
                            _.each(arrDetails[singleKey], function(elm){
                                if(singleKey == 'have' && elm.min != undefined && elm.min !== '' && elm.max != undefined && elm.max != ''){
                                    var gender_name = new String();
                                    if(elm.gender == "both"){
                                        gender_name = "Either";
                                    }else{
                                        gender_name = (elm.gender == "111")? "Boy" : "Girl";
                                    }
                                    curr_arr.push(elm.qual_id+'?'+elm.qual_name+'?'+elm.min+'-'+elm.max+'?range?'+elm.per+'?'+gender_name);
                                }else if(singleKey == 'no' && elm.number != undefined && elm.number != '' && elm.number != null && !isNaN(elm.number)){
                                    curr_arr.push(elm.qual_id+'?'+elm.qual_name+'?'+elm.id+'?'+elm.name+'?normal?'+elm.per);
                                }
                            });
                        });
                        _.each(arrDetails, function(elm){
                            if(elm.min != undefined && elm.min !== '' && elm.max != undefined && elm.max != ''){
                                var gender_name = new String();
                                if(elm.gender == "both"){
                                    gender_name = "Either";
                                }else{
                                    gender_name = (elm.gender == "111")? "Boy" : "Girl";
                                }
                                curr_arr.push(elm.qual_id+'?'+elm.qual_name+'?'+elm.min+'-'+elm.max+'?range?'+elm.per+'?'+gender_name);
                            }
                        });
                    }else if(arrName == 'age' || arrName == 'houseHoldIncome'){
                        // Adding Qual Id in Ranges if you are directly autonesting it from modal
                        if(arrName == 'age'){
                            var ageMasterData = _.findWhere(masterData, {"masterKey" : "age"});
                            _.each(arrDetails, function(age){
                                age.qual_id = ageMasterData.id;
                                age.qual_name = ageMasterData.masterKey;
                            });
                        }else if(arrName == 'houseHoldIncome'){
                            var incomeMasterData = _.findWhere(masterData, {"masterKey" : "houseHoldIncome"});
                            _.each(arrDetails, function(income){
                                income.qual_id = incomeMasterData.id;
                                income.qual_name = incomeMasterData.masterKey;
                            });
                        }
                        _.each(arrDetails, function(elm){
                            if(elm.min != undefined && elm.min !== '' && elm.max != undefined && elm.max != ''){
                                curr_arr.push(elm.qual_id+'?'+elm.qual_name+'?'+elm.min+'-'+elm.max+'?range?'+elm.per);
                            }
                        });
                        // Removing the first empty row from the ranges array
                        //curr_arr.splice(0, 1);
                    }else{
                        // Have to add Qual Id and Qual Name for States and other locations 
                        var addQualId = function(arrName, arrDetails){
                            var arrMasterData = _.findWhere(masterData, {"masterKey" : arrName});
                            _.each(arrDetails, function(item){
                                item.qual_id = arrMasterData.id;
                                item.qual_name = arrMasterData.masterKey;
                            });
                        };
                        if(arrName == 'states' || arrName == 'csa' || arrName == 'dma' || arrName == 'msa' || arrName == 'county'){
                            addQualId(arrName, arrDetails);
                        }
                        // adding qual ends
                        _.each(arrDetails, function(elm){
                            if(elm.selected){
                                if(elm.per == undefined || elm.per == '' || elm.per == null){
                                    elm.per = 0;
                                }
                                // For grouping + Nesting
                                /*elm.id = [111, 112, 113];
                                elm.name = ['abc', 'cde', 'fgh'];*/
                                console.log('elm ',JSON.stringify(elm));
                                if(elm.qual_id == config.zipcodesQual.id){
                                    curr_arr.push(elm.qual_id+'?'+elm.qual_name+'?'+elm.id+'?'+elm.name+'?normal?'+elm.per+'?'+elm.buyer_ziplist_ref);
                                }else{
                                    if(elm.id  && typeof(elm.id) === "object"){
                                        if(elm.per < elm.percentage){
                                            elm.per = angular.copy(elm.percentage);
                                        }
                                        eleId = elm.id.join('-');
                                        eleName = elm.name_arr.join('-');
                                        curr_arr.push(elm.qual_id+'?'+elm.qual_name+'?'+eleId+'?'+eleName+'?normal?'+elm.per);
                                        //console.log('curr_arr grouped ',curr_arr);
                                    }else{
                                        console.log('\n\n elm ',JSON.stringify(elm));
                                        //console.log('curr_arr layered ',curr_arr);
                                        curr_arr.push(elm.qual_id+'?'+elm.qual_name+'?'+elm.id+'?'+elm.name+'?normal?'+elm.per);
                                        console.log('curr_arr ',curr_arr);
                                    }
                                }
                                
                            }
                        });
                    }
                    //PD-711 Creating same nesting Array but with qualification codes and condition codes
                    //var currCodeArray = new Array(); j!8Di%3Pg1

                    //for adding key of pre saved nested array
                    nestingQuotasDetailObj[arrName] = curr_arr;
                    nestingResults = cartesianProductOf(nestingQuotasDetailObj);
                    console.log('nestingResults ',nestingResults) // For holding nested array results
                    /*nestingCodesRawObject[arrName] = currCodeArray;
                    nestingCodesResults = cartesianProductOf(nestingCodesRawObject);*/
                }
            }else{
                // if clicked quotas exists in nesting quotas
                $scope.nestingQuotasArr.splice($scope.nestingQuotasArr.indexOf(arrName), 1);
                $($event.target).removeClass('active');
                var curr_arr = new Array();
                if(arrName == 'children'){
                    var childMasterData = _.findWhere(masterData, {"masterKey" : "children"});
                    _.each(_.keys(arrDetails), function(singleKey){
                        _.each(arrDetails[singleKey], function(elm){
                            elm.qual_id = childMasterData.id;
                            elm.qual_name = childMasterData.masterKey;
                        });
                    });
                    _.each(_.keys(arrDetails), function(singleKey){
                        _.each(arrDetails[singleKey], function(elm){
                            if(singleKey == 'have' && elm.min != undefined && elm.min !== '' && elm.max != undefined && elm.max != ''){
                                var gender_name = new String();
                                if(elm.gender == "both"){
                                    gender_name = "Either";
                                }else{
                                    gender_name = (elm.gender == "111")? "Boy" : "Girl";
                                }
                                curr_arr.push(elm.qual_id+'?'+elm.qual_name+'?'+elm.min+'-'+elm.max+'?range?'+elm.per+'?'+gender_name);
                            }else if(singleKey == 'no' && elm.number != undefined && elm.number != ''){
                                curr_arr.push(elm.qual_id+'?'+elm.qual_name+'?'+elm.id+'?'+elm.name+'?normal?'+elm.per);
                            }
                        });
                    });
                }else if(arrName == 'age' || arrName == 'houseHoldIncome'){
                    // Adding Qual Id in Ranges if you are directly autonesting it from modal
                    if(arrName == 'age'){
                        var ageMasterData = _.findWhere(masterData, {"masterKey" : "age"});
                        _.each(arrDetails, function(age){
                            age.qual_id = ageMasterData.id;
                            age.qual_name = ageMasterData.masterKey;
                        });
                    }else if(arrName == 'houseHoldIncome'){
                        var incomeMasterData = _.findWhere(masterData, {"masterKey" : "houseHoldIncome"});
                        _.each(arrDetails, function(income){
                            income.qual_id = incomeMasterData.id;
                            income.qual_name = incomeMasterData.masterKey;
                        });
                    }
                    _.each(arrDetails, function(elm){
                        if(elm.min != undefined && elm.min !== '' && elm.max != undefined && elm.max != ''){
                            curr_arr.push(elm.qual_id+'?'+elm.qual_name+'?'+elm.min+'-'+elm.max+'?range?'+elm.per);
                        }
                    });
                    // Removing the first empty row from the ranges array
                    //curr_arr.splice(0, 1);
                }else{
                    // Have to add Qual Id and Qual Name for States and other locations 
                    var addQualId = function(arrName, arrDetails){
                        var arrMasterData = _.findWhere(masterData, {"masterKey" : arrName});
                        _.each(arrDetails, function(item){
                            item.qual_id = arrMasterData.id;
                            item.qual_name = arrMasterData.masterKey;
                        });
                    };
                    if(arrName == 'states' || arrName == 'csa' || arrName == 'dma' || arrName == 'msa' || arrName == 'county'){
                        addQualId(arrName, arrDetails);
                    }
                    // adding qual ends
                    _.each(arrDetails, function(elm){
                        if(elm.selected && elm.maximum != '' && elm.maximum != undefined){
                            if(elm.per == undefined || elm.per == '' || elm.per == null){
                                elm.per = 0;
                            }
                            console.log('elm ',JSON.stringify(elm));
                            console.log('curr_arr ',curr_arr);
                            if(elm.qual_id == config.zipcodesQual.id){
                                curr_arr.push(elm.qual_id+'?'+elm.qual_name+'?'+elm.id+'?'+elm.name+'?normal?'+elm.per+'?'+elm.buyer_ziplist_ref);
                            }else{
                                if(elm.id  && typeof(elm.id) === "object"){
                                    if(elm.per < elm.percentage){
                                        elm.per = angular.copy(elm.percentage);
                                    }
                                    eleId = elm.id.join('-');
                                    eleName = elm.name_arr.join('-');
                                    curr_arr.push(elm.qual_id+'?'+elm.qual_name+'?'+eleId+'?'+eleName+'?normal?'+elm.per);
                                }else{
                                    curr_arr.push(elm.qual_id+'?'+elm.qual_name+'?'+elm.id+'?'+elm.name+'?normal?'+elm.per);
                                }
                            }
                        }
                    });
                }
                //for deleting key of pre saved nested array
                delete nestingQuotasDetailObj[arrName];
                nestingResults = cartesianProductOf(nestingQuotasDetailObj);
                /*delete nestingCodesRawObject[arrName];
                nestingCodesResults = cartesianProductOf(nestingCodesRawObject);
                }*/
            }
            //console.log('$scope.nestedQuotasUiObj \n '+JSON.stringify($scope.nestedQuotasUiObj));
            // if we are removing the last key from nested array then we will trigger clear nesting
            if(_.isEmpty(nestingQuotasDetailObj) == true){
                $scope.clearNesting();
            }else{
                // Calculation for Quotas to show on UI
                //Inserting values in UI object
                if(nestingResults.length > 0){
                    $scope.nestedQuotasUiObj = [];   // Clearing the old values inserted on previous click
                    _.each(nestingResults, function(item){
                        //Hold the values of nested elements to use in further calculations
                        var combinedKey = new Array(); // 
                        var combinedPer = new Array();
                        _.each(item, function(singleCode){
                            var nestedData = singleCode.split("?");
                            if(nestedData[1] == 'children'){
                                if(nestedData[2] == 111){
                                    combinedKey.push(nestedData[3]);
                                    combinedPer.push(parseFloat(nestedData[5])/100);
                                }else{
                                    combinedKey.push(nestedData[5]+'_'+nestedData[2]);
                                    combinedPer.push(parseFloat(nestedData[4])/100);
                                }
                            }else if(nestedData[1] == 'age' || nestedData[1] == 'houseHoldIncome'){
                                combinedKey.push(nestedData[2]);
                                combinedPer.push(parseFloat(nestedData[4])/100);
                            }else{
                                combinedKey.push(nestedData[3]);
                                combinedPer.push(parseFloat(nestedData[5])/100);
                            }
                        });
                        // Multiplying each percentage of array and multiply by 100 to get nesting percentage
                        combinedPer = parseFloat(_.reduce(combinedPer, function(memo, num){return memo * num}, 1) * 100);

                        var nestingPer =  parseFloat($filter('number')(combinedPer, 2));
                        var nestingAllocation = Math.round(($scope.completesNeeded * nestingPer)/100);

                        var nestingMin = Math.round(nestingAllocation - (nestingAllocation * 20/100));
                        var totalMin = Math.round($scope.completesNeeded - ($scope.completesNeeded * 20/100));
                        var nestingMax = Math.min(Math.round(nestingAllocation + (nestingAllocation * 20/100)), Math.round($scope.completesNeeded - (totalMin - nestingMin)));

                        var tempObj = new Object();
                        
                        tempObj.number = isNaN(nestingAllocation)? 0: nestingAllocation;
                        tempObj.percentage = isNaN(nestingPer)? 0: nestingPer;
                        tempObj.minimum = isNaN(nestingAllocation)? 0: nestingAllocation;
                        tempObj.maximum = isNaN(nestingAllocation)? 0: nestingAllocation;
                        tempObj.combinedKey = combinedKey;
                        tempObj.flexible =  true;
                        tempObj.flexiblePer =  0;
                        tempObj.fielded =  0;
                        $scope.nestedQuotasUiObj.push(tempObj);
                    });
                }
                // Checking wheather allocation are more than or less than with total Completes and fixes them
                correctNestedUiAllocation($scope.nestedQuotasUiObj);
            }
        }else{
            notify({message:'Please define the ranges/qualifications',classes:'alert-warning',duration:3000} );
        }
        $scope.loader.show = false;
    };
    function cartesianProductOf(nestingData){
        return _.reduce(nestingData, function(a, b) {
            return _.flatten(_.map(a, function(x) {
                return _.map(b, function(y) {
                    return x.concat([y]);
                });
            }), true);
        }, [ [] ]);
    };

    $scope.applyNesting = function(){
        var criteria_data = [];
        //Hold the values of nested elements to use in further calculations
        // Checking if the nesting Results array is empty
        if(nestingResults.length > 0){
            $scope.nestingQuotasArrFinal = [];  // Hold Key Names for which nesting has applied
            nestedTempQuotaData = [];    // Temp Array used to take quota data from here to Save Survey
            // Pushing Data as Quota V2
            _.each(nestingResults, function(item){
                var combinedPer = new Array(); // Hold value of percent from layered quota
                _.each(item, function(singlecode){
                    var itemSplit = singlecode.split("?");
                    //check the item is a range or condition
                    if(itemSplit[3] == 'range'){
                        var rangeSplit = itemSplit[2].split("-");
                        var childGndrMaster = _.findWhere(masterData, {"id":parseInt(config.childMasterQual.gender)});
                        if(itemSplit[1] == 'children'){
                                // Gender Conditions
                                var gender_conditions = new Array();
                                if(itemSplit[5] == 'Either'){
                                    gender_conditions = [{
                                            "id": "111",
                                            "name": "Boy"
                                        },
                                        {
                                            "id": "112",
                                            "name": "Girl"
                                    }];  // Both boy and girl 
                                }else{
                                    gender_conditions = [{
                                        "id":(_.findWhere(childGndrMaster.values, {"name":itemSplit[5]})).id.toString(),
                                        "name": itemSplit[5]
                                    }]
                                }
                            criteria_data.push({
                                "qualification_code":itemSplit[0],
                                "qualification_name":itemSplit[1],
                                "q_type":"normal",
                                "layered_percent":parseInt(itemSplit[4]),
                                "conditions": [{
                                    "id":'112',
                                    "name": "Have Children"
                                }]
                            },
                            {
                                "qualification_code": parseInt(config.childMasterQual.gender),
                                "qualification_name":(_.findWhere(masterData, {"id":parseInt(config.childMasterQual.gender)})).masterKey,
                                "q_type":"normal",
                                "layered_percent":parseInt(itemSplit[4]),
                                "conditions": gender_conditions
                            },
                            {
                                "qualification_code":parseInt(config.childMasterQual.age),
                                "qualification_name":(_.findWhere(masterData, {"id":parseInt(config.childMasterQual.age)})).masterKey,
                                "q_type":"range_sets",
                                "layered_percent":parseInt(itemSplit[4]),
                                "range_sets": [{"from":parseInt(rangeSplit[0]), "to":parseInt(rangeSplit[1]), "units": $scope.childAgeUnit.value}]
                            });
                        }else{
                            criteria_data.push({
                                "qualification_code":itemSplit[0],
                                "qualification_name":itemSplit[1],
                                "q_type":"range_sets",
                                "layered_percent":parseInt(itemSplit[4]),
                                "range_sets": [{"from":parseInt(rangeSplit[0]), "to":parseInt(rangeSplit[1]), "units": (itemSplit[1] == 'age'? age_units.year : currency_units)}]
                            });
                        }
                    }else{
                        var codes = itemSplit[2].split('-');
                        var names = itemSplit[3].split('-');
                        var newGrpCondition = new Array();
                        _.each(codes, function(eachCode, index){
                            var tmpObj = new Object();
                            tmpObj['id'] = eachCode.toString();
                            tmpObj['name'] = names[index];
                            newGrpCondition.push(tmpObj);
                        });
                        criteria_data.push({
                            "qualification_code":parseInt(itemSplit[0]),
                            "qualification_name":itemSplit[1],
                            "q_type":"normal",
                            "layered_percent":parseInt(itemSplit[5]),
                            "conditions": parseInt(itemSplit[0]) == 229?[]:newGrpCondition,
                            'group_qtaNm': itemSplit[3],
                            "buyer_ziplist_ref" : itemSplit[6]?itemSplit[6]:""
                        });
                    }
                    // For calculation Allocations details
                    var nestedData = singlecode.split("?");
                    if(nestedData[1] == 'age' || nestedData[1] == 'houseHoldIncome' || nestedData[1] == 'children'){
                        // For No Children Quota
                        if(nestedData[0] == config.childMasterQual.id && nestedData[2] == config.childMasterQual.noChildren){
                            combinedPer.push(parseFloat(nestedData[5])/100);
                        }else{
                            combinedPer.push(parseFloat(nestedData[4])/100);
                        }
                    }else{
                        combinedPer.push(parseFloat(nestedData[5])/100);
                    }
                });
                
                
                
                // Multiplying each percentage of array and multiply by 100 to get nesting percentage
                combinedPer = parseFloat(_.reduce(combinedPer, function(memo, num){return memo * num}, 1) * 100);
                var nestingPer =  parseFloat($filter('number')(combinedPer, 2));
                var nestingAllocation = Math.round(($scope.completesNeeded * nestingPer)/100);
                var nestingMin = Math.round(nestingAllocation - (nestingAllocation * 20/100));
                //console.log('nestingMin '+nestingMin);
                var totalMin = Math.round($scope.completesNeeded - ($scope.completesNeeded * 20/100));
                var nestingMax = Math.min(Math.round(nestingAllocation + (nestingAllocation * 20/100)), Math.round($scope.completesNeeded - (totalMin - nestingMin)));

                nestedTempQuotaData.push({
                    "type": 0,
                    "isActive":true,
                    "quotaCategory":"autoNested",
                    "locked": false,
                    "criteria":criteria_data,
                    "quantities":{
                        "minimum":nestingAllocation,
                        "maximum":nestingAllocation,
                        "flexibility":0,
                        "isFlexible":true,
                        "number":nestingAllocation,
                        "percentage":nestingPer,
                        "hasValidQuotas": true,
                        "achieved": 0,
                        "remaining":nestingAllocation,
                        "currently_open":nestingAllocation,
                        "sup_currently_open": nestingAllocation,
                        "current_target":nestingAllocation
                    }
                });
                criteria_data = []; // Clearing criteria data before making new Quota
            });
            // Function to correct the allocations of nested quotas if they are less or more than total completed
            correctNestedAllocation(nestedTempQuotaData);
            // Filling the keys in an Array for Nested Quotas
            _.each($scope.nestingQuotasArr, function(item){
                $scope.nestingQuotasArrFinal.push(item);
            });
            if(nestedTempQuotaData.length > 0){
                $scope.nestedQuota.has = true;
            }else{
                $scope.nestedQuota.has = false; 
            }
            console.log('nestedTempQuotaData ',JSON.stringify(nestedTempQuotaData));
        }else if($scope.nestedQuota.has){
            notify({
                message: "Already Applied",
                classes: 'alert-success',
                duration: 2000
            });
        }
        console.log('$scope.nestingQuotasArrFinal ',JSON.stringify($scope.nestingQuotasArrFinal));
        // Saving Zipcode Layered Data to live edit zipcode nesting
        $scope.properties.zipGrpDetail = new Array();
        if(_.indexOf($scope.nestingQuotasArrFinal, 'zipcodes') != -1){
            $scope.properties.zipGrpDetail = angular.copy($scope.selectedZipcodes);
            _.each($scope.properties.zipGrpDetail, function(item){
                delete item.minimum;
                delete item.maximum;
                delete item.number;
                delete item.percentage;
                delete item.per;
                delete item.hasValidQuotas;
            });
            console.log('$scope.properties.zipGrpDetail ',JSON.stringify($scope.properties.zipGrpDetail));
        }else{
            $scope.properties.zipGrpDetail = [];
        }
    };
    // Event on closing the nesting modal
    $scope.clearUnappliedNesting =  function($event){
        if(!$scope.nestedQuota.has){
            $scope.clearNesting();
        }else{
            // Check wheather Nested Keys final array is same as temp nested keys array
            if($scope.nestingQuotasArrFinal.length > $scope.nestingQuotasArr.length){
                var nestingArrDiff = _.difference($scope.nestingQuotasArrFinal, $scope.nestingQuotasArr); 
            }else{
                var nestingArrDiff = _.difference($scope.nestingQuotasArr, $scope.nestingQuotasArrFinal);
            }
            
            if(nestingArrDiff == null || nestingArrDiff == undefined || nestingArrDiff == ''){
                console.log(JSON.stringify(nestingArrDiff)+'Both are equal-----Do Nothing');
            }else{
                console.log(JSON.stringify(nestingArrDiff)+'Not Equal --- Remove the unapplied keys from the view');
                _.each(nestingArrDiff, function(extraKey){
                    $timeout(function() {
                        angular.element('button[key-name = "'+extraKey+'"]').triggerHandler('click');
                    }, 0);
                });
            }
        }
    };
    // Event on Clear Nesting Button
    $scope.clearNesting = function(){
        //$scope.properties.nested_quotas = [];
        $scope.nestedQuotasUiObj = [];  // To clear table Data on UI

        $scope.nestingQuotasArr = [];   // To clear heading data
        $scope.nestingQuotasArrFinal = [] // Clear the final array of keyNames for Nested Quotas

        //Raw Object used to hold data before nesting
        nestingResults = [];

        nestingQuotasDetailObj = {};    // Clear object which contains raw arrays before nesting
        nestedTempQuotaData = [];     // Clearing the temp variable whcich stores all the nested Quotas
        angular.element('.nesting-quotas-button button').removeClass('active');
        $scope.nestedQuota.has = false;
        $scope.applyNesting();
    };

    $scope.isNested = function(keyName){
        keyName = $filter('lowercase')(keyName);
        keyName = keyName.trim();
        keyName = keyName.replace(/ /g,'_');
        if(_.indexOf($scope.nestingQuotasArrFinal, keyName) != -1){
            return true;
        }else{
            return false;
        }
    };

    $scope.addToNesting = function(arrName, arrDetails, $event){
        $scope.activateNesting(arrName, arrDetails, $event);
        $scope.applyNesting();
    };

    // Function to manage the allocation always equal to total completes after updating the completes
    var correctNestedAllocation = function(nestedTempQuotaData){
        
        var totalNestingAllocations = new Number();
        var diffNesting = new Number();
        _.each(nestedTempQuotaData, function(data){
            totalNestingAllocations += data.quantities.number;
        });
        if(totalNestingAllocations != $scope.completesNeeded){
            diffNesting = $scope.completesNeeded - totalNestingAllocations;
        }
        if(diffNesting > 0){
            _.each(nestedTempQuotaData, function(nestedQuota){
                if(diffNesting > 0){
                    nestedQuota.quantities.number = nestedQuota.quantities.number+1;
                    nestedQuota.quantities.percentage = Math.round((nestedQuota.quantities.number * 100)/$scope.completesNeeded);
                    nestedQuota.quantities.minimum = nestedQuota.quantities.number;
                    nestedQuota.quantities.maximum = nestedQuota.quantities.number;
                    nestedQuota.quantities.currently_open = nestedQuota.quantities.number;
                    nestedQuota.quantities.remaining = nestedQuota.quantities.number;
                    nestedQuota.quantities.current_target = nestedQuota.quantities.number;
                    nestedQuota.quantities.sup_currently_open = nestedQuota.quantities.number;
                    diffNesting--;
                }
            });
        }else if(diffNesting < 0){
            diffNesting = -diffNesting;
            _.each(nestedTempQuotaData, function(nestedQuota){
                if(diffNesting > 0){
                    nestedQuota.quantities.number = nestedQuota.quantities.number-1;
                    nestedQuota.quantities.percentage = Math.round((nestedQuota.quantities.number * 100)/$scope.completesNeeded);
                    nestedQuota.quantities.minimum = nestedQuota.quantities.number;
                    nestedQuota.quantities.maximum = nestedQuota.quantities.number;
                    nestedQuota.quantities.currently_open = nestedQuota.quantities.number;
                    nestedQuota.quantities.remaining = nestedQuota.quantities.number;
                    nestedQuota.quantities.current_target = nestedQuota.quantities.number;
                    nestedQuota.quantities.sup_currently_open = nestedQuota.quantities.number;
                    diffNesting--;
                }
            });
        }
    }

    var correctNestedUiAllocation = function(nestedQuotasUiObj){
        var totalAllocation = new Number();
        _.each(nestedQuotasUiObj, function(item){
            if(item.number){
                totalAllocation += item.number;
            }
        });
        if(totalAllocation != $scope.completesNeeded){
            var diff = $scope.completesNeeded - totalAllocation;
            if(diff > 0){
                _.each(nestedQuotasUiObj, function(nestedQuota){
                    if(diff > 0){
                        nestedQuota.number = nestedQuota.number + 1;
                        nestedQuota.percentage = parseFloat($filter('number')((nestedQuota.number * 100)/$scope.completesNeeded, 2));
                        nestedQuota.minimum = nestedQuota.number;
                        nestedQuota.maximum = nestedQuota.number;
                        diff--;
                    }
                });
            }else if(diff < 0){
                diff = -diff;
                if(diff > 0){
                    _.each(nestedQuotasUiObj, function(nestedQuota){
                        if(diff > 0){
                            nestedQuota.number = (nestedQuota.number - 1) < 0 ? 0:(nestedQuota.number - 1);
                            nestedQuota.percentage = parseFloat($filter('number')((nestedQuota.number * 100)/$scope.completesNeeded, 2));
                            nestedQuota.minimum = nestedQuota.number;
                            nestedQuota.maximum = nestedQuota.number;
                            diff--;
                        }
                    });
                }
            }
        }
    }

    //Function to Update the Quotas as the completes are increased or decreased
    $scope.updateQuotasOnChange = function(){
        $scope.showLoader = 'DataLoading'; 
        $scope.loader.show = true;
        if($scope.liveSurveyEditingStep == 'editStep1' && $scope.completesNeeded > 0 && $scope.totalFielded > $scope.completesNeeded){
            notify({
                message: "You can't set completes less than total fielded",
                classes: 'alert-warning',
                duration: 2000
            });
        }else{
            /*-------------Updating the Nested Quotas----
            --------------------------------------------*/
            if(nestedTempQuotaData.length > 0){
                _.each(nestedTempQuotaData, function(data, index){
                    var updatedAllocation = Math.round((data.quantities.percentage * $scope.completesNeeded)/100);
                    var updatedMin = Math.round(updatedAllocation - (updatedAllocation * 20/100));
                    var totalMin = Math.round($scope.completesNeeded - ($scope.completesNeeded * 20/100));
                    var updatedMax = Math.min(Math.round(updatedAllocation + (updatedAllocation * 20/100)), Math.round($scope.completesNeeded - (totalMin - updatedMin)));
                    var updatedPer =  $filter('number')(((updatedAllocation * 100)/$scope.completesNeeded), 2);
                    
                    data.quantities.number = isNaN(updatedAllocation)? 0: updatedAllocation;
                    data.quantities.minimum = isNaN(updatedAllocation)? 0: updatedAllocation;
                    data.quantities.maximum = isNaN(updatedAllocation)? 0: updatedAllocation;
                    data.quantities.percentage = isNaN(updatedPer)? 0: updatedPer;
                    data.quantities.currently_open = isNaN(updatedAllocation)? 0: updatedAllocation;
                    data.quantities.remaining = isNaN(updatedAllocation)? 0: updatedAllocation;
                    data.quantities.current_target = isNaN(updatedAllocation)? 0: updatedAllocation;
                    data.quantities.sup_currently_open = isNaN(updatedAllocation)? 0: updatedAllocation;
                });
                // Checking wheather allocation are more than or less than with total Completes and fixes them
                correctNestedAllocation(nestedTempQuotaData);
                // Updating Ui Nesting Data
            }
            // For Nested Ui only
            if($scope.nestedQuotasUiObj){
                _.each($scope.nestedQuotasUiObj, function(nestedUI){
                    var updatedAllocation = Math.round((nestedUI.percentage * $scope.completesNeeded)/100);
                    var updatedMin = Math.round(updatedAllocation - (updatedAllocation * 20/100));
                    var totalMin = Math.round($scope.completesNeeded - ($scope.completesNeeded * 20/100));
                    var updatedMax = Math.min(Math.round(updatedAllocation + (updatedAllocation * 20/100)), Math.round($scope.completesNeeded - (totalMin - updatedMin)));
                    var updatedPer =  $filter('number')(((updatedAllocation * 100)/$scope.completesNeeded), 2);
                    nestedUI.number = isNaN(updatedAllocation)? 0: updatedAllocation;
                    nestedUI.minimum = isNaN(updatedAllocation)? 0: updatedAllocation;
                    nestedUI.maximum = isNaN(updatedAllocation)? 0: updatedAllocation;
                    nestedUI.percentage = isNaN(updatedPer)? 0: updatedPer;
                    nestedUI.currently_open = isNaN(updatedAllocation)? 0: updatedAllocation;
                    nestedUI.remaining = isNaN(updatedAllocation)? 0: updatedAllocation;
                    nestedUI.current_target = isNaN(updatedAllocation)? 0: updatedAllocation;
                    nestedUI.sup_currently_open = isNaN(updatedAllocation)? 0: updatedAllocation;
                });
                // Checking wheather allocation are more than or less than with total Completes and fixes them
                correctNestedUiAllocation($scope.nestedQuotasUiObj);
            }
            /*-----------------Nesting Update Ends------------*/

            //Function to autoIncrement the Layered Quotas according to percentages
            var updateAllLayeredQuota =  function(eachQuota){
                var min = new Number();
                var totalAllocation = new Number();
                // to calculate total min first
                //console.log('\n\n eachQuota starting '+JSON.stringify(eachQuota));
                _.each(eachQuota, function(item){
                    if(!item.per){
                        item.per = item.percentage;
                    }
                    var number = Math.round((item.per * $scope.completesNeeded)/100);
                    //console.log('number '+number);
                    if(number){
                        min += Math.round(number - (number * parseInt(item.flexiblePer)) / 100);
                        totalAllocation += number;
                    }
                });
                //console.log('totalAllocation '+totalAllocation);
                //updating the number, minimum and maximum value
                _.each(eachQuota, function(item){
                    if(!item.per){
                        item.per = item.percentage;
                    }
                    item.number = Math.round((item.per * $scope.completesNeeded)/100);
                    //console.log('\n\n\n ****** item.number '+item.number+' '+isNaN(item.number));
                    if(isNaN(item.number)){
                        item.number = 0;
                    }
                    //console.log('\n\n\n ****** item.number final '+item.number+' '+isNaN(item.number));
                    //if flexbility is on and number is less than total completes
                    if(item.flexible && item.number < $scope.completesNeeded){
                        item.minimum = Math.round(item.number - (item.number * parseInt(item.flexiblePer)) / 100);
                        item.maximum = Math.min(parseInt(item.number + (item.number * parseInt(item.flexiblePer)) / 100), Math.round($scope.completesNeeded - (min - item.minimum)));

                    }//if flexbility is on and number is same as completes or flexbility is off 
                    else if((item.flexible && item.number == $scope.completesNeeded) || !item.flexible){
                        item.minimum = item.number;
                        item.maximum = item.number;
                    }
                });
                if(totalAllocation != $scope.completesNeeded && totalAllocation != 0){
                    var diff = $scope.completesNeeded - totalAllocation;
                    //console.log('diff '+diff);
                    if(diff > 0){
                        var ind = 0;
                        //console.log('eachQuota ', JSON.stringify(eachQuota));
                        eachQuota[ind].number = eachQuota[ind].number + diff;
                        eachQuota[ind].minimum = Math.round(eachQuota[ind].number - (eachQuota[ind].number * parseInt(eachQuota[ind].flexiblePer)) / 100);
                        eachQuota[ind].maximum = Math.min(parseInt(eachQuota[ind].number + (eachQuota[ind].number * parseInt(eachQuota[ind].flexiblePer)) / 100), Math.round($scope.completesNeeded - (min - eachQuota[ind].minimum)));
                    }else if(diff < 0){
                        diff = -diff;
                        var ind = 0;
                        //console.log('ind 2 ', ind);
                        eachQuota[ind].number = (eachQuota[ind].number - diff) < 0 ? 0:(eachQuota[ind].number - diff);
                        eachQuota[ind].minimum = Math.round(eachQuota[ind].number - (eachQuota[ind].number * parseInt(eachQuota[ind].flexiblePer)) / 100);
                        eachQuota[ind].maximum = Math.min(parseInt(eachQuota[ind].number + (eachQuota[ind].number * parseInt(eachQuota[ind].flexiblePer)) / 100), Math.round($scope.completesNeeded - (min - eachQuota[ind].minimum)));
                    }
                }
            }
            // Made an array to run a common loop for updating all the arrays
            var allQuotasArr = [['gender', $scope.sltGender, $scope.genderInfo], ['age', $scope.ageTempArr], ['houseHoldIncome', $scope.incomeTempArr], ['race', $scope.sltRace, $scope.race], ['relationships', $scope.sltRelation, $scope.relation], ['educations', $scope.sltEducation, $scope.education], ['employments', $scope.sltEmployment, $scope.employement], ['device', $scope.sltDevice, $scope.deviceInfo], ['regions', $scope.sltRegion, $scope.region], ['divisons', $scope.sltDivision, $scope.division], ['states', $scope.selectedStates], ['csa', $scope.selectedCSAs], ['msa', $scope.selectedMSAs], ['dma', $scope.selectedDMAs], ['county', $scope.selectedCountys], ['raceBera', $scope.sltRaceBera, $scope.raceBera], ['hispanicOrigin', $scope.hispanicOrigin, $scope.hispanic], ['children', $scope.chldTempArr, $scope.children], ['race', $scope.sltRace, $scope.newraceModal], ['relationships', $scope.sltRelation, $scope.newrelationModal], ['educations', $scope.sltEducation, $scope.groupingeducationModal], ['employments', $scope.sltEmployment, $scope.groupingemploymentModal], ['raceBera', $scope.sltRaceBera, $scope.groupingRaceBeraModel], ['device', $scope.sltDevice, $scope.groupingDeviceModel], ['regions', $scope.sltRegion, $scope.groupingCensusRgnModel], ['divisons', $scope.sltDivision, $scope.groupingDivisionModel], ['states', $scope.groupingStateModel], ['csa', $scope.groupingCsaModel], ['msa', $scope.groupingMsaModel], ['dma', $scope.groupingDmaModel], ['county', $scope.groupingCountyModel], ['zipcode', $scope.selectedZipcodes]];

            //Made an array to run a common loop for updating all grouped Quota Array
            //var allGroupedQuotaArr = [['race', $scope.sltRace, $scope.newraceModal], ['relationships', $scope.sltRelation, $scope.newrelationModal], ['educations', $scope.sltEducation, $scope.groupingeducationModal], ['employments', $scope.sltEmployment, $scope.groupingemploymentModal]]
            //Updating the Layered Quotas
            _.each(allQuotasArr, function(singleQuota){
                //console.log('singleQuota starting '+JSON.stringify(singleQuota));
                // Removing an extra row for age and income to ignore it from updating the quotas
                if((singleQuota[0] == 'age' && singleQuota[1].length > 0 && !singleQuota[1][0].max) || (singleQuota[0] == 'houseHoldIncome' && singleQuota[1].length > 0 &&  !singleQuota[1][0].max)){
                    singleQuota[1].splice(0, 1);
                    //Update Age and Income model on completes changes
                    updateAllLayeredQuota(singleQuota[1]);
                    //console.log('singleQuota 1 '+JSON.stringify(singleQuota[1]));
                }
                //Handle the children Model auto update on complete change
                if(singleQuota[0] == 'children') {
                    var children_TempArr = [];
                    _.each(_.keys(singleQuota[1]), function(singlekey) {
                        _.each(singleQuota[1][singlekey], function(checkSnglQl) {
                            if(checkSnglQl.number || checkSnglQl.number != "") {
                                children_TempArr.push(checkSnglQl);
                            }
                        })
                    })
                    updateAllLayeredQuota(children_TempArr); 
                    _.each(_.keys(singleQuota[1]), function(chld_qual){
                        var matchCommn = _.intersection(singleQuota[1][chld_qual], children_TempArr);
                        var unmatched = _.difference(singleQuota[1][chld_qual], children_TempArr);
                        var margeArry = _.union(matchCommn, unmatched);
                        singleQuota[1][chld_qual]  = matchCommn;
                        _.each(unmatched, function(sgglQuotaTop) {
                            singleQuota[1][chld_qual].unshift(sgglQuotaTop);
                        })
                    })
                }
                if(singleQuota[1] && singleQuota[1].length > 0){
                    if(!$scope.isNested(singleQuota[0])){
                        updateAllLayeredQuota(singleQuota[1]);
                        
                        //Updating the other arrays used to show on UI for some quotas
                        if(singleQuota[2]){
                            var gruopedAvailblFlg = false;
                            _.each(singleQuota[2], function(item){
                                //PD-961 condition grouping on completes change
                                if(_.has(item, "condditionGroup") && item.condditionGroup) {
                                    gruopedAvailblFlg = true;
   
                                    item.number = Math.round(($scope.completesNeeded * item.percentage) / 100);
                                    item.minimum = item.number;
                                    item.maximum = item.number;
                                } else {
                                    var row_num =  _.findIndex(singleQuota[1], {"id":item.id});
                                    //console.log('index '+row_num);
                                    if(row_num != -1){
                                        item.number = singleQuota[1][row_num].number;
                                        item.minimum = singleQuota[1][row_num].minimum;
                                        item.maximum = singleQuota[1][row_num].maximum;
                                        item.per = singleQuota[1][row_num].percentage;
                                        item.percentage = singleQuota[1][row_num].percentage;
                                    }
                                }
                            });
                            
                            if(gruopedAvailblFlg) { 
                               updateAllLayeredQuota(singleQuota[2]); 
                                singleQuota[1] = reAssignCompletesInGrouping(singleQuota[2], singleQuota[1]);
                            }
                        }
                    }
                }
                //Again adding the empty removed row from age and income
                if((singleQuota[0] == 'age' && singleQuota[1].length > 0 && singleQuota[1][0].max) || (singleQuota[0] == 'houseHoldIncome' && singleQuota[1].length > 0 && singleQuota[1][0].max)){
                    singleQuota[1].unshift({
                        "min": '',
                        "max": '',
                        "number": '',
                        "per": '',
                        "flexiblePer": singleQuota[1][0].flexiblePer,
                        "flexible": singleQuota[1][0].flexible
                    });
                    //console.log('singleQuota 1 '+JSON.stringify(singleQuota[1]));
                }
            });
            // For Recalculating NatRep Quotas when completes are updated if applied
            /*if($scope.locationData.selected && $scope.locationData.type == "natrep"){
                $timeout(function(){
                    setRegionForNationalRepresentative();
                }, 0);
            }*/
            // For updating Advance Quotas
            /*_.each(advQuota, function(singleQuota){
                var updatedAllcoation = Math.round((singleQuota.quantities.percentage * $scope.completesNeeded)/100);
                singleQuota.quantities['number'] = updatedAllcoation;
                singleQuota.quantities['percentage'] = singleQuota.quantities.percentage;
                singleQuota.quantities['minimum'] = Math.round(updatedAllcoation - (updatedAllcoation * singleQuota.quantities.flexibility/100));
                singleQuota.quantities['maximum'] = Math.round(updatedAllcoation + (updatedAllcoation * singleQuota.quantities.flexibility/100));
                console.log('\n\n singleQuota ',JSON.stringify(singleQuota))
            });
            _.each(advanceData, function(item){
                console.log('\n\n item ',JSON.stringify(item))
                _.each(item.selected[item.qualification_id[0]].answer_data, function(singleQuota){
                    var updatedAllcoation = Math.round((singleQuota.percentage * $scope.completesNeeded)/100);
                    singleQuota['number'] = updatedAllcoation;
                    singleQuota['percentage'] = singleQuota.percentage;
                    singleQuota['per'] = singleQuota.per;
                    singleQuota['minimum'] = Math.round(updatedAllcoation - (updatedAllcoation * singleQuota.flexibility/100));
                    singleQuota['maximum'] = Math.round(updatedAllcoation + (updatedAllcoation * singleQuota.flexibility/100));
                });
                console.log('\n\n item ',JSON.stringify(item))
            });*/
        }
        $scope.showLoader = ''; 
        $scope.loader.show = false;
    }
     /*PD-961*/
    function reAssignCompletesInGrouping(sourceQuotaData, destQuotaData) {
        _.each(destQuotaData, function(snglQuota) {
            var findQuota = _.findWhere(sourceQuotaData, {"name": snglQuota.name});
            if(findQuota) {
               snglQuota.number =  findQuota.number;
               snglQuota.minimum = findQuota.minimum || findQuota.number;
               snglQuota.maximum = findQuota.maximum || findQuota.number;
            }
            else {
               snglQuota.number =  0;
               snglQuota.minimum = 0;
               snglQuota.maximum = 0; 
            }
        })
        return destQuotaData;
    }
    /*--- Advance Targeting----*/
    $scope.advRange = {'condition':'less_than', 'max':0 , 'min': 0, 'orig_value': '' };
    $scope.saveAdvTarget = function(questionDetail){
        if(((questionDetail.question_type == 'multipunch' || questionDetail.question_type == 'singlepunch') && $scope.selectedOptions.length > 0 && angular.element( document.querySelector( '#advDays' ) ).val() != '') || (questionDetail.question_type == 'range' && $scope.advRange.orig_value != '' && $scope.advRange.orig_value != undefined && angular.element( document.querySelector( '#advDays' ) ).val() != '')){
            // Checking value should not be greater than 999
            if(questionDetail.question_type == 'range' && ($scope.advRange.orig_value <= 0 || $scope.advRange.orig_value >= 999)){
                notify({
                    message: "Value can't be less than or equal to 0 and greater than or equal to 999",
                    classes: 'alert-warning',
                    duration: 2000
                });
                return false;
            }

            var quotaExistIndex = _.findIndex(advanceData, {"respondent_question_id": questionDetail.respondent_question_id});
            // If question doesn't exists then push it otherwise update it
            if(quotaExistIndex == -1){
                var singleTarget = new Object();
                singleTarget = questionDetail;   // Adding whole response in payload
                //Creating data for selected answers for dropdown
                    singleTarget["selected"] = new Object();
                    singleTarget.selected[questionDetail.qualification_id[0]] = new Object();
                    if(questionDetail.stem2.indexOf('%%period%%') != -1){
                        singleTarget.selected['period'] = new Object();
                    }
                    var selected_answers = new Array();
                    if(questionDetail.question_type == 'range'){
                        selected_answers = {'condition':$scope.advRange.condition, 'from':$scope.advRange.min, 'to': $scope.advRange.max, 'orig_value':$scope.advRange.orig_value, 'units':singleTarget.units}
                        singleTarget["rangeQuesOption"] = $scope.rangeQuesOption;
                    }else{
                        _.each($scope.selectedOptions, function(answerId){
                            var ansObj = new Object();
                            ansObj["id"] = answerId;
                            ansObj["name"] = (_.findWhere(singleTarget.answers[questionDetail.qualification_id[0]].answer_data, {'id':parseInt(answerId)})).text;
                            ansObj["selected"] = true;
                            selected_answers.push(ansObj);
                        });
                    }
                // dropdown answers
                singleTarget.selected[questionDetail.qualification_id[0]]["answer_type"] = questionDetail.answers[questionDetail.qualification_id[0]].answer_type;
                singleTarget.selected[questionDetail.qualification_id[0]]["answer_data"] = selected_answers;
                singleTarget['hasQuota'] = false;
                // days value
                if(questionDetail.stem2.indexOf('%%period%%') != -1){
                    singleTarget.selected['period'] = new Object();
                    singleTarget.selected['period']["answer_type"] = "input";
                    singleTarget.selected['period']["answer_data"] = angular.element( document.querySelector( '#advDays' ) ).val();
                }
                advanceData.push(singleTarget);
                var tempCopyVal = {};
                angular.copy(singleTarget, tempCopyVal);
                $scope.advanceDataPayload.push(tempCopyVal);
            }else{
                // Updating the Advance Data Array
                    var selected_answers_update = new Array();
                    if(questionDetail.question_type == 'range'){
                        selected_answers_update = {'condition':$scope.advRange.condition, 'from':$scope.advRange.min, 'to':$scope.advRange.max, 'orig_value':$scope.advRange.orig_value, 'units':questionDetail.units}
                    }else{
                        _.each($scope.selectedOptions, function(answerId){
                            var ansObj = new Object();
                            ansObj["id"] = answerId;
                            ansObj["name"] = (_.findWhere(questionDetail.answers[questionDetail.qualification_id[0]].answer_data, {'id':parseInt(answerId)})).text;
                            ansObj["selected"] = true;
                            selected_answers_update.push(ansObj);
                        });
                    }
                advanceData[quotaExistIndex].selected[advanceData[quotaExistIndex].qualification_id[0]].answer_data = selected_answers_update;
                if(advanceData[quotaExistIndex].stem2.indexOf('%%period%%') != -1){
                    advanceData[quotaExistIndex].selected['period'].answer_data = angular.element( document.querySelector( '#advDays' ) ).val();
                }
                $scope.advanceDataPayload[quotaExistIndex].selected[$scope.advanceDataPayload[quotaExistIndex].qualification_id[0]].answer_data = selected_answers_update;
                if($scope.advanceDataPayload[quotaExistIndex].stem2.indexOf('%%period%%') != -1){
                    $scope.advanceDataPayload[quotaExistIndex].selected['period'].answer_data = angular.element( document.querySelector( '#advDays' ) ).val();
                }
            }

            // For Button Data Array
            var buttonExistIndex = _.findIndex($scope.tempAdvArray, {"respondent_question_id": questionDetail.respondent_question_id});
            if(buttonExistIndex == -1){ // if not in the array then add it
                if(singleTarget.question_type == 'range'){
                    $scope.tempAdvArray.push({
                        "respondent_question_id": singleTarget.respondent_question_id,
                        "stem1": singleTarget.stem1,
                        "stem1_ui": singleTarget.stem1_ui,
                        "stem2": singleTarget.stem2,
                        "selected": singleTarget.selected,
                        "qualification_id": singleTarget.qualification_id,
                        "range" : {
                            'condition': singleTarget.selected[singleTarget.qualification_id[0]].answer_data.condition,
                            'from': singleTarget.selected[singleTarget.qualification_id[0]].answer_data.from,
                            'to': singleTarget.selected[singleTarget.qualification_id[0]].answer_data.to,
                            'orig_value': singleTarget.selected[singleTarget.qualification_id[0]].answer_data.orig_value
                        },
                        "question_type" :singleTarget.question_type,
                        "answers" : singleTarget.answers,
                        "buyer_text" : singleTarget.buyer_text,
                        "question_description" : singleTarget.question_description,
                        "rangeQuesOption": $scope.rangeQuesOption
                    });
                }else{
                    $scope.tempAdvArray.push({
                        "respondent_question_id": singleTarget.respondent_question_id,
                        "stem1": singleTarget.stem1,
                        "stem1_ui": singleTarget.stem1_ui,
                        "stem2": singleTarget.stem2,
                        "selected": singleTarget.selected,
                        "qualification_id": singleTarget.qualification_id,
                        "allOptions": singleTarget.answers[singleTarget.qualification_id[0]].answer_data,
                        "question_type" :singleTarget.question_type,
                        "answers" : singleTarget.answers,
                        "buyer_text" : singleTarget.buyer_text,
                        "question_description" : singleTarget.question_description,
                        "hasQuota":false
                    });
                }
                notify({
                    message: 'Successfully Added',
                    classes: 'alert-success',
                    duration: 2000
                });
            }else{
                $scope.tempAdvArray[buttonExistIndex].stem1 = questionDetail.stem1;
                $scope.tempAdvArray[buttonExistIndex].stem2 = questionDetail.stem2;
                $scope.tempAdvArray[buttonExistIndex].selected = questionDetail.selected;
                if(questionDetail.question_type == 'range'){
                    $scope.tempAdvArray[buttonExistIndex].range = {
                        'condition': $scope.advRange.condition,
                        'from': $scope.advRange.min,
                        'to': $scope.advRange.max,
                        'orig_value': $scope.advRange.orig_value,
                        'units':questionDetail.units
                    }
                }else{
                    $scope.tempAdvArray[buttonExistIndex].allOptions = questionDetail.allOptions;
                }
                //console.log('$scope.tempAdvArray '+JSON.stringify($scope.tempAdvArray));
                notify({
                    message: 'Details Successfully Updated',
                    classes: 'alert-success',
                    duration: 2000
                });
            }
            // For Qualifications
            var qualExistIndex = _.findIndex(advanceQual, {"qualification_code": questionDetail.qualification_id[0]});
            if(qualExistIndex == -1){
                // If Qual doesn't exist then push it
                if(singleTarget.question_type == 'range'){
                    var period = angular.element( document.querySelector( '#advDays' ) ).val();
                    advanceQual.push({
                        "qualification_code": singleTarget.qualification_id[0],
                        "q_type": "range",
                        "q_category": "advance",
                        "q_name": (_.findWhere(masterData, {"id":parseInt(singleTarget.qualification_id[0])})).masterKey,
                        "range_sets":{'from':$scope.advRange.min, 'to':$scope.advRange.max, 'units': singleTarget.units, "period":parseInt(period) ? parseInt(period): ''}
                    });
                }else{
                    var adv_conditions = new Array();
                    _.each(singleTarget.selected[singleTarget.qualification_id[0]].answer_data, function(answer){
                        adv_conditions.push({
                            "id":  answer.id,
                            "name": answer.name
                        });
                    });
                    advanceQual.push({
                        "qualification_code": singleTarget.qualification_id[0],
                        "q_type": "normal", 
                        "q_category": "advance",
                        "q_name": (_.findWhere(masterData, {"id":parseInt(singleTarget.qualification_id[0])})).masterKey,
                        "conditions":adv_conditions
                    });
                }
                //console.log('advanceQual '+JSON.stringify(advanceQual));
            }else{
                // If Qual id pushed then update the data
                var period = angular.element( document.querySelector( '#advDays' ) ).val();
                advanceQual[qualExistIndex].qualification_code = questionDetail.qualification_id[0];
                advanceQual[qualExistIndex].q_name = (_.findWhere(masterData, {"id":parseInt(questionDetail.qualification_id[0])})).masterKey;
                if(questionDetail.question_type == 'range'){
                    advanceQual[qualExistIndex].q_type = "range";
                    advanceQual[qualExistIndex].range_sets = {'from':$scope.advRange.min, 'to':$scope.advRange.max, 'units':questionDetail.selected[questionDetail.qualification_id[0]].answer_data.units, "period": parseInt(period) ? parseInt(period): ''};
                }else{
                    var adv_conditions = new Array();
                    _.each(questionDetail.selected[questionDetail.qualification_id[0]].answer_data, function(answer){
                        adv_conditions.push({
                            "id":  answer.id,
                            "name": answer.name
                        });
                    });
                    advanceQual[qualExistIndex].conditions = adv_conditions;
                    advanceQual[qualExistIndex].q_type = "normal";
                }
            }
            //For clearing modal fields
            $timeout(function(){
                angular.element('#advanceTargetingModal button.advclose').trigger('click');
            }, 0);
            $scope.clearAdvModal();
            if(questionDetail.hasQuota){
                $scope.delAdvQuota(questionDetail.qualification_id[0], $scope.tempAdvArray);
            }
        }else{
            notify({
                message: "Please enter all the fields",
                classes: 'alert-warning',
                duration: 2000
            });
        }
        
    }

    $scope.lockQuestion =  false;
    $scope.openAdvTargetModal = function(quesData){
        $scope.selectedOptions = [];
        $scope.myOptions = [];
        if(quesData.question_type == "range"){
            $scope.advRange.condition = quesData.range.condition;
            $scope.advRange.orig_value = quesData.range.orig_value;
            $scope.advRange.min = quesData.range.from;
            $scope.advRange.max = quesData.range.to;
            $scope.rangeQuesOption = quesData.rangeQuesOption;
        }else{
            $scope.myOptions = quesData.allOptions;
            _.each(quesData.selected[quesData.qualification_id[0]].answer_data, function(item){
                $scope.selectedOptions.push(item.id);
            });
        }
        // Question Text variable from directive
        $scope.questionText = quesData.question_description;
        // Filling Question details in QuestionDetail Obj
        $scope.questionDetail = quesData;
        // Appending the days row html
        var stem2 = quesData.stem2;
        // Check if stem 2 have qualificaiton id or not, if exist then split otherwise directly update
        if(quesData.stem2.indexOf('%%period%%') != -1){
            stem2 = stem2.split('%%period%%');
            angular.element( document.querySelector( '#days_row' ) ).html(stem2[0]+'<input type="number" id="advDays" ng-model="advDays" value="'+quesData.selected['period'].answer_data+'">'+stem2[1]);
        }else{
            angular.element( document.querySelector( '#days_row' ) ).html(stem2);
        }
        // Function fires only on the applied advance targeting button
        $scope.lockQuestion =  true;
    }

    $scope.optionConfig = {
        create: true,
        valueField: 'id',
        labelField: 'text',
        delimiter: '|',
        placeholder: 'Pick something',
        sortField: false, 
        onInitialize: function(selectize){
            // receives the selectize object as an argument
            console.log('onInitialize');
        },
        onChange : function(selectize){
            //Adding Id's in selected options
            //var selectedlength = $scope.selectedOptions.length;
            $scope.selectedOptions = selectize;
            
        },
        onOptionAdd : function(selectize){
            console.log('onOptionAdd');
        }
      // maxItems: 1
    };

    $scope.calculateAdvRange = function(){
        // Calculating min max for less than greater than condition
        if($scope.advRange.orig_value != undefined && ($scope.advRange.condition == 'less_than' || $scope.advRange.condition == 'less than')){
            $scope.advRange.max = $scope.advRange.orig_value - 1;
            $scope.advRange.min = 0;
        }else if($scope.advRange.orig_value != undefined && ($scope.advRange.condition == 'more_than' || $scope.advRange.condition == 'more than')){
            $scope.advRange.max = 999;
            $scope.advRange.min = $scope.advRange.orig_value + 1;
        }
    }

    $scope.clearAdvModal =  function(){
        $scope.selectedOptions = [];
        $scope.myOptions = [];
        angular.element( document.querySelector( '#days_row' ) ).html('');
        $scope.questionText = "";
        $scope.advRange = {'condition':'less_than', 'max': 0, 'min': 0, 'orig_value': '' };
        $scope.questionDetail = {};
        // For unlocking the Question Selection Box
        $scope.lockQuestion =  false;
    };

    $scope.deleteAdvTarget = function(resp_id, qual_id){
        // remove from button showing temp array
        var buttonIndex = _.findIndex($scope.tempAdvArray, {'respondent_question_id':resp_id});
        // Removing from advance Data
        var dataIndex = _.findIndex(advanceData, {'respondent_question_id':resp_id});
        if(buttonIndex != -1 && dataIndex != -1){
            $scope.tempAdvArray.splice(buttonIndex, 1);
            advanceData.splice(dataIndex, 1);
            //Remove From qual array if exist
            var qualIndex = _.findIndex(advanceQual, {'qualification_code':qual_id});
            if(qualIndex != -1){
                advanceQual.splice(qualIndex, 1);
            }

            $timeout(function(){
                angular.element('#advanceTargetingModal button.advclose').trigger('click');
            }, 0);

            $scope.delAdvQuota(qual_id, $scope.tempAdvArray);

            notify({
                message: "Target successfully removed",
                classes: 'alert-success',
                duration: 2000
            });
        }else{
            notify({
                message: "Target doesn't exist",
                classes: 'alert-warning',
                duration: 2000
            });
        }
    }

    $scope.removeAllAdvTarget = function(){
        $scope.selectedOptions = [];  // Hold selected Options
        advanceQual = [];       // Used for the advance qualifications
        advanceData = [];      // Using for creating payload
        $scope.tempAdvArray = [];   // Using for showing buttons and their data
        advQuota = [];
    }

    /*
    *Function to apply Census Repo on Quotas PD-1130
    */
    $scope.applyCensusRepo = function(quotaName) {
        var QualId = "";
        var tmpCensusArrQuta = new Array();
        var censusRepData = _.findWhere(masterData, {"masterKey":"census_rep"});
        if(quotaName == "genderModal") {
            if($scope.gndrQuotaFlag.editGndrFlag) {
                if(!confirm("Setting Census Rep for this Qualification will reset your selections. Do you wish to continue?")) {
                    return;
                }
            }
            QualId = genderQual[0].qualification_code;
            $scope.censusRepoFlag.hasCensusRepoGndr = true;
        }
        else if(quotaName == "raceModal") {
            if($scope.raceQuotaFlag.editRaceFlag) {
                if(!confirm("Setting Census Rep for this Qualification will reset your selections. Do you wish to continue?")) {
                    return;
                }
            }
            QualId = raceQual[0].qualification_code;
            $scope.censusRepoFlag.hasCensusRepoRace = true;
        }
        else if(quotaName == "hispanicModal") {
            if($scope.hisQuotaFlag.editHisOriFlag) {
                if(!confirm("Setting Census Rep for this Qualification will reset your selections. Do you wish to continue?")) {
                    return;
                }
            }
            QualId = hispanicQual[0].qualification_code;
            $scope.censusRepoFlag.hasCensusRepoHis = true;
        }
        else if(quotaName == 'age') {
            if($scope.ageQuotaFlag.editAgeFlag) {
                if(!confirm("Setting Census Rep for this Qualification will reset your selections. Do you wish to continue?")) {
                    return;
                }
            }
            QualId = ageQual[0].qualification_code;
            $scope.censusRepoFlag.hasCensusRepoAge = true;
        }
        else if(quotaName == "income") {
            if($scope.incomeQuotaFlag.editIncomeFlag) {
                if(!confirm("Setting Census Rep for this Qualification will reset your selections. Do you wish to continue?")) {
                    return;
                }
            }
            QualId = incomeQual[0].qualification_code; 
            $scope.censusRepoFlag.hasCensusRepoIncome = true;
        }
        else if(quotaName == "empModal") {
            if($scope.empQuotaFlag.editEmpFlag) {
                if(!confirm("Setting Census Rep for this Qualification will reset your selections. Do you wish to continue?")) {
                    return;
                }
            }
            QualId = empQual[0].qualification_code;
            $scope.censusRepoFlag.hasCensusRepoEmploy = true;
        }
        else {
            if(quotaName == "eduModal") {
                if($scope.eduQuotaFlag.editEduFlag) {
                    if(!confirm("Setting Census Rep for this Qualification will reset your selections. Do you wish to continue?")) {
                        return;
                    }
                }
                QualId = eduQual[0].qualification_code; 
                $scope.censusRepoFlag.hasCensusRepoEdu = true;
            }
        }
        _.each(censusRepData.data.US.eng, function(repoData){
            var repoDataKey = _.keys(repoData);
            if(parseInt(repoDataKey[0]) == parseInt(QualId)) {
                var assignedTotalCmplt = 0;

                _.each(repoData[parseInt(QualId)], function(itrRepoData) {
                    if(itrRepoData.rep_value < 1) {
                        itrRepoData.rep_value = 1;
                    }
                    var tempNumber = Math.round(($scope.completesNeeded * itrRepoData.rep_value) / 100);
                    if(tempNumber <= 0) {
                        tempNumber += 1;
                    }
                    assignedTotalCmplt += tempNumber;

                    var minimum = Math.round(tempNumber - (tempNumber * parseInt(0)) / 100);

                    var setTmpObject = {
                        flexible:true,
                        flexiblePer:0,
                        hasValidQuotas:true,
                        maximum:minimum,
                        minimum:minimum,
                        number:tempNumber,
                        percentage:itrRepoData.rep_value,
                        hasCensusRepoQuota: true
                    }
                    if(quotaName == 'age' || quotaName == "income") {
                      setTmpObject.achieved = 0;
                      setTmpObject.flexPer = 0;
                      setTmpObject.max = itrRepoData.max;
                      setTmpObject.min = itrRepoData.min;
                      setTmpObject.per = itrRepoData.rep_value;
                      setTmpObject.qual_id = parseInt(QualId);
                    }

                    if(quotaName == "genderModal" || quotaName == "raceModal" || quotaName == "hispanicModal" || quotaName == "eduModal" || quotaName == "empModal") {
                        setTmpObject.id = itrRepoData.condition_code;
                        setTmpObject.name = itrRepoData.name;
                        setTmpObject.selected = true;
                    }

                    tmpCensusArrQuta.push(setTmpObject);
                })
                /******************Adjust Completes Number*******************/
                var finMaxNumber = _.max(tmpCensusArrQuta, function(rtnNmber){ return rtnNmber.number; });
                var indexOfMaxNumber = _.indexOf(tmpCensusArrQuta, finMaxNumber);

                if(assignedTotalCmplt > $scope.completesNeeded) {
                    tmpCensusArrQuta[indexOfMaxNumber].number = tmpCensusArrQuta[indexOfMaxNumber].number - (assignedTotalCmplt - $scope.completesNeeded);
                        tmpCensusArrQuta[indexOfMaxNumber].maximum = tmpCensusArrQuta[indexOfMaxNumber].number;
                        tmpCensusArrQuta[indexOfMaxNumber].minimum = tmpCensusArrQuta[indexOfMaxNumber].number;
                        tmpCensusArrQuta[indexOfMaxNumber].percentage = Math.round((tmpCensusArrQuta[indexOfMaxNumber].number * 100) / $scope.completesNeeded);
                }
                else {
                     tmpCensusArrQuta[indexOfMaxNumber].number = tmpCensusArrQuta[indexOfMaxNumber].number + ($scope.completesNeeded - assignedTotalCmplt);
                        tmpCensusArrQuta[indexOfMaxNumber].maximum = tmpCensusArrQuta[indexOfMaxNumber].number;
                        tmpCensusArrQuta[indexOfMaxNumber].minimum = tmpCensusArrQuta[indexOfMaxNumber].number;
                        tmpCensusArrQuta[indexOfMaxNumber].percentage = Math.round((tmpCensusArrQuta[indexOfMaxNumber].number * 100) / $scope.completesNeeded);
                }


                var setExtraObj = {
                    "min": '',
                    "max": '',
                    "number": '',
                    "per": '',
                    "flexPer": '',
                    "flexible": $scope.ageQuotaFlag.ageFlx
                }
                if(quotaName == 'age') {
                    $scope.ageTempArr = tmpCensusArrQuta;
                    $scope.ageQuotaFlag.hasAgeFlag = true;
                    $scope.ageQuotaFlag.editAgeFlag = true;
                    $scope.ageQuotaFlag.clearAgeFlag = true;
                    var minAge = _.min($scope.ageTempArr, function(snglIncm){ return snglIncm.min });
                    var maxAge = _.max($scope.ageTempArr, function(snglIncm){ return snglIncm.max });
                    $scope.ageData.min = minAge.min;
                    $scope.ageData.max = maxAge.max;
                    $scope.ageTempArr.unshift(setExtraObj);
                } 
                if(quotaName == "income") {
                    $scope.incomeTempArr = tmpCensusArrQuta;
                    var minmumIncm = _.min($scope.incomeTempArr, function(snglIncm){ return snglIncm.min; });
                    var maximIncm = _.max($scope.incomeTempArr, function(snglIncm){ return snglIncm.max; });
                    $scope.houseHoldIncome.min = minmumIncm.min;
                    $scope.houseHoldIncome.max = maximIncm.max;
                    $scope.incomeQuotaFlag.hasIncomeFlag = true;
                    $scope.incomeQuotaFlag.editIncomeFlag = true;
                    $scope.incomeQuotaFlag.clearIncomeFlag = true;
                    $scope.incomeTempArr.unshift(setExtraObj);
                }
                if(quotaName == "genderModal") {
                    $scope.genderInfo = addCensusRepoFlagQuotas($scope.genderInfo);
                    $scope.sltGender = tmpCensusArrQuta;
                    $scope.genderInfo = updateQuotaModelsProps($scope.sltGender, $scope.genderInfo);
                    $scope.gndrQuotaFlag.hasGndrFlag = true;
                    $scope.gndrQuotaFlag.editGndrFlag = true;
                }
                if(quotaName == "raceModal") {
                    //PD-961
                    if($scope.isGrouped('race')) {
                        $scope.race = resetGroupingQuotaOnCensusApply($scope.newraceModal, tmpCensusArrQuta);
                    }
                    $scope.race = addCensusRepoFlagQuotas($scope.race);
                    $scope.sltRace = tmpCensusArrQuta;
                    $scope.race = updateQuotaModelsProps($scope.sltRace, $scope.race);
                    $scope.raceQuotaFlag.editRaceFlag = true; 
                    $scope.raceQuotaFlag.hasRaceFlag = true;
                    //PD-961
                    $scope.newraceModal = [];
                    raceModelLiveEdit = [];
                    removeGroupingOnResetQuota('race');

                }
                if(quotaName == "empModal") {
                     if($scope.isGrouped('employments')) {
                        $scope.employement = resetGroupingQuotaOnCensusApply($scope.groupingemploymentModal, tmpCensusArrQuta);
                    }
                    $scope.employement = addCensusRepoFlagQuotas($scope.employement);
                    $scope.sltEmployment = tmpCensusArrQuta;
                    console.log("$scope.employement>>>>>>>", JSON.stringify($scope.employement))
                    $scope.employement = updateQuotaModelsProps($scope.sltEmployment, $scope.employement);
                    console.log("$scope.sltEmployment>>>>>>>", JSON.stringify($scope.sltEmployment))
                    $scope.empQuotaFlag.editEmpFlag = true;
                    $scope.empQuotaFlag.hasEmpFlag = true;
                    $scope.groupingemploymentModal = [];
                    employmentModelLiveEdit = [];
                    removeGroupingOnResetQuota('employments');
                }
                if(quotaName == "hispanicModal") {
                    $scope.hispanic = addCensusRepoFlagQuotas($scope.hispanic);
                    $scope.hispanicOrigin = tmpCensusArrQuta;
                    $scope.hispanic = updateQuotaModelsProps($scope.hispanicOrigin, $scope.hispanic);
                    $scope.hisQuotaFlag.editHisOriFlag = true;
                    $scope.hisQuotaFlag.hasHisOriFlag = true;
                }
                if(quotaName == "eduModal") {
                    if($scope.isGrouped('educations')) {
                        $scope.education = resetGroupingQuotaOnCensusApply($scope.groupingeducationModal, tmpCensusArrQuta);
                    }
                    
                    $scope.education = addCensusRepoFlagQuotas($scope.education);
                    $scope.sltEducation = tmpCensusArrQuta;
                    $scope.education = updateQuotaModelsProps($scope.sltEducation, $scope.education);
                    $scope.eduQuotaFlag.editEduFlag = true;
                    $scope.eduQuotaFlag.hasEduFlag = true;
                    //PD-961
                    $scope.groupingeducationModal = [];
                    educationModelLiveEdit = [];
                    removeGroupingOnResetQuota('educations');
                }
            }
        });   
    }

    //Function to set census Repo flag in race, education, gender and hispanic models
    function addCensusRepoFlagQuotas(respectiveQuotas) {
        _.each(respectiveQuotas, function(quota){
            quota.hasCensusRepoQuota = true;
        });
        return respectiveQuotas;
    }

    //Function to re_Structure Quota Models On Census Apply on Condition Grouping PD-961
    function resetGroupingQuotaOnCensusApply(QuotaModel, propsUpdtArray) {
        var getgroupedQuotas = _.where(QuotaModel, {"condditionGroup": true});
        if(getgroupedQuotas.length > 0) {
            _.each(getgroupedQuotas, function(grpQuota) {
                var quota_NameArr = grpQuota.name.split(' or ');
                _.each(quota_NameArr, function(snglName) {
                    var temSwapObj = _.clone(grpQuota);
                    var findCensQta = _.findWhere(propsUpdtArray, {"name": snglName.trim()});

                    if(findCensQta) {
                        temSwapObj.id = findCensQta.id;
                        temSwapObj.number = findCensQta.number;
                        temSwapObj.minimum = findCensQta.minimum;
                        temSwapObj.maximum = findCensQta.maximum;
                        temSwapObj.name = findCensQta.name;
                        temSwapObj.percentage = findCensQta.percentage;
                        temSwapObj.per = findCensQta.percentage;
                        delete temSwapObj.condditionGroup;
                        delete temSwapObj.$$hashKey;
                        QuotaModel.push(temSwapObj);
                    }
                });
                var findIndex = _.indexOf(QuotaModel, grpQuota);
                if(findIndex > -1) {
                    QuotaModel.splice(findIndex, 1);
                }
            });
        }
        return QuotaModel;
    }

    function updateQuotaModelsProps(sourceArr, destArr) {
        _.each(destArr, function(singleDst) {
            var findCensusQta = _.findWhere(sourceArr, {"id" : singleDst.id});
            if(findCensusQta) {
               singleDst.minimum =  findCensusQta.minimum,
               singleDst.maximum =  findCensusQta.maximum,
               singleDst.number =  findCensusQta.number,
               singleDst.per =  findCensusQta.per,
               singleDst.selected =  findCensusQta.selected
            }
        });
        return destArr;
    }

    $scope.showChildrenRow = function(id){
        if($scope.children && _.findWhere($scope.children, {'id':parseInt(id)}).selected){
            return true;
        }else{
            return false;
        }
    }

    //Function to group All Quota PD-961
    $scope.selectedQuotaGrouping = function(modelname, groupingModelData) {
        var newRow = "";
        var tempraceModal = new Array();
        var setGroupingModal = new Array();
        var mapHasQuotaFlg = false;
        var totalNumber = 0;
        var temp_id = [];
        var tempname_arr = [];
        var temp_Qual_id = 0;
        if(modelname == "race") {
            if($scope.censusRepoFlag.hasCensusRepoRace) {
                notify({message:'Quota Grouping is not allowed over Census Repo',classes:'alert-warning',duration:3000} );
                return false;
            }
            if(!$scope.isGrouped('race')) {
              $scope.newraceModal = [];  
              removeGroupingOnResetQuota("race"); 
            }
            setGroupingModal = $scope.newraceModal;
        }
        else if(modelname == "relationships") {
            if(!$scope.isGrouped('relationships')) {
              $scope.newrelationModal = []; 
               removeGroupingOnResetQuota("relationships"); 
            }
            setGroupingModal = $scope.newrelationModal;
        } 
        else if(modelname == "employments") {
            if($scope.censusRepoFlag.hasCensusRepoEmploy) {
                notify({message:'Quota Grouping is not allowed over Census Repo',classes:'alert-warning',duration:3000} );
                return false;
            }
            if(!$scope.isGrouped('employments')) {
              $scope.groupingemploymentModal = []; 
              
               removeGroupingOnResetQuota("employments"); 
            }
            setGroupingModal = $scope.groupingemploymentModal;
        }
        else if(modelname == "educations") {
                if($scope.censusRepoFlag.hasCensusRepoEdu) {
                    notify({message:'Quota Grouping is not allowed over Census',classes:'alert-warning',duration:3000} );
                    return false;
                }
                if(!$scope.isGrouped('educations')) {
                  $scope.groupingeducationModal = [];
                  removeGroupingOnResetQuota("educations");  
                }
                setGroupingModal = $scope.groupingeducationModal;
        }
        else if(modelname == "raceBera") {
            if(!$scope.isGrouped('raceBera')) {
              $scope.groupingRaceBeraModel = [];
              removeGroupingOnResetQuota("raceBera");      
            }
            setGroupingModal = $scope.groupingRaceBeraModel;
        }
        else if(modelname == "device") {
            if(!$scope.isGrouped('device')) {
              $scope.groupingDeviceModel = [];
              removeGroupingOnResetQuota("device");  
            }
            setGroupingModal = $scope.groupingDeviceModel;
        }
        else if(modelname == "regions") {
            if(!$scope.isGrouped('regions')) {
              $scope.groupingCensusRgnModel = [];
              removeGroupingOnResetQuota("regions");   
            }
            setGroupingModal = $scope.groupingCensusRgnModel;
        }
        else if(modelname == "divisions") {
            if(!$scope.isGrouped('divisions')) {
              $scope.groupingDivisionModel = [];
              removeGroupingOnResetQuota("divisions"); 
            }
            setGroupingModal = $scope.groupingDivisionModel;
        }
        else if(modelname == "states") {
            if(!$scope.isGrouped('states')) {
              $scope.groupingStateModel = [];
             removeGroupingOnResetQuota("states");  
            }
            setGroupingModal = $scope.groupingStateModel;
        }
        else if(modelname == "csa") {
           if(!$scope.isGrouped('csa')) {
              $scope.groupingCsaModel = [];
              removeGroupingOnResetQuota("csa");   
            }
            setGroupingModal = $scope.groupingCsaModel; 
        }
        else if(modelname == "dma") {
            if(!$scope.isGrouped('dma')) {
              $scope.groupingDmaModel = [];
               removeGroupingOnResetQuota("dma");    
            }
            setGroupingModal = $scope.groupingDmaModel;
        }
        else if(modelname == "msa") {
            if(!$scope.isGrouped('msa')) {
              $scope.groupingMsaModel = [];
              removeGroupingOnResetQuota("msa"); 
            }
            setGroupingModal = $scope.groupingMsaModel;
        }
        else {
            if(modelname == "county") {
                if(!$scope.isGrouped('county')) {
                  $scope.groupingCountyModel = [];
                  removeGroupingOnResetQuota("county");
                }
                setGroupingModal = $scope.groupingCountyModel;
            }
        }
        // Single grouping not allowed
        if(setGroupingModal.length > 0) {
            var matchCount =  _.countBy(setGroupingModal, function(countQuota) {
              return countQuota.condditionGroup == true ? 'groupQuotaCount': 'singleQuota';
            });
            if(matchCount.singleQuota == 1) {
                notify({message:'Grouping for single Quota not allowed',classes:'alert-warning',duration:3000} );
                return false;
            }

            var matchCountOther =  _.countBy(setGroupingModal, function(countQuota) {
              return (countQuota.setGrupActive == true && countQuota.condditionGroup != true) ? 'groupQuotaCount': 'singleQuota';
            });
            if(matchCountOther.groupQuotaCount == 1) {
                notify({message:'Grouping for single Quota not allowed',classes:'alert-warning',duration:3000} );
                return false;
            }
        }
        else {
           var matchCountOther =  _.countBy(groupingModelData, function(countQuota) {
              return (countQuota.setGrupActive == true && countQuota.condditionGroup != true) ? 'groupQuotaCount': 'singleQuota';
            });
            if(matchCountOther.groupQuotaCount == 1) {
                notify({message:'Grouping for single Quota not allowed',classes:'alert-warning',duration:3000} );
                return false;
            }
        }
        

        if(setGroupingModal.length <= 0) {
            _.each(groupingModelData, function(raceProps, index) {
                if(raceProps.setGrupActive) {
                    if(raceProps.condditionGroup != true) {
                        newRow = newRow + raceProps.name + " " +"or" + " ";
                        raceProps.id = raceProps.id;
                        temp_id.push(raceProps.id);
                        tempname_arr.push(raceProps.name);
                    } 
                    else {
                        setGroupingModal.push(raceProps);
                    } 
                    if(raceProps.number) {
                        totalNumber += raceProps.number
                    }
                    temp_Qual_id = raceProps.qual_id;
                }
                else {
                    setGroupingModal.push(raceProps);
                }
            });
            if(newRow != "" && newRow.length > 0) {
                var obj = {
                    maximum:"",
                    minimum:"",
                    name:newRow.substring(0, newRow.length - 3),
                    number:"",
                    per:"",
                    qual_name:modelname,
                    selected:true,
                    condditionGroup: true,
                    flexiblePer:0,
                    name_arr: tempname_arr,
                    id:temp_id,
                    qual_id: temp_Qual_id
                }
                setGroupingModal.push(obj);
            }
            _.each(setGroupingModal, function(addFlex) {
                addFlex.flexiblePer = 0;
            })
            if(modelname == "race") {
                manageCondtitionGroupingArray("race", setGroupingModal);
                $scope.newraceModal = setGroupingModal;
                $scope.quotaTotalRemRace += parseInt(totalNumber);
            }
            else if(modelname == "relationships") {
                    manageCondtitionGroupingArray("relationships", setGroupingModal);
                    $scope.newrelationModal = setGroupingModal;
                    $scope.quotaTotalRemRace += parseInt(totalNumber);
            }
            else if(modelname == "employments") {
                    manageCondtitionGroupingArray("employments", setGroupingModal);
                    $scope.groupingemploymentModal = setGroupingModal;
                    $scope.quotaTotalRemRace += parseInt(totalNumber);
            }
            else if(modelname == "educations") {
                manageCondtitionGroupingArray("educations", setGroupingModal);
                $scope.groupingeducationModal = setGroupingModal;
                $scope.quotaTotalRemRace += parseInt(totalNumber);
            }
            else if(modelname == "raceBera") {
                manageCondtitionGroupingArray("raceBera", setGroupingModal);
                $scope.groupingRaceBeraModel = setGroupingModal;
                $scope.quotaTotalRemRace += parseInt(totalNumber);
            }
            else if(modelname == "device") {
                manageCondtitionGroupingArray("device", setGroupingModal);
                $scope.groupingDeviceModel = setGroupingModal;
                $scope.quotaTotalRemRace += parseInt(totalNumber); 
            }
            else if(modelname == "regions") {
                manageCondtitionGroupingArray("regions", setGroupingModal);
                $scope.groupingCensusRgnModel = setGroupingModal;
                $scope.quotaTotalRemRace += parseInt(totalNumber); 
            }
            else if(modelname == "divisions") {
                manageCondtitionGroupingArray("divisions", setGroupingModal);
                $scope.groupingDivisionModel = setGroupingModal;
                $scope.quotaTotalRemRace += parseInt(totalNumber); 
            } 
            else if(modelname == "states") {
                manageCondtitionGroupingArray("states", setGroupingModal);
                $scope.groupingStateModel = setGroupingModal;
                $scope.quotaTotalRemRace += parseInt(totalNumber); 
            }
            else if(modelname == "csa") {
               manageCondtitionGroupingArray("csa", setGroupingModal);
                $scope.groupingCsaModel = setGroupingModal;
                $scope.quotaTotalRemRace += parseInt(totalNumber);  
            }
            else if(modelname == "dma") {
                manageCondtitionGroupingArray("dma", setGroupingModal);
                $scope.groupingDmaModel = setGroupingModal;
                $scope.quotaTotalRemRace += parseInt(totalNumber);  
            }
            else if(modelname == "msa") {
                manageCondtitionGroupingArray("msa", setGroupingModal);
                $scope.groupingMsaModel = setGroupingModal;
                $scope.quotaTotalRemRace += parseInt(totalNumber);  
            }
            else {
                if(modelname == "county") {
                    manageCondtitionGroupingArray("county", setGroupingModal);
                    $scope.groupingCountyModel = setGroupingModal;
                    $scope.quotaTotalRemRace += parseInt(totalNumber);  
                }
            }
        }
        else {
            _.each(setGroupingModal, function(raceProps, index) {
                if(raceProps.setGrupActive) {
                    if(raceProps.condditionGroup != true) {
                        newRow = newRow + raceProps.name + " " +"or" + " ";
                        raceProps.id = raceProps.id;
                        temp_id.push(raceProps.id);
                        tempname_arr.push(raceProps.name);
                    }
                     else {
                        tempraceModal.push(raceProps);
                    } 
                    if(raceProps.number) {
                        totalNumber += raceProps.number
                    }
                    temp_Qual_id = raceProps.qual_id;

                }
                else {
                    tempraceModal.push(raceProps);
                }
            });
            if(newRow != "" && newRow.length > 0) {
                var obj = {
                    maximum:"",
                    minimum:"",
                    name:newRow.substring(0, newRow.length - 3),
                    number:"",
                    per:"",
                    qual_name:modelname,
                    selected:true,
                    condditionGroup: true,
                    flexiblePer:0,
                    name_arr: tempname_arr,
                    id:temp_id,
                    qual_id: temp_Qual_id
                }
                tempraceModal.push(obj);
            }
            setGroupingModal = tempraceModal;
            _.each(setGroupingModal, function(addFlex) {
                addFlex.flexiblePer = 0;
            })
            
            if(modelname == "race") {
                manageCondtitionGroupingArray("race", setGroupingModal);
                $scope.newraceModal = setGroupingModal;
                $scope.quotaTotalRemRace += parseInt(totalNumber);
            }
            else if(modelname == "relationships") {
                    manageCondtitionGroupingArray("relationships", setGroupingModal);
                    $scope.newrelationModal = setGroupingModal;
                    $scope.quotaTotalRemRace += parseInt(totalNumber);
            }
            else if(modelname == "employments") {
                    manageCondtitionGroupingArray("employments", setGroupingModal);
                    $scope.groupingemploymentModal = setGroupingModal;
                    $scope.quotaTotalRemRace += parseInt(totalNumber);
            }
            else if(modelname == "educations") {
                manageCondtitionGroupingArray("educations", setGroupingModal);
                $scope.groupingeducationModal = setGroupingModal;
                $scope.quotaTotalRemRace += parseInt(totalNumber);
            }
            else if(modelname == "raceBera") {
                manageCondtitionGroupingArray("raceBera", setGroupingModal);
                $scope.groupingRaceBeraModel = setGroupingModal;
                $scope.quotaTotalRemRace += parseInt(totalNumber);
            }
            else if(modelname == "device") {
                manageCondtitionGroupingArray("device", setGroupingModal);
                $scope.groupingDeviceModel = setGroupingModal;
                $scope.quotaTotalRemRace += parseInt(totalNumber);
            }
            else if(modelname == "regions") {
                manageCondtitionGroupingArray("regions", setGroupingModal);
                $scope.groupingCensusRgnModel = setGroupingModal;
                $scope.quotaTotalRemRace += parseInt(totalNumber); 
            }
            else if(modelname == "divisions") {
                manageCondtitionGroupingArray("divisions", setGroupingModal);
                $scope.groupingDivisionModel = setGroupingModal;
                $scope.quotaTotalRemRace += parseInt(totalNumber); 
            } 
            else if(modelname == "states") {
                manageCondtitionGroupingArray("states", setGroupingModal);
                $scope.groupingStateModel = setGroupingModal;
                $scope.quotaTotalRemRace += parseInt(totalNumber); 
            }
            else if(modelname == "csa") {
               manageCondtitionGroupingArray("csa", setGroupingModal);
                $scope.groupingCsaModel = setGroupingModal;
                $scope.quotaTotalRemRace += parseInt(totalNumber);  
            }
            else if(modelname == "dma") {
                manageCondtitionGroupingArray("dma", setGroupingModal);
                $scope.groupingDmaModel = setGroupingModal;
                $scope.quotaTotalRemRace += parseInt(totalNumber);  
            }
            else if(modelname == "msa") {
                manageCondtitionGroupingArray("msa", setGroupingModal);
                $scope.groupingMsaModel = setGroupingModal;
                $scope.quotaTotalRemRace += parseInt(totalNumber);  
            }
            else {
                if(modelname == "county") {
                    manageCondtitionGroupingArray("county", setGroupingModal);
                    $scope.groupingCountyModel = setGroupingModal;
                    $scope.quotaTotalRemRace += parseInt(totalNumber);  
                }
            }
        }
        
    }


    /************Comprasion between two array of objects***********/
    var difference = function(array){
       var rest = Array.prototype.concat.apply(Array.prototype, Array.prototype.slice.call(arguments, 1));

       var containsEquals = function(obj, target) {
        if (obj == null) return false;
        return _.any(obj, function(value) {
          return _.isEqual(value, target);
        });
      };

      return _.filter(array, function(value){ return ! containsEquals(rest, value); });
    };

    //function to handle condition grouping Array data
    function manageCondtitionGroupingArray(quotaName, setGroupingModal) {
        if(_.keys($scope.conditionGroupingArray).length > 0) {
            if(_.has($scope.conditionGroupingArray, quotaName)) {
               $scope.conditionGroupingArray[quotaName] = setGroupingModal;
            }
            else  {
               $scope.conditionGroupingArray[quotaName] = setGroupingModal; 
            }
        }
        else {
            $scope.conditionGroupingArray[quotaName] = setGroupingModal;
        }
    }

    function removeGroupedIndex(modelDataArr, quotaId) {
        var findGroup = _.findWhere(modelDataArr, {"id": quotaId});
        if(findGroup) {
            var findIndex = _.indexOf(modelDataArr, findGroup);
            if(findIndex > -1) {
               modelDataArr.splice(findIndex, 1); 
            }
        }
        return modelDataArr;
    }

    function removeGroupedIndexByName(modelDataArr, quotaId) {
        var findGroup = _.findWhere(modelDataArr, {"name": quotaId});
        if(findGroup) {
            var findIndex = _.indexOf(modelDataArr, findGroup);
            if(findIndex > -1) {
               modelDataArr.splice(findIndex, 1); 
            }
        }
        return modelDataArr;
    }

    function reStructureSltData(newQuotaData, quotaData, destArr) {
        if(quotaData.id.length > 0) {
            _.each(quotaData.id, function(snglID) {
                destArr = removeGroupedIndex(destArr, snglID);
            })
            if(quotaData instanceof Object && _.has(quotaData, "name_arr")) {
                destArr = removeGroupedIndexByName(destArr, quotaData.name);
            }
            else {
                destArr = removeGroupedIndex(destArr, quotaData.id);
            }
            _.each(quotaData.id, function(snglID) {
                var matchNameQuta = _.findWhere(newQuotaData, {"id": snglID});
                if(matchNameQuta) {
                    matchNameQuta.maximum = '';
                    matchNameQuta.minimum = '';
                    matchNameQuta.number = '';
                    matchNameQuta.per = '';
                    matchNameQuta.percent = '';
                    matchNameQuta.percentage = 0;
                    matchNameQuta.selected = true;
                    destArr.push(matchNameQuta);
                }
            });
            
            return destArr;
        }
        else {
            
            return destArr
        }
    }

    //Funtion for ungrouped the condition grouping PD-961
    $scope.ungroupedConditionGrouping = function(QuotaName, quotaData) {
        var quotaHandlerArray = new Array();
        var quotaModifierArray = new Array();
        var modifiedQuotaArr = new Array();
        var twoArryOfObj_isEqual = false;
        var totalNumber = 0;
        if(QuotaName == "race") {
            if($stateParams.edit == 'editStep1'){
                quotaHandlerArray = raceModelLiveEdit;
                $scope.newraceModal = removeGroupedIndex($scope.newraceModal, quotaData.id);
                $scope.race = removeGroupedIndex($scope.race, quotaData.id);
            }
            else {
                quotaHandlerArray = $scope.race;
            }
            quotaModifierArray = $scope.newraceModal;
        }
        else if(QuotaName == "relationships") {
            if($stateParams.edit == 'editStep1') {
                quotaHandlerArray = relationModelLiveEdit;
                $scope.newrelationModal = removeGroupedIndexByName($scope.newrelationModal, quotaData.name);
                $scope.relation = removeGroupedIndexByName($scope.relation, quotaData.name);
            }
            else {
                quotaHandlerArray = $scope.relation;
            }
            quotaModifierArray = $scope.newrelationModal;
        }
        else if(QuotaName == "employments") {
            if($stateParams.edit == 'editStep1') {
                quotaHandlerArray = employmentModelLiveEdit;
                $scope.groupingemploymentModal = removeGroupedIndexByName($scope.groupingemploymentModal, quotaData.name);
                $scope.employement = removeGroupedIndexByName($scope.employement, quotaData.name);
            }
            else {
                quotaHandlerArray = $scope.employement;
            }
            quotaModifierArray = $scope.groupingemploymentModal;
        }
        else if(QuotaName == "educations") {
            if($stateParams.edit == 'editStep1') {
                quotaHandlerArray = educationModelLiveEdit;
                $scope.groupingeducationModal = removeGroupedIndexByName($scope.groupingeducationModal, quotaData.name);
                $scope.education = removeGroupedIndexByName($scope.education, quotaData.name);

            }
            else {
                quotaHandlerArray = $scope.education;
            }
           quotaModifierArray = $scope.groupingeducationModal; 
        }
        else if(QuotaName == "raceBera") {
            if($stateParams.edit == 'editStep1') {
                quotaHandlerArray = raceBeraModelLiveEdit;
                $scope.groupingRaceBeraModel = removeGroupedIndexByName($scope.groupingRaceBeraModel, quotaData.name);
                $scope.raceBera = removeGroupedIndexByName($scope.raceBera, quotaData.name);

            }
            else {
                quotaHandlerArray = $scope.raceBera;
            }
           quotaModifierArray = $scope.groupingRaceBeraModel;
        }
        else if(QuotaName == "device") {
            if($stateParams.edit == 'editStep1') {
                quotaHandlerArray = deviceModelLiveEdit;
                $scope.groupingDeviceModel = removeGroupedIndexByName($scope.groupingDeviceModel, quotaData.name);
                $scope.deviceInfo = removeGroupedIndexByName($scope.deviceInfo, quotaData.name);

            }
            else {
                quotaHandlerArray = $scope.deviceInfo;
            }
           quotaModifierArray = $scope.groupingDeviceModel; 
        }  
        else if(QuotaName == "regions") {
            if($stateParams.edit == 'editStep1') {
                quotaHandlerArray = censusRgnModelLiveEdit;
                $scope.groupingCensusRgnModel = removeGroupedIndexByName($scope.groupingCensusRgnModel, quotaData.name);
                $scope.region = removeGroupedIndexByName($scope.region, quotaData.name);

            }
            else {
                quotaHandlerArray = $scope.region;
            }
           quotaModifierArray = $scope.groupingCensusRgnModel; 
        }
        else if(QuotaName == "divisions") {
            if($stateParams.edit == 'editStep1') {
                quotaHandlerArray = divisionModelLiveEdit;
                $scope.groupingDivisionModel = removeGroupedIndexByName($scope.groupingDivisionModel, quotaData.name);
                $scope.division = removeGroupedIndexByName($scope.division, quotaData.name);

            }
            else {
                quotaHandlerArray = $scope.division;
            }
           quotaModifierArray = $scope.groupingDivisionModel; 
        }
        else if(QuotaName == "states") {
            if($stateParams.edit == 'editStep1') {
                $scope.groupingStateModel = removeGroupedIndexByName($scope.groupingStateModel, quotaData.name);
                $scope.selectedStates = removeGroupedIndexByName($scope.selectedStates, quotaData.name);

            }
            quotaHandlerArray = $scope.selectedStates;
           quotaModifierArray = $scope.groupingStateModel;
        }
        else if(QuotaName == "csa") {
           if($stateParams.edit == 'editStep1') {
                $scope.groupingCsaModel = removeGroupedIndexByName($scope.groupingCsaModel, quotaData.name);
                $scope.selectedCSAs = removeGroupedIndexByName($scope.selectedCSAs, quotaData.name);

            }
            quotaHandlerArray = $scope.selectedCSAs;
           quotaModifierArray = $scope.groupingCsaModel; 
        }
        else if(QuotaName == "dma") {
           if($stateParams.edit == 'editStep1') {
                $scope.groupingDmaModel = removeGroupedIndexByName($scope.groupingDmaModel, quotaData.name);
                $scope.selectedDMAs = removeGroupedIndexByName($scope.selectedDMAs, quotaData.name);

            }
            quotaHandlerArray = $scope.selectedDMAs;
           quotaModifierArray = $scope.groupingDmaModel;  
        }
        else if(QuotaName == "msa") {
            if($stateParams.edit == 'editStep1') {
                $scope.groupingMsaModel = removeGroupedIndexByName($scope.groupingMsaModel, quotaData.name);
                $scope.selectedMSAs = removeGroupedIndexByName($scope.selectedMSAs, quotaData.name);

            }
            quotaHandlerArray = $scope.selectedMSAs;
           quotaModifierArray = $scope.groupingMsaModel;  
        }
        else {
            if(QuotaName == "county") {
               if($stateParams.edit == 'editStep1') {
                    $scope.groupingCountyModel = removeGroupedIndexByName($scope.groupingCountyModel, quotaData.name);
                    $scope.selectedCountys = removeGroupedIndexByName($scope.selectedCountys, quotaData.name);

                }
                quotaHandlerArray = $scope.selectedCountys;
               quotaModifierArray = $scope.groupingCountyModel;   
            }
        }

        if(quotaData.id.length > 0) {
            _.each(quotaData.id, function(snglId) {
               var matchedObj = _.findWhere(quotaHandlerArray, {"id": snglId});
                if(matchedObj){
                    if(matchedObj.setGrupActive) {
                       matchedObj.setGrupActive = false;
                       matchedObj.maximum = "";
                       matchedObj.minimum = "";
                       matchedObj.number = "";
                       matchedObj.per = "";
                       matchedObj.percentage = "";
                    }
                    quotaModifierArray.push(matchedObj);
                }
            })

            var modifiedQuotaArr = _.without(quotaModifierArray, _.findWhere(quotaModifierArray, quotaData));
            var comparedTwoObjResult = difference(quotaHandlerArray, modifiedQuotaArr);
            if(comparedTwoObjResult.length == 0) {
                twoArryOfObj_isEqual = true;
            }
        }
        _.each(modifiedQuotaArr, function(totalCalc){
            if(totalCalc.number != undefined && totalCalc.number != null
                 && totalCalc.number != "") {
                totalNumber = totalNumber + parseInt(totalCalc.number);
            }
        });

        if(QuotaName == "race") {
            $scope.sltRace = reStructureSltData($scope.race, quotaData, $scope.sltRace);
            $scope.newraceModal = modifiedQuotaArr;
            $scope.quotaTotalRemRace = $scope.completesNeeded - parseInt(totalNumber);
            if(twoArryOfObj_isEqual) {
                $scope.raceQuotaFlag.hasRaceFlag = false;
                $scope.raceQuotaFlag.hasRaceFlag = false;
                if($stateParams.edit == 'editStep1' && raceModelLiveEdit.length > 0) {
                    $scope.race = raceModelLiveEdit;
                }
                
            }
            removeUngroupedQuotaFromConditionArray(quotaData.id, QuotaName);                
        }
        else if(QuotaName == "relationships") {
            $scope.sltRelation = reStructureSltData($scope.relation, quotaData, $scope.sltRelation);
            $scope.quotaTotalRemRace = $scope.completesNeeded - parseInt(totalNumber);
            $scope.newrelationModal = modifiedQuotaArr;
            if(twoArryOfObj_isEqual) {
                $scope.rlnQuotaFlag.hasRlnFlag = false;
                $scope.rlnQuotaFlag.editRlnFlag = false;
                if($stateParams.edit == 'editStep1' && relationModelLiveEdit.length > 0) {
                    $scope.relation = relationModelLiveEdit
                }
               
            }
            removeUngroupedQuotaFromConditionArray(quotaData.id, QuotaName);
        }
        else if(QuotaName == "employments") {
            $scope.sltEmployment = reStructureSltData($scope.employement, quotaData, $scope.sltEmployment);
            $scope.quotaTotalRemRace = $scope.completesNeeded - parseInt(totalNumber);
            $scope.groupingemploymentModal = modifiedQuotaArr;
            if(twoArryOfObj_isEqual) {
                $scope.empQuotaFlag.hasEmpFlag = false;
                $scope.empQuotaFlag.editEmpFlag = false;
                if($stateParams.edit == 'editStep1' && employmentModelLiveEdit.length > 0) {
                    $scope.employement = employmentModelLiveEdit;
                }
                
            }
            removeUngroupedQuotaFromConditionArray(quotaData.id, QuotaName);
        }
        else if(QuotaName == "educations") {
            $scope.sltEducation = reStructureSltData($scope.education, quotaData, $scope.sltEducation);
            $scope.quotaTotalRemRace = $scope.completesNeeded - parseInt(totalNumber);
           $scope.groupingeducationModal = modifiedQuotaArr; 
           if(twoArryOfObj_isEqual) {
            $scope.eduQuotaFlag.hasEduFlag = false;
            $scope.eduQuotaFlag.editEduFlag = false;
              if($stateParams.edit == 'editStep1' && educationModelLiveEdit.length > 0) {
                $scope.education = educationModelLiveEdit;
              }                 
              
           }
           removeUngroupedQuotaFromConditionArray(quotaData.id, QuotaName);
        }
        else if(QuotaName == "raceBera") {
            $scope.sltRaceBera = reStructureSltData($scope.raceBera, quotaData, $scope.sltRaceBera);
            $scope.quotaTotalRemRace = $scope.completesNeeded - parseInt(totalNumber);
           $scope.groupingRaceBeraModel = modifiedQuotaArr; 
           if(twoArryOfObj_isEqual) {
            $scope.rbQuotaFlag.hasRbFlag = false;
            $scope.rbQuotaFlag.editRbFlag = false;
              if($stateParams.edit == 'editStep1' && raceBeraModelLiveEdit.length >0) {
                $scope.raceBera = raceBeraModelLiveEdit;
              }                 
              
           }
           removeUngroupedQuotaFromConditionArray(quotaData.id, QuotaName);
        }
        else if(QuotaName == "device") {
            $scope.sltDevice = reStructureSltData($scope.deviceInfo, quotaData, $scope.sltDevice);
            $scope.quotaTotalRemRace = $scope.completesNeeded - parseInt(totalNumber);
            $scope.groupingDeviceModel = modifiedQuotaArr;
            if(twoArryOfObj_isEqual) {
                $scope.dvcQuotaFlag.hasDeviceFlag = false;
                $scope.dvcQuotaFlag.editDvcFlag = false;
                if($stateParams.edit == 'editStep1' && deviceModelLiveEdit.length > 0) {
                    $scope.deviceInfo = deviceModelLiveEdit;
                }               
            }
            removeUngroupedQuotaFromConditionArray(quotaData.id, QuotaName);
        }
        else if(QuotaName == "regions") {
            $scope.sltRegion = reStructureSltData($scope.region, quotaData, $scope.sltRegion);
            $scope.quotaTotalRemRace = $scope.completesNeeded - parseInt(totalNumber);
            $scope.groupingCensusRgnModel = modifiedQuotaArr;
            if(twoArryOfObj_isEqual) {
                $scope.regQuotaFlag.hasRegionFlag = false;
                $scope.regQuotaFlag.editRegionFlag = false;
                if($stateParams.edit == 'editStep1' && censusRgnModelLiveEdit.length > 0) {
                    $scope.region = censusRgnModelLiveEdit;
                }
               
            }
            removeUngroupedQuotaFromConditionArray(quotaData.id, QuotaName);
        }
        else if(QuotaName == "divisions") {
            $scope.sltDivision = reStructureSltData($scope.division, quotaData, $scope.sltDivision);
            $scope.quotaTotalRemRace = $scope.completesNeeded - parseInt(totalNumber);
            $scope.groupingDivisionModel = modifiedQuotaArr;
            if(twoArryOfObj_isEqual) {
                $scope.dvsnQuotaFlag.hasDivisionFlag = false;
                $scope.dvsnQuotaFlag.editDivisionFlag = false;
                if($stateParams.edit == 'editStep1' && divisionModelLiveEdit.length > 0) {
                    $scope.division = divisionModelLiveEdit;
                }
            }
            removeUngroupedQuotaFromConditionArray(quotaData.id, QuotaName); 
        }
        else if(QuotaName == "states") {
            $scope.quotaTotalRemRace = $scope.completesNeeded - parseInt(totalNumber);
            $scope.groupingStateModel = modifiedQuotaArr;
            if(twoArryOfObj_isEqual) {
                $scope.editStateFlag = false;
                $scope.hasStateFlag = false;
                if($stateParams.edit == 'editStep1') {
                    $scope.selectedStates = modifiedQuotaArr;
                }
            }
            removeUngroupedQuotaFromConditionArray(quotaData.id, QuotaName); 
        }
        else if(QuotaName == "csa") {
            $scope.quotaTotalRemRace = $scope.completesNeeded - parseInt(totalNumber);
            $scope.groupingCsaModel = modifiedQuotaArr;
            if(twoArryOfObj_isEqual) {
                $scope.editCSAFlag = false;
                $scope.hasCSAFlag = false;
                if($stateParams.edit == 'editStep1') {
                    $scope.selectedCSAs = modifiedQuotaArr;
                }
            }
            removeUngroupedQuotaFromConditionArray(quotaData.id, QuotaName);  
        }
        else if(QuotaName == "dma") {
            $scope.quotaTotalRemRace = $scope.completesNeeded - parseInt(totalNumber);
            $scope.groupingDmaModel = modifiedQuotaArr;
            if(twoArryOfObj_isEqual) {
                $scope.editDMAFlag = false;
                $scope.hasDMAFlag = false;
                if($stateParams.edit == 'editStep1') {
                    $scope.selectedDMAs = modifiedQuotaArr;
                }
            }
            removeUngroupedQuotaFromConditionArray(quotaData.id, QuotaName); 
        }
        else if(QuotaName == "msa") {
            
            $scope.quotaTotalRemRace = $scope.completesNeeded - parseInt(totalNumber);
            $scope.groupingMsaModel = modifiedQuotaArr;
            if(twoArryOfObj_isEqual) {
                 $scope.editMSAFlag = false;
                $scope.hasMSAFlag = false;
                if($stateParams.edit == 'editStep1') {
                    $scope.selectedMSAs = modifiedQuotaArr;
                }
            }
            removeUngroupedQuotaFromConditionArray(quotaData.id, QuotaName); 
        }
        else{
            if(QuotaName == "county") {
                
                $scope.quotaTotalRemRace = $scope.completesNeeded - parseInt(totalNumber);
                $scope.groupingCountyModel = modifiedQuotaArr;
                if(twoArryOfObj_isEqual) {
                    $scope.editCountyFlag = false;
                    $scope.hasCountyFlag = false;
                    if($stateParams.edit == 'editStep1') {
                        $scope.selectedCountys = modifiedQuotaArr;
                    }
                }
                removeUngroupedQuotaFromConditionArray(quotaData.id, QuotaName); 
            }
        }
    }
/*
* Function to remove ungrouped Quota from conditionGrouping Array of each Slt Quota model
*@ QuotaModel {Array Object} Grouping Array
*@ ungroupedData {Array} arry of ungrouped data name
*/
    function removeUngroupedQuotaFromConditionArray(ungroupedData, QuotaName) {
        if(_.has($scope.conditionGroupingArray, QuotaName)) {
              var matchedNameData = _.findWhere($scope.conditionGroupingArray[QuotaName], {"id": ungroupedData});
              if(matchedNameData != undefined) {
                 $scope.conditionGroupingArray[QuotaName] = _.without($scope.conditionGroupingArray[QuotaName], matchedNameData);
              }  
        }
    }

  /*PD-961
  * Function to set grouping for save Data into DB
  */ 
  function setConditionGroupedPropes(conditionMatch, qual_id ,qual_name, allProperties, quotakey, QuotaModelData) {

    var groupingList = [];
    if(_.has($scope.conditionGroupingArray, quotakey)) {
       var findGroupData = _.findWhere($scope.conditionGroupingArray[quotakey], {id: conditionMatch.id});
       if(findGroupData) {
          groupingList =  findGroupData;
       }
       else {
        groupingList = conditionMatch;
       }
    }

     var groupCondition = new Array();
    
    _.each(groupingList.id, function(qualIDs) {
        var createCondition = _.findWhere(QuotaModelData, {"id" : qualIDs});
        if(createCondition) {
            groupCondition.push({"id": createCondition.id, "name":createCondition.name});
            var groupeFilter = _.filter($scope.properties.quotas, function(snglQuota){
                 
                var filterList = _.filter(snglQuota.criteria, function(itrCriteria) {
                    if(_.has(itrCriteria, "conditions") &&  itrCriteria.conditions.length > 0) {
                       var rejectList =  _.reject(itrCriteria.conditions, function(itemObj) {
                         return (itemObj.id == qualIDs && qual_id == itrCriteria.qualification_code);
                       });
                       return rejectList.length > 0;
                    }else {
                        if(_.has(itrCriteria, "range_sets") &&  itrCriteria.range_sets.length > 0){
                          return itrCriteria;
                        }
                    }
                });
               return filterList.length > 0;
            })
            $scope.properties.quotas = groupeFilter;   
        }
    })
    _.each(groupCondition, function(item) {
        item.id = item.id.toString();
    })

    var conditionObject = {
        "type": 0,
        "isActive":true,
        "quotaCategory":"grouped",
        "locked": conditionMatch.locked || false,
        "criteria":[
            {
                "qualification_code":qual_id,
                "qualification_name":qual_name,
                "q_type":"normal",
                "layered_percent":0,
                "conditions": groupCondition
            }
        ],
        "quantities":{
            "minimum":conditionMatch.minimum,
            "maximum":conditionMatch.maximum,
            "flexibility":allProperties.flexiblePer,
            "isFlexible":allProperties.flexible,
            "number": conditionMatch.number,
            "percentage": Math.round((conditionMatch.number * 100)/$scope.completesNeeded),
            "hasValidQuotas": true,
            "achieved": conditionMatch.achieved || 0,
            "remaining":conditionMatch.maximum,
            "currently_open":conditionMatch.maximum,
            "sup_currently_open":conditionMatch.maximum,
            "current_target": conditionMatch.maximum
        },
        "counter": {
            "Buyer_side_In_Progress" : conditionMatch.buyer_in_progress || 0
        }
    }
    return conditionObject;
  }

  /*Function to deselect the Group Quals on cancel
  *@param QuotaDatas{Object} , quota array
  *@param quota_name {String} Name of the Quota Like Race, etc.
  */
  $scope.removeSelectedQualOnCancel = function(QuotaDatas, quota_name) {
     var tempQuotaData = [];
     if(quota_name == "race") {
        tempQuotaData = $scope.newraceModal;
     }
     if(quota_name == "relation") {
        tempQuotaData = $scope.newrelationModal;
     }
     if(quota_name == "education") {
        tempQuotaData = $scope.groupingeducationModal;
     }
     if(quota_name == "employment") {
        tempQuotaData = $scope.groupingemploymentModal;
     }
     if(quota_name == "raceBera") {
        tempQuotaData = $scope.groupingRaceBeraModel;
     }
     if(quota_name == "device") {
        tempQuotaData = $scope.groupingDeviceModel;
     }
     if(quota_name == "regions") {
        tempQuotaData = $scope.groupingCensusRgnModel;
     }
     if(quota_name == "divisions") {
        tempQuotaData = $scope.groupingDivisionModel;
     }
     if(quota_name == "states") {
        tempQuotaData = $scope.groupingStateModel;
     }
     if(quota_name == "csa") {
        tempQuotaData = $scope.groupingCsaModel;     
     }
     if(quota_name == "dma") {
        tempQuotaData = $scope.groupingDmaModel;        
     }
     if(quota_name == "msa") {
        tempQuotaData = $scope.groupingMsaModel;
     }
     if(quota_name == "county") {
        tempQuotaData = $scope.groupingCountyModel;
     }

     if(tempQuotaData.length > 0) {
        _.each(QuotaDatas, function(quota_sngl) {
            var matchSeletGrp = _.findWhere(tempQuotaData, {"id": quota_sngl.id});
            if(matchSeletGrp && matchSeletGrp.setGrupActive && quota_sngl.setGrupActive) {
                quota_sngl.setGrupActive = false;
                var findIndex = _.indexOf(tempQuotaData, matchSeletGrp);
                if(findIndex > -1) {
                    tempQuotaData[findIndex].setGrupActive = false;
                }
            }
        });
     }
     else {
        _.each(QuotaDatas, function(quota_sngl) {
            if(quota_sngl.setGrupActive) {
                quota_sngl.setGrupActive = false;
            }
        });
     }
  }

  /*Function Remove Quals if Group Created but Quota not assigned*/
  function removeGroupedUnallocatedQuals(matchedForBlankGroupQuota, QuotaSltArr, quotaArrs, groupQualArr) {
    _.each(matchedForBlankGroupQuota, function(snglGrup) {
        if(snglGrup.number == "" || snglGrup.number == 0) {
            if($stateParams.edit == 'editStep1') {
                var findGrupOnEdit = _.findWhere(QuotaSltArr, {"name": snglGrup.name});
                if(findGrupOnEdit) {
                    var findIndex = _.indexOf(QuotaSltArr, findGrupOnEdit);
                    if(findIndex) {
                        QuotaSltArr.splice(findIndex, 1);
                    }
                }
            }
            var nameArray = new Array();
            if(_.has(snglGrup, "name_arr")) {
                nameArray = snglGrup.name_arr;
            }
            else {
                nameArray = snglGrup.name.split(' or ');
            }
            _.each(nameArray, function(q_name) {
                var findGroupQta = _.findWhere(QuotaSltArr, {"name": q_name.trim()});
                if(findGroupQta) {
                    var findIndex = _.indexOf(QuotaSltArr, findGroupQta);
                    if(findIndex > -1) {
                       QuotaSltArr.splice(findIndex, 1); 
                    }
                }
                var matchRaceQual = _.findWhere(quotaArrs, {"name": q_name.trim()});
                if(matchRaceQual) {
                    var findIndex = _.indexOf(quotaArrs, matchRaceQual);
                    if(findIndex > -1) {
                       quotaArrs[findIndex].selected = false; 
                    }
                }
            })
            var matchedGroupQual = _.findWhere(groupQualArr, {"name": snglGrup.name});
            if(matchedGroupQual) {
                var qualIndex = _.indexOf(groupQualArr, matchedGroupQual);
                if (qualIndex > -1) {
                    groupQualArr.splice(qualIndex, 1);
                }
            }
        }
    });
  }

  /*Function to add new propertie for grouping and exclude from Slt Arrays*/
  function excludeGroupingFromSlt(quotaModelArray) {
    _.each(quotaModelArray, function(QuotaVal){
        if(QuotaVal.number == "" || !QuotaVal.number) {
            QuotaVal['condditionGroup'] = true;
            QuotaVal.number = 0;
            QuotaVal.maximum = 0;
            QuotaVal.minimum = 0;
        }
    })
  }
  
   /*Function to check is Quota Grouped or not*/
    $scope.isGrouped = function(keyName){
        if(_.has($scope.conditionGroupingArray, keyName)) {
            var findGrouyp = _.findWhere($scope.conditionGroupingArray[keyName],{"condditionGroup": true});
            if(findGrouyp) {
                return true;
            }
            else {
                return false;
            }
        }
        else {
            return false;
        }
    };
    /*Function to Remove Grouping Quota*/
    function removeGroupingOnResetQuota(quotaname) {
        if(_.has($scope.conditionGroupingArray, quotaname)) {
            delete $scope.conditionGroupingArray[quotaname];
        }
    }

    /*Function to handle MIN/MAX auto update on Flexiability change*/
    $scope.groupingUpdateFleaxibility = function(quota_key, QuotaDataArr, flex_value) {
        if($scope.isGrouped(quota_key)) {
            _.each(QuotaDataArr, function(snglQual) {
                snglQual["flexiblePer"] = parseInt(flex_value);
            })
            _.each($scope.conditionGroupingArray[quota_key], function(groupQual) {
                groupQual["flexiblePer"] = parseInt(flex_value);
            })
            $scope.quotaPercentageChange(QuotaDataArr, flex_value);
            $scope.quotaPercentageChange($scope.conditionGroupingArray[quota_key], flex_value);
        }
    }

    /*PD-132 to check remaning and completes with proper message*/
    function checkQuotaExceedCmplts(quotaModel) {
        var totalAllocationNum = 0;
        _.each(quotaModel, function(snglNum) {
            if(_.has(snglNum, "number") && snglNum.number && !isNaN(snglNum.number)) {
                totalAllocationNum += snglNum.number;
            }
        });

       

        if($scope.completesNeeded - totalAllocationNum < 0) {
            notify({
                message: "Quota Allocations don't add up to Available Completes",
                classes: 'alert-warning',
                duration: 2000
            });
            return false;
        }
    }

    $scope.addAdvanceQuota = function(item, $event){
        _.each(item.selected[item.qualification_id[0]].answer_data, function(singleQuota){
            if(singleQuota.number && singleQuota.minimum && singleQuota.maximum){
                var idenKeyStr = item.qualification_id[0];
                if(singleQuota.id instanceof Array) {
                    _.each(singleQuota.id, function(snglId) {
                        idenKeyStr = idenKeyStr +'_'+snglId;
                    })
                }
                else {
                    idenKeyStr = idenKeyStr +'_'+singleQuota.id;
                }

                var findIndexOfAdv = _.findWhere(advQuota, {iden_key: idenKeyStr})
                var existing_index = _.indexOf(advQuota, findIndexOfAdv);
                var qual_name = $filter('lowercase')(item.question_description);
                qual_name = qual_name.trim();
                qual_name = qual_name.replace(/ /g,'_');
                //Add Qual details in original Array
                singleQuota['qual_id'] = item.qualification_id[0];
                singleQuota['qual_name'] = qual_name;

                if(_.has(singleQuota, "condditionGroup") && singleQuota.condditionGroup) {
                    if(!_.has(singleQuota, "haveAdvGroup")) {
                        
                        var categoryIs = "grouped";
                        var conditionArr = [];
                        var iden_key = item.qualification_id[0];
                           var findByQualId =  _.find($scope.advanceGoupModel, function(matchQual){ 
                                if(_.intersection(matchQual.qualification_id, item.qualification_id).length)
                                {
                                    return matchQual;
                                } 
                            });
                        if(findByQualId) {
                            _.each(singleQuota.id, function(qualId) {
                                var findQuota = _.findWhere(findByQualId.selected[findByQualId.qualification_id[0]].answer_data, {id: qualId});
                                if(findQuota) {
                                    iden_key = iden_key +'_'+qualId;
                                    conditionArr.push({id: findQuota.id, name: findQuota.name});

                                    if($scope.advanceDataPayload.length) {
                                        _.each($scope.advanceDataPayload, function(snglMatchQual) {
                        
                                            if(snglMatchQual.qualification_id[0] == item.qualification_id[0]) {
                                                _.each(snglMatchQual.selected[snglMatchQual.qualification_id[0]].answer_data, function(updateNumQual) {
                                                    if(updateNumQual.id == qualId) {
                                                        updateNumQual["qual_name"] = singleQuota.qual_name;
                                                        updateNumQual["qual_id"] = singleQuota.qual_id;
                                                        updateNumQual["percentage"] = singleQuota.percentage;
                                                        updateNumQual["number"] = singleQuota.number;
                                                        updateNumQual["maximum"] = singleQuota.maximum;
                                                        updateNumQual["minimum"] = singleQuota.maximum;
                                                        updateNumQual["per"] = singleQuota.percentage;
                                                    }
                                                })
                                                snglMatchQual["hasQuota"] = true;
                                            }
                                        })
                                        angular.copy($scope.advanceDataPayload, advanceData);
                                    }
                                    if($scope.advanceGoupModel.length) {
                                        _.each($scope.advanceGoupModel, function(snglMatchQual) {
                        
                                            if(snglMatchQual.qualification_id[0] == item.qualification_id[0]) {
                                                snglMatchQual["hasQuota"] = true;
                                                _.each(snglMatchQual.selected[snglMatchQual.qualification_id[0]].answer_data, function(updateNumQual) {
                                                    if(updateNumQual.id == qualId) {
                                                        updateNumQual["qual_name"] = singleQuota.qual_name;
                                                        updateNumQual["qual_id"] = singleQuota.qual_id;
                                                        updateNumQual["percentage"] = singleQuota.percentage;
                                                        updateNumQual["number"] = singleQuota.number;
                                                        updateNumQual["maximum"] = singleQuota.maximum;
                                                        updateNumQual["minimum"] = singleQuota.maximum;
                                                        updateNumQual["per"] = singleQuota.percentage;
                                                    }
                                                })

                                            }
                                        })
                                    }

                                }
                            });
                        }
                        if(existing_index == -1){
                            advQuota.push({
                                "iden_key":iden_key,
                                "type": 0,
                                "isActive":true,
                                "quotaCategory":categoryIs,
                                "locked": false,
                                "criteria":[
                                    {
                                        "qualification_code":item.qualification_id[0],
                                        "qualification_name":qual_name,
                                        "q_type":"normal",
                                        "layered_percent":parseInt(singleQuota.percentage),
                                        "conditions": conditionArr
                                    }
                                ],
                                "quantities":{
                                    "minimum": singleQuota.minimum,
                                    "maximum": singleQuota.maximum,
                                    "flexibility": item.flxValue,
                                    "isFlexible":item.flx,
                                    "number": singleQuota.number,
                                    "percentage":singleQuota.percentage,
                                    "hasValidQuotas": true,
                                    "achieved": 0,
                                    "remaining": singleQuota.maximum,
                                    "currently_open":singleQuota.maximum,
                                    "sup_currently_open":singleQuota.maximum,
                                    "current_target": singleQuota.maximum
                                }
                            });
                        }else{
                            console.log('updating the existing data');
                            advQuota[existing_index] = {
                                "iden_key":iden_key,
                                "type": 0,
                                "isActive":true,
                                "quotaCategory":categoryIs,
                                "locked": false,
                                "criteria":[
                                    {
                                        "qualification_code":item.qualification_id[0],
                                        "qualification_name":qual_name,
                                        "q_type":"normal",
                                        "layered_percent":parseInt(singleQuota.percentage),
                                        "conditions": conditionArr
                                    }
                                ],
                                "quantities":{
                                    "minimum": singleQuota.minimum,
                                    "maximum": singleQuota.maximum,
                                    "flexibility": item.flxValue,
                                    "isFlexible":item.flx,
                                    "number": singleQuota.number,
                                    "percentage":singleQuota.percentage,
                                    "hasValidQuotas": true,
                                    "achieved": 0,
                                    "remaining": singleQuota.maximum,
                                    "currently_open":singleQuota.maximum,
                                    "sup_currently_open":singleQuota.maximum,
                                    "current_target": singleQuota.maximum
                                }
                            };
                        }
                    }
                }
                else {
                    var conditionArr = [{id: singleQuota.id, name: singleQuota.name}];
                    var iden_key = item.qualification_id[0]+'_'+singleQuota.id;
                    if($scope.advanceDataPayload.length) {
                        _.each($scope.advanceDataPayload, function(snglMatchQual) {
        
                            if(snglMatchQual.qualification_id[0] == item.qualification_id[0]) {
                                _.each(snglMatchQual.selected[snglMatchQual.qualification_id[0]].answer_data, function(updateNumQual) {
                                    var qualId = _.findWhere(item.selected[item.qualification_id[0]].answer_data, {id: updateNumQual.id});
                                    if(qualId) {
                                        updateNumQual["qual_name"] = qualId.qual_name;
                                        updateNumQual["qual_id"] = qualId.qual_id;
                                        updateNumQual["percentage"] = qualId.percentage;
                                        updateNumQual["number"] = qualId.number;
                                        updateNumQual["maximum"] = qualId.maximum;
                                        updateNumQual["minimum"] = qualId.maximum;
                                        updateNumQual["per"] = qualId.percentage;
                                    }
                                })
                                snglMatchQual["hasQuota"] = true;
                            }
                        })
                        angular.copy($scope.advanceDataPayload, advanceData);
                    }
                    if(existing_index == -1){
                        advQuota.push({
                            "iden_key":iden_key,
                            "type": 0,
                            "isActive":true,
                            "quotaCategory":"advance",
                            "locked": false,
                            "criteria":[
                                {
                                    "qualification_code":item.qualification_id[0],
                                    "qualification_name":qual_name,
                                    "q_type":"normal",
                                    "layered_percent":parseInt(singleQuota.percentage),
                                    "conditions": conditionArr
                                }
                            ],
                            "quantities":{
                                "minimum": singleQuota.minimum,
                                "maximum": singleQuota.maximum,
                                "flexibility": item.flxValue,
                                "isFlexible":item.flx,
                                "number": singleQuota.number,
                                "percentage":singleQuota.percentage,
                                "hasValidQuotas": true,
                                "achieved": 0,
                                "remaining": singleQuota.maximum,
                                "currently_open":singleQuota.maximum,
                                "sup_currently_open":singleQuota.maximum,
                                "current_target": singleQuota.maximum
                            }
                        });
                    }else{
                        console.log('updating the existing data');
                        advQuota[existing_index] = {
                            "iden_key":iden_key,
                            "type": 0,
                            "isActive":true,
                            "quotaCategory":categoryIs,
                            "locked": false,
                            "criteria":[
                                {
                                    "qualification_code":item.qualification_id[0],
                                    "qualification_name":qual_name,
                                    "q_type":"normal",
                                    "layered_percent":parseInt(singleQuota.percentage),
                                    "conditions": conditionArr
                                }
                            ],
                            "quantities":{
                                "minimum": singleQuota.minimum,
                                "maximum": singleQuota.maximum,
                                "flexibility": item.flxValue,
                                "isFlexible":item.flx,
                                "number": singleQuota.number,
                                "percentage":singleQuota.percentage,
                                "hasValidQuotas": true,
                                "achieved": 0,
                                "remaining": singleQuota.maximum,
                                "currently_open":singleQuota.maximum,
                                "sup_currently_open":singleQuota.maximum,
                                "current_target": singleQuota.maximum
                            }
                        };
                    }
                    
                    var findIndexQual = _.findIndex($scope.advanceGoupModel, {"respondent_question_id":item.respondent_question_id});
                    if(findIndexQual < 0) {
                        $scope.advanceGoupModel.push(item);
                    }

                    var findIndexQualAdvance = _.findIndex($scope.advanceDataPayload, {"respondent_question_id":item.respondent_question_id});
                    if(findIndexQualAdvance < 0) {
                        $scope.advanceDataPayload.push(item);
                    }
                }
            }else{
                notify({
                    message: "Please enter valid data",
                    classes: 'alert-danger',
                    duration: 2000
                }); 
                return false;
            }
        }); 
        item.hasQuota = true; 
        // Update in advanceData
        var advIndex = _.findIndex(advanceData, {"respondent_question_id":item.respondent_question_id});
        if(advIndex != -1){
            advanceData[advIndex]['hasQuota'] = true;
        }
        // to check wheather it is nested or not
        var key = $filter('lowercase')(item.question_description);
        key = key.trim();
        key = key.replace(/ /g,'_');
        if($scope.isNested(key)){
            $scope.activateNesting(key, item.selected[item.qualification_id[0]].answer_data, $event);
            $scope.applyNesting();
        }
        notify({
            message: item.question_description+" Quota Added",
            classes: 'alert-success',
            duration: 2000
        });
    }

    $scope.delAdvQuota = function(qual_id, item){
        advQuota = advQuota.filter(function(singleQuota){
            var qualification = singleQuota.iden_key.split('_');
            qualification = parseInt(qualification[0]);
            if(qualification == qual_id){
                return false; 
            }else{
                return true;
            }
        });
        var question_id;
        console.log('item.length ',item.length);
        // Index of quota in item
        if(item.length){ // checking the item is an array or a single object
            _.each(item , function(singleData){
                if(qual_id == singleData.qualification_id[0]){
                    _.each(singleData.selected[qual_id].answer_data, function(singleQuota){
                        delete singleQuota.per;
                        delete singleQuota.minimum;
                        delete singleQuota.maximum;
                        delete singleQuota.number;
                        delete singleQuota.percentage;
                    });
                    singleData['hasQuota'] = false;
                    question_id = singleData.respondent_question_id
                }else{
                    console.log('Item not found Advance Target data to delete');
                }
                console.log('singleData final ',JSON.stringify(singleData));
            });
        }else{
           if(qual_id == item.qualification_id[0]){
                _.each(item.selected[qual_id].answer_data, function(singleQuota){
                    delete singleQuota.per;
                    delete singleQuota.minimum;
                    delete singleQuota.maximum;
                    delete singleQuota.number;
                    delete singleQuota.percentage;
                });
                item['hasQuota'] = false;
                question_id = item.respondent_question_id
            }else{
                console.log('Item not found Advance Target data to delete');
            } 
        }
        console.log('question_id ',question_id);
        // Update in advanceData
        var advIndex = _.findIndex(advanceData, {"respondent_question_id":question_id});
        console.log('advIndex ',advIndex);
        if(advIndex != -1){
             advanceData[advIndex]['hasQuota'] = false;
             _.each(advanceData[advIndex].selected[advanceData[advIndex].qualification_id[0]].answer_data, function(delProps) {
                console.log('delProps ',JSON.stringify(delProps));
                delete delProps.per;
                delete delProps.minimum;
                delete delProps.maximum;
                delete delProps.number;
                delete delProps.percentage; 
             })
        };
        /*notify({
            message: "Quota Deleted Successfully",
            classes: 'alert-success',
            duration: 2000
        });*/
    }

    $scope.resetAdvModal = function(item){
        if(!item.hasQuota){
            _.each(item.selected[item.qualification_id[0]].answer_data, function(singleQuota){
                delete singleQuota.per;
                delete singleQuota.minimum;
                delete singleQuota.maximum;
                delete singleQuota.number;
                delete singleQuota.percentage;
            });
        }
    }

    $scope.getAdvRemaning = function(quota , hasQuota){
        if(hasQuota){
            $scope.quotaTotalRemRace = 0;
        }else{
            $scope.quotaTotalRemRace = $scope.completesNeeded;
        }
    }

    $scope.advanceGoupModel =  new Array();
    $scope.advanceDataPayload = new Array();
    $scope.readyAdvGroupPayload = function(item) {
       
        if($scope.advanceDataPayload.length) {
            var existAdvQuotaObj =  _.find($scope.advanceDataPayload, function(matchAdvQual){ 
                if(_.intersection(matchAdvQual.qualification_id, item.qualification_id).length)
                {
                    return matchAdvQual;
                } 
            });
            if(!existAdvQuotaObj){
                var advanceDataObj =  _.find(advanceData, function(existAdvQual){ 
                    if(_.intersection(existAdvQual.qualification_id, item.qualification_id).length)
                    {
                        return existAdvQual;
                    } 
                });
                
                var foundExistAdvData = {};
                if(advanceDataObj){
                    angular.copy(advanceDataObj, foundExistAdvData);
                    $scope.advanceDataPayload.push(foundExistAdvData);
                }
            }

        }
        else {
            var existAdvQuotaObj =  _.find($scope.advanceDataPayload, function(matchAdvQual){ 
            if(_.intersection(matchAdvQual.qualification_id, item.qualification_id).length)
                {
                    return matchAdvQual;
                } 
            });

            if(!existAdvQuotaObj) {
                var advanceDataObj =  _.find(advanceData, function(existAdvQual){ 
                    if(_.intersection(existAdvQual.qualification_id, item.qualification_id).length)
                    {
                        return existAdvQual;
                    } 
                });
                
                var foundExistAdvData = {};
                if(advanceDataObj){
                    angular.copy(advanceDataObj, foundExistAdvData);
                    $scope.advanceDataPayload.push(foundExistAdvData);
                }
            }
        }
        

        var existAdvTargetObj =  _.find($scope.advanceGoupModel, function(matchQual){ 
            if(_.intersection(matchQual.qualification_id, item.qualification_id).length)
            {
                return matchQual;
            } 
        });

        if(!existAdvTargetObj) {
            var cloneAdvQuota = {};
            angular.copy(item, cloneAdvQuota);
            $scope.advanceGoupModel.push(cloneAdvQuota);
        }
        
    }

    $scope.advanceGrouping = function(model, item) {
        var totalRemOnLiveEdit = 0;
        
        var getGroupedArr = _.where(item.selected[item.qualification_id[0]].answer_data, {setGrupActive: true});
        if(getGroupedArr.length > 1) {
            var idArr = _.pluck(getGroupedArr, "id");
            var nameArr = _.pluck(getGroupedArr, "name"); 
            var labelName = "";
            _.each(getGroupedArr, function(delAdvQ) {
                var findId = _.findWhere(item.selected[item.qualification_id[0]].answer_data, {id: delAdvQ.id});
                if(findId) {
                    var matchIdIndex = _.indexOf(item.selected[item.qualification_id[0]].answer_data, findId);
                    if(matchIdIndex > -1) {
                        labelName = labelName + delAdvQ.name + " " +"or" + " ";
                        var initCheckNumber = item.selected[item.qualification_id[0]].answer_data[matchIdIndex];
                            if(_.has(initCheckNumber, "number") && !isNaN(initCheckNumber.number) && !_.isUndefined(initCheckNumber.number) && !_.isNull(initCheckNumber.number) && initCheckNumber.number != "") {
                                totalRemOnLiveEdit += parseInt(initCheckNumber.number);
                            }
                        item.selected[item.qualification_id[0]].answer_data.splice(matchIdIndex, 1);
                    }
                }
            })
            if(advQuota.length > 0) {
                var RemovedQuotas = new Array();
                _.each(advQuota, function(snglAdvQuota) {
                    if(snglAdvQuota.quotaCategory == "advance") {
                        _.each(snglAdvQuota.criteria, function(iterateCriteria) {
                            if(iterateCriteria.qualification_code == item.qualification_id[0]) {
                                var quotaIdsArr = _.pluck(iterateCriteria.conditions, "id");
                                if(quotaIdsArr.length > 0 && _.intersection(idArr, quotaIdsArr).length) {
                                    RemovedQuotas.push(snglAdvQuota);
                                }
                            }
                        })
                    }
                })
                if(RemovedQuotas.length) {
                   advQuota = _.difference(advQuota, RemovedQuotas);
                }
            }
            
            $scope.quotaTotalRemRace = parseInt($scope.quotaTotalRemRace) + parseInt(totalRemOnLiveEdit);
            var tempObject = {
                id : idArr,
                name: labelName.substring(0, labelName.length - 3),
                name_arr:nameArr,
                condditionGroup: true,
                selected: true,
                qualification_id: item.qualification_id[0]
            }
            item.selected[item.qualification_id[0]].answer_data.push(tempObject);
        }
        else if(getGroupedArr.length == 1) {
            notify({message:'Grouping for single Quota not allowed',classes:'alert-warning',duration:3000} );
                return false;
        }
        else {
            notify({message:'First Select Quota Before Grouping',classes:'alert-warning',duration:3000} );
                return false;
        }
    }

    $scope.ungroupedAdvanceQuota = function(data) {
        var remTotalNumberUngroup = 0;
        if(data && _.keys(data).length) {
            _.each(data.id, function(itrIds) {
                var existAdvQuota =  _.find($scope.advanceGoupModel, function(matchQual){ 
                    if(matchQual.qualification_id[0] == data.qualification_id)
                    {
                        return matchQual;
                    } 
                });
    
                if(existAdvQuota) {
                    var getMatchedQuota = _.findWhere(existAdvQuota.selected[existAdvQuota.qualification_id[0]].answer_data, {id: itrIds});
                    
                    if(getMatchedQuota) {
                        //var updateInExistQuota = _.findWhere($scope.tempAdvArray, {respondent_question_id: data.qualification_id});
                        var updateInExistQuota = _.find($scope.tempAdvArray, function(findQual){ 
                            if(findQual.qualification_id[0] == data.qualification_id)
                            {
                                return findQual;
                            } 
                        });
                        
                        if(updateInExistQuota) {
                            var updateIndex = _.indexOf($scope.tempAdvArray, updateInExistQuota);
                            
                            if(updateIndex > -1) {
                                if(getMatchedQuota.number){
                                    getMatchedQuota.number = "";
                                    getMatchedQuota.percentage = "";
                                    getMatchedQuota.per = "";
                                    getMatchedQuota.maximun = "";
                                    getMatchedQuota.minimum = "";
                                }
                                $scope.tempAdvArray[updateIndex].selected[$scope.tempAdvArray[updateIndex].qualification_id[0]].answer_data.push(getMatchedQuota);

                                 var deletedIndex = _.indexOf($scope.tempAdvArray[updateIndex].selected[$scope.tempAdvArray[updateIndex].qualification_id[0]].answer_data, data);
                                 
                                 if(deletedIndex > -1) {
                                    var initCheckNumber = $scope.tempAdvArray[updateIndex].selected[$scope.tempAdvArray[updateIndex].qualification_id[0]].answer_data[deletedIndex];
                                    if(_.has(initCheckNumber, "number") && !isNaN(initCheckNumber.number) && !_.isUndefined(initCheckNumber.number) && !_.isNull(initCheckNumber.number) && initCheckNumber.number != "") {
                                        remTotalNumberUngroup += parseInt(initCheckNumber.number);
                    
                                    } 
                                    $scope.tempAdvArray[updateIndex].selected[$scope.tempAdvArray[updateIndex].qualification_id[0]].answer_data.splice(deletedIndex, 1); 
                                }

                                if(advQuota.length > 0) {
                                    var findRemovedObj = _.findWhere(advQuota, {iden_key: data.iden_key});
                                    if(findRemovedObj) {
                                        var matchedObjIndex = _.indexOf(advQuota, findRemovedObj);
                                        if(matchedObjIndex > -1) {
                                            advQuota.splice(matchedObjIndex, 1);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            })
            $scope.quotaTotalRemRace = parseInt($scope.quotaTotalRemRace) + parseInt(remTotalNumberUngroup);

        }
    }

    $scope.checkAdvancedata  = function(objData) {
        if(objData instanceof Object) {
            return true;
        }
        else {
            return false;
        }
    }
    
}]);

angular.module('pureSpectrumApp')
.controller('dashCtrl',['$scope','$http','$state', '$timeout','localStorageService','user','notify','companyService', 'settingService', 'createSurvey','ngProgressLite', 'DTOptionsBuilder', 'DTColumnDefBuilder', '$rootScope','config','socket','$stateParams','encodeDecodeFactory', 'authenticationService', '$filter', 'postCode', 'reportService', 'buyerSettingService', function($scope, $http, $state, $timeout, localStorageService, user, notify, companyService, settingService, createSurvey, ngProgressLite, DTOptionsBuilder, DTColumnDefBuilder, $rootScope, config,socket,$stateParams, encodeDecodeFactory, authenticationService, $filter, postCode, reportService, buyerSettingService){

    $scope.show=false;
    $rootScope.showCreate = false;
    $rootScope.dsboardLink=[];
    $scope.dsbrdSurvey=[];
    $scope.liveSurveys = [];
    $scope.pausedSurveys = [];
    $scope.closeSurveys = [];
    $scope.draftSurveys = [];
    $scope.showActivities = [];
    $scope.isExist = false;
    $scope.allSurveySearch = "";
    $scope.filterCompanyDetail = false;
    $scope.hideManageSurvey = true;
    $scope.showDraftSurvey = true;
    $scope.showFooterLink = true;
    $scope.hideStatusEdit = false;
    $scope.showActivtityInputBox = false;
    $scope.searchSurvey = {
      query : ""
    };  
    $scope.operatorFlg = false; /*PD-628*/
    $scope.isSupplierFielded = false;
    //$scope.lockUnlockGroupStatus.groupLockUnlockStatus = false; //PD-1100 PD-1154
    $scope.lockUnlockGroupStatus = {
      "groupLockUnlockStatus" : false,
      "fadeoptcitylock": false
    }
    
    //PD-1261
    $scope.quotaViewFlags = {
      "quotaview" : true,
      "supplierview" : false
    }
    $scope.nestedQuotasQualName = [];
    var allCaseSortNestedQuota = [];
    $scope.defaultActiveNestedBtn = "all";
    // Variables used for group updating Current Target Field
    $scope.editCurrentTarget = {
      "value" : new String(0),
      "type": new String()
    }; 

    var base_url = config.pureSpecturm.url;
    $scope.enableAccordianMenu = false;//PD-1227
    $scope.repDownloadButton = false; //flag for enable disable STR download button

    var userData = localStorageService.get('logedInUser');
    /*Check code for cmp undefined case if we login as supplier and open other page using top right corner and then logout */
    if(userData) {
      $scope.userCompany = userData.cmp;
      //PD-1227
      if((config.app == "pureSpectrumApp-Prod" || config.app == "pureSpectrumApp-Staging") && _.contains(config.supplierAccordian, userData.cmp)) {
          $scope.enableAccordianMenu = true;
      }
      if(config.app == "pureSpectrumApp-Dev" || config.app == "pureSpectrumApp-Staging") {
           $scope.enableAccordianMenu = true;
        }
    }
    else {
      $scope.userCompany = "";
    }
    $scope.currency_symbol = '$';
    //page numbers for pagination calls
    $scope.pageNumbers = {
      allTab: 1,
      liveTab: 1,
      pauseTab: 1,
      draftsTab: 1,
      closedTab: 1
    };
    //this is the main var that controll the infinite scroll
    $scope.infinteScroll = {
      disabled: true
    };
    //enable/disable pagination according to tabs
    //is the call return no data than disable variable according to tab
    $scope.disableInfiniteScroll = {
      allTab: true,
      liveTab: true,
      pauseTab: true,
      draftsTab: true,
      closedTab: true
    };
    //show loader for loading data of next page. shows when loading is true
    $scope.tableData = {loading: false};
    //surveys count according to status
    $scope.surveysCount = {
      all: 0,
      live: 0,
      drafts: 0,
      pause: 0,
      closed: 0
    };

    // Get Buyer Setting to check the Decipher is Set
    getBuyerSetting();
    function getBuyerSetting(){
      buyerSettingService.getSetting(userData.cmp).then(function(response){
        if(response && response.data && response.data.apiStatus == 'success' || response.data.buyer && response.data.buyer && response.data.buyer.isDecipher){
          $scope.isDecipher = response.data.buyer.isDecipher?response.data.buyer.isDecipher: false;
        } 
      }, function(err){
        console.log('err ',JSON.stringify(err));
      });
    }

          
    /*Check code for cmp undefined case if we login as supplier and open other page using top right corner and then logout */
    if(userData) {
       getCompanyDetails();
       showDataOnDashboard();
    }
    
    //make live survey tab default open
    $scope.active = { tab : 'live'};

    //when click on a tab and data is loading, make disable until fully load data
    // For Showing loader on manage page
    if($stateParams.key){
      $scope.loader = {show: true};
    }else{
      $scope.loader = {show: false};
    }
    // /*--- Show Loader on every http request----*/
    // $rootScope.$on('loading:progress', function (){
    //     $scope.loader.show = true;//PD-955
    // });

    // $rootScope.$on('loading:finish', function (){
    //     $scope.loader.show = false;//PD-955
    // });
    /*--- Show Loader on every http request----*/
    $scope.tabs = {makeDisable : false};
    //open selected tab
    $scope.setTab = function(newTab){
      $scope.active.tab = newTab;
      //check the disableInfiniteScroll according to tab
      //and make the infinite scroll disable variable true if it is true on this tab
      //we cann't combine immediate 'if' b'cos it will conflict when tabs swiched
      //all tab
      if(newTab == 'all') {
        if($scope.disableInfiniteScroll.allTab) {
          $scope.infinteScroll.disabled = true;
        }else {
          $scope.infinteScroll.disabled = false;
        }
        
        //very first click on tab. If there is no data in array call method to get data
        if($scope.dsbrdSurvey.length == 0) {
          $scope.tabs.makeDisable = true;
          $scope.pageNumbers.allTab = 1;
          getPaginatedSurveysList($scope.pageNumbers.allTab, "all", $scope.searchSurvey.query);
        }
      }
      //live tab
      if(newTab == 'live') {
        if($scope.disableInfiniteScroll.liveTab) {
          $scope.infinteScroll.disabled = true;
        }else {
          $scope.infinteScroll.disabled = false;
        }
        
        if($scope.liveSurveys.length == 0) {
          $scope.tabs.makeDisable = true;
          $scope.pageNumbers.liveTab = 1;
          getPaginatedSurveysList($scope.pageNumbers.liveTab, 22, $scope.searchSurvey.query);
        }
      }
      //pause tab
      if(newTab == 'paused') {
        if($scope.disableInfiniteScroll.pauseTab) {
          $scope.infinteScroll.disabled = true;
        }else {
          $scope.infinteScroll.disabled = false;
        }
        
        if($scope.pausedSurveys.length == 0) {
          $scope.tabs.makeDisable = true;
          $scope.pageNumbers.pauseTab = 1;
          getPaginatedSurveysList($scope.pageNumbers.pauseTab, 33, $scope.searchSurvey.query);
        }
      }
      //drafts tab
      if(newTab == 'drafts') {
        if($scope.disableInfiniteScroll.draftsTab) {
          $scope.infinteScroll.disabled = true;
        }else {
          $scope.infinteScroll.disabled = false;
        }

        if($scope.draftSurveys.length == 0) {
          $scope.tabs.makeDisable = true;
          $scope.pageNumbers.draftsTab = 1;
          getPaginatedSurveysList($scope.pageNumbers.draftsTab, 11, $scope.searchSurvey.query);
        }
      }
      //closed tab
      if(newTab == 'closed') {
        if($scope.disableInfiniteScroll.closedTab) {
          $scope.infinteScroll.disabled = true;
        }else {
          $scope.infinteScroll.disabled = false;
        }
        
        if($scope.closeSurveys.length == 0) {
          $scope.tabs.makeDisable = true;
          $scope.pageNumbers.closedTab = 1;
          getPaginatedSurveysList($scope.pageNumbers.closedTab, 44, $scope.searchSurvey.query);
        }
      }
      
    };
    $scope.isSet = function(tabNum){
      return $scope.active.tab === tabNum;
    };
    

    //get survey count grouped by survey status
    function getSurveysCount() {
      var type = '';
      if($rootScope.supplier != 'none'){
          type = 'supplier';
      }

      if($rootScope.buyer != 'none'){
          type = 'buyer';
      }

      if($rootScope.operator != 'none'){
          type = 'operator';
      }
      createSurvey.getSurveysCount(type, $scope.searchSurvey.query).then(
        function(response) {
          if(response && response.data && response.data.surveyCounts.length > 0) {
            _.each(response.data.surveyCounts, function(surveyCount){
              if(surveyCount._id == 11){
                $scope.surveysCount.drafts = surveyCount.count;
                $scope.surveysCount.all += surveyCount.count;
              }
              if(surveyCount._id == 22){
                $scope.surveysCount.live = surveyCount.count;
                $scope.surveysCount.all += surveyCount.count;
              }
              if(surveyCount._id == 33){
                $scope.surveysCount.pause = surveyCount.count;
                $scope.surveysCount.all += surveyCount.count;
              }
              if(surveyCount._id == 44){
                $scope.surveysCount.closed = surveyCount.count;
                $scope.surveysCount.all += surveyCount.count;
              }
            });
          }

          if(response && response.data && response.data.surveyCounts.length == 0) {
            $scope.surveysCount.all = 0;
            $scope.surveysCount.closed = 0;
            $scope.surveysCount.pause = 0;
            $scope.surveysCount.live = 0;
            $scope.surveysCount.drafts = 0;

          }
        },
        function(error) {
          notify({message:"error getting survey count",classes:'alert-danger',duration:2000} );
        });
    };

    $scope.downloadSurveyReport = function (survey_id) {
        $scope.repDownloadButton = true; //disable button till STR download
        //var user_type = ($rootScope.supplier != 'none') ? 'supplier' : 'buyer';
        var user_type = '';
        if($rootScope.supplier != 'none'){
            user_type = 'supplier';
        }

        if($rootScope.buyer != 'none'){
            user_type = 'buyer';
        }

        if($rootScope.operator != 'none'){
            user_type = 'operator';
        }
        //var url =  base_url+'/surveytrafficreport?user_id=' + $scope.userCompany + '&survey_id='+id + '&type='+type;
        //window.location.assign(url);
        
        var cmp = $scope.userCompany;
        reportService.downloadSTR(cmp, survey_id, user_type).success(function (response) {
            console.log(" downloadSTR response ",JSON.stringify(response));
            var fileName = response.fileName;
            window.location.assign(reportService.downloadFile(fileName));
            $scope.repDownloadButton = false; //enable STR download button
        }).error(function (err) {
            notify({message: err.msg, classes: 'alert-danger', duration: 2000});
            $scope.repDownloadButton = false; //enable STR download button
        });
        
        
    };

    $scope.category = '';

    function checkAccessByRole(cmpInfo){
      if(cmpInfo.isABuyer || cmpInfo.isASupplier || cmpInfo.isAnOperator){
        if(cmpInfo.isAnOperator==true){
          $scope.ManageCmpLink=true;
        }else{
          $scope.ManageCmpLink=false;
        }

        user.checkAccess(userData.buyerAcssLvls, userData.supplierAcssLvls, userData.operatorAcssLvls).success(function(dataEtnl){
          if(dataEtnl.Entitlement){
            _.each(dataEtnl.Entitlement, function(ent){
              if(ent.featureKey == 'CreateSurveys') {
                 if(ent.buyer.admin == true || ent.buyer.full == true) {
                    $rootScope.showCreate = true;
                    $scope.showManageSurvey  = false;
                 }
                 else{
                    $rootScope.showCreate = false;
                 }
              }
              if(ent.featureKey == 'manageCompanies' ){
                if(ent.operator.admin == true || ent.operator.full == true){
                  $rootScope.dsboardLink.push({
                    "featureName":ent.featureName,
                    "featureKey":ent.featureKey,
                    "featureLabel":ent.featureLabel
                  });
                }
                $scope.showManageSurvey  = false;
                $scope.operatorFlg = true; /*PD-628*/
              }
              //manage invoice link
              if(ent.featureKey == 'manageInvoice') {
                if(ent.operator.admin == true || ent.operator.full == true || ent.operator.limited == true) {
                  $rootScope.dsboardLink.push({
                    "featureName" : ent.featureName,
                    "featureKey" : ent.featureKey,
                    "featureLabel" : ent.featureLabel
                  });
                }
              }
              /**  PD-844 Begins*/
              if(_.contains(config.cmp, userData.cmp) && userData.operatorAcssLvls !== 'none'){
                  if (ent.featureKey == 'operatorSettings') {
                      if (ent.operator.admin == true || ent.operator.full == true || ent.operator.limited == true) {
                          $rootScope.dsboardLink.push({
                              "featureName": ent.featureName,
                              "featureKey": ent.featureKey,
                              "featureLabel": ent.featureLabel
                          });
                      }
                  }
              }
              /**  PD-844 Ends*/
              if(ent.featureKey.toLowerCase() == 'manualsurveytrafficfixes' ){
                if (ent.operator.admin == true || ent.operator.full == true){
                  $rootScope.dsboardLink.push({
                    "featureName":ent.featureName,
                    "featureKey":ent.featureKey,
                    "featureLabel":ent.featureLabel
                  });
                  $scope.showManageSurvey  = true;
                  $scope.hideManageSurvey =true;
                  $scope.showAllSurvey =true;
                  $scope.showCreate = false;
                  $scope.operatorFlg = true; /*PD-628*/
                }
              }
                 
              if(ent.featureKey == 'manageSuppliers'){
                 if(ent.buyer.admin == true){
                     $rootScope.dsboardLink.push({
                         "featureName":ent.featureName,
                         "featureKey":ent.featureKey,
                         "featureLabel":ent.featureLabel
                     });
                 }
                 $scope.showManageSurvey  = false;
              }
              if(ent.featureKey == 'manageUsers' ){
                 if (ent.operator.admin == true){
                     $rootScope.dsboardLink.push({
                         "featureName":ent.featureName,
                         "featureKey":ent.featureKey,
                         "featureLabel":ent.featureLabel
                     });
                     $scope.operatorFlg = true; /*PD-628*/
                 }
              }
              if(ent.featureKey == 'ManageSupplierPricingCard' ){
                 if(ent.supplier.admin || ent.supplier.full) {
                     $rootScope.dsboardLink.push({
                         "featureName": ent.featureName,
                         "featureKey": ent.featureKey,
                         "featureLabel":ent.featureLabel
                     });
                 }
              }

              if(ent.featureKey == 'ManageSupplierSettings' ){
                 if(ent.supplier.admin || ent.supplier.full) {
                     $rootScope.dsboardLink.push({
                         "featureName": ent.featureName,
                         "featureKey": ent.featureKey,
                         "featureLabel":ent.featureLabel
                     });
                 }
              }
             
              if(ent.featureKey == 'manageBuyers'){
                 if (ent.supplier.admin || ent.supplier.full){
                     $rootScope.dsboardLink.push({
                         "featureName":ent.featureName,
                         "featureKey":ent.featureKey,
                         "featureLabel":ent.featureLabel
                     });
                 }
              }

              if(ent.featureKey == 'manageBuyerSettings'){
                 if (ent.buyer.admin){
                     $rootScope.dsboardLink.push({
                         "featureName":ent.featureName,
                         "featureKey":ent.featureKey,
                         "featureLabel":ent.featureLabel
                     });
                 }
              }

              if(ent.featureKey == 'manageSurveys' ){
                 if(ent.buyer.limited ) {
                     //getSurveyesDetails();
                     $scope.showManageSurvey  = true;
                     $scope.hideManageSurvey = true;
                 }
              }

              if(ent.featureKey == 'downloadReports' ){
                if(ent.supplier.admin || ent.supplier.full || ent.operator.admin || ent.operator.full || ent.buyer.admin || ent.buyer.full ){
                  $rootScope.dsboardLink.push({
                    "featureName":ent.featureName,
                    "featureKey":ent.featureKey,
                    "featureLabel":ent.featureLabel
                  });
                }
              }

              if(ent.featureKey == 'addAdvQuestion'){
                if(ent.operator.admin || ent.operator.full){
                  $rootScope.dsboardLink.push({
                    "featureName":ent.featureName,
                    "featureKey":ent.featureKey,
                    "featureLabel":ent.featureLabel
                  });
                }
              }

              if(ent.featureKey == 'reconcile'){
                if(ent.operator.admin || ent.operator.full){
                  $rootScope.dsboardLink.push({
                    "featureName":ent.featureName,
                    "featureKey":ent.featureKey,
                    "featureLabel":ent.featureLabel
                  });
                }
              }
              if(ent.featureKey == 'reportsDashboard'){
                if(ent.operator.admin || ent.operator.full){
                  $rootScope.dsboardLink.push({
                    "featureName":ent.featureName,
                    "featureKey":ent.featureKey,
                    "featureLabel":ent.featureLabel
                  });
                }
              }
                 
              if(ent.supplier.admin == true || ent.supplier.full == true || ent.supplier.limited == true || ent.operator.admin == true || ent.operator.full == true || ent.operator.limited == true ) {
                    if(userData.buyerAcssLvls === "admin" || userData.buyerAcssLvls === "full"){
                      $scope.hideStatusEdit = false;
                      $scope.filterCompanyDetail = false;
                    } else {
                      $scope.hideStatusEdit = true;
                      $scope.filterCompanyDetail = true;
                    }
                    $scope.showManageSurvey    = true;
                    $scope.hideManageSurvey    = false;
              }
                 
              // draft survey not showing to supplier type of user
              // and edit link of survey not showing to suppliers
              if(ent.supplier.admin == true || ent.supplier.full == true || ent.supplier.limited == true ) {
                    if(userData.buyerAcssLvls !== "admin" && userData.buyerAcssLvls !== "full" && userData.operatorAcssLvls !== "admin" &&userData.operatorAcssLvls !== "full"){
                      $scope.showDraftSurvey = false;
                      $scope.showFooterLink = false;
                    }
              }
              if(ent.operator.admin == true || ent.operator.full == true || ent.operator.limited == true ) {
                if(userData.buyerAcssLvls == "admin" || userData.buyerAcssLvls == "full" || userData.buyerAcssLvls == "limited"){

                }else{
                   $scope.showDraftSurvey = false;
                  //$scope.showFooterLink = false; 
                }
              }

            });
            localStorageService.set('accessRole',dataEtnl.Entitlement[0]);
            getSurveyesDetails();
            showDataOnDashboard();
          }
        }).error(function (err) {
          notify({message:err.error,classes:'alert-danger',duration:2000} );
        })
      }
    }

    function showDataOnDashboard(){
            var user=localStorageService.get('logedInUser');
            var access=localStorageService.get('accessRole');
            

            $rootScope.userName=user.usrName;
            $rootScope.userEmail=user.eml;
            $rootScope.buyer=user.buyerAcssLvls;
            $rootScope.supplier=user.supplierAcssLvls;
            $rootScope.operator=user.operatorAcssLvls;

            if(!access){
                $rootScope.buyerrole='none';
                $rootScope.supplierrole='none';
            }
            else{

                if(access &&access.buyer.full==true){
                    $rootScope.buyerrole='full';
                }
                else{
                    $rootScope.buyerrole='none';
                }
                if(access.buyer.admin==true){
                    $rootScope.buyerrole='admin';
                }
                else{
                    $rootScope.buyerrole='none';
                }

                if(access.buyer.limited==true){
                    $rootScope.buyerrole='limited';
                }
                else{
                    $rootScope.buyerrole='none';
                }

                if(access.supplier.full==true){
                    $rootScope.supplierrole='full';
                }
                else{
                    $rootScope.supplierrole='none';
                }
                if(access.supplier.admin==true){
                    $rootScope.supplierrole='admin';
                }
                else{
                    $rootScope.supplierrole='none';
                }
                if(access.supplier.limited==true){
                    $rootScope.supplierrole='limited';
                }
                else{
                    $rootScope.supplierrole='none';
                }
            }
    }

    function getCompanyDetails(){
        var cmpId=userData.cmp;
        companyService.getCompany(cmpId).success(function (data) {
            if(data.company){
                checkAccessByRole(data.company[0])
            }
            else{
                notify({message:'User Company does not exist',classes:'alert-warning',duration:2000} );
            }
        }).error(function (err) {
            notify({message:'Error in Company',classes:'alert-danger',duration:2000} );
        })
    }

    function getSurveyesDetails(){
      $scope.loader.show = true;
      if($stateParams.key != undefined && $stateParams.key != null && $stateParams.key != "") {
        //get survey
        $scope.tabs.makeDisable = true;
        //$scope.openSurveyDetails();
        createSurvey.getSurveyBasicDetails($stateParams.key).then(
          function(response) {
            $scope.openSurveyDetails(response.data.survey[0]);
            $scope.tabs.makeDisable = false;
            $scope.loader.show = false;
          },
          function(error) {
            $scope.loader.show = false;
            $scope.tabs.makeDisable = false;
            notify({message:"error getting survey data",classes:'alert-danger',duration:2000} );
          });

      }else {
        //load dashboard
        $scope.tabs.makeDisable = true;
        getPaginatedSurveysList($scope.pageNumbers.allTab, 22, $scope.searchSurvey.query);
        getSurveysCount();
           
        }
    };

    function getPaginatedSurveysList(pageno, surveyType, searchKeyword) {
      var userType = '';
      if($rootScope.supplier != 'none'){
          userType = 'supplier';
      }

      if($rootScope.buyer != 'none'){
          userType = 'buyer';
      }

      if($rootScope.operator != 'none'){
          userType = 'operator';
      }
      $scope.loader.show = true;
      $scope.infinteScroll.disabled = true;
      $scope.tableData.loading = true;
      $scope.tabs.makeDisable = true;
      createSurvey.getPaginatedSurveys(pageno, surveyType, userType, searchKeyword).then(
        function(response) {
          $scope.loader.show = false;
          $scope.tabs.makeDisable = false;
          $scope.tableData.loading = false;
          if(response.data && response.data.survey && response.data.survey.length > 0) {

            //check survey type and append data according to survey type 
            if(surveyType == 'all') {
              //append to all tab
              $scope.dsbrdSurvey.push.apply($scope.dsbrdSurvey, response.data.survey);
              $scope.pageNumbers.allTab++;
              $scope.disableInfiniteScroll.allTab = false;
            }
            if(surveyType == 11) {
              //append to draft tab
              $scope.draftSurveys.push.apply($scope.draftSurveys, response.data.survey);
              $scope.pageNumbers.draftsTab++;
              $scope.disableInfiniteScroll.draftsTab = false;
            }
            if(surveyType == 22) {
              //append to live tab
              $scope.liveSurveys.push.apply($scope.liveSurveys, response.data.survey);
              $scope.pageNumbers.liveTab++;
              $scope.disableInfiniteScroll.liveTab = false;
            }
            if(surveyType == 33) {
              //append to paused tab
              $scope.pausedSurveys.push.apply($scope.pausedSurveys, response.data.survey);
              $scope.pageNumbers.pauseTab++;
              $scope.disableInfiniteScroll.pauseTab = false;
            }
            if(surveyType == 44) {
              //append to closed tab
              $scope.closeSurveys.push.apply($scope.closeSurveys, response.data.survey);
              $scope.pageNumbers.closedTab++;
              $scope.disableInfiniteScroll.closedTab = false;
            }
              
            $timeout(function(){
              $scope.infinteScroll.disabled = false;
              $scope.tabs.makeDisable = false;
            },1000);
            
          }else {
            //disable infinite scroll on tab if there is no survey returned
            //this is similar to infinite scroll disabled variable
            //true means scroll is disabled else on false it's enabled
            $scope.tabs.makeDisable = false;
            if(surveyType == 'all') {
              $scope.disableInfiniteScroll.allTab = true;
            }
            if(surveyType == 11) {
              $scope.disableInfiniteScroll.draftsTab = true;
            }
            if(surveyType == 22) {
              $scope.disableInfiniteScroll.liveTab = true;
            }
            if(surveyType == 33) {
              $scope.disableInfiniteScroll.pauseTab = true;
            }
            if(surveyType == 44) {
              $scope.disableInfiniteScroll.closedTab = true;
            }
          }
          $scope.tableData.loading = false;
        },
        function(error) {
          $scope.loader.show = false;
          $scope.tableData.loading = false;
          $scope.infinteScroll.disabled = true;
          $scope.tabs.makeDisable = false;
        });
    }

    $scope.loadMoreRecords = function() {
      //get the page number according to tab
      var pageNumberToSend = 1;
      var surveyType = ""
      if($scope.active.tab == 'all') {
        pageNumberToSend = $scope.pageNumbers.allTab;
        surveyType = 'all';
      }
      if($scope.active.tab == 'live') {
        pageNumberToSend = $scope.pageNumbers.liveTab;
        surveyType = 22;
      }
      if($scope.active.tab == 'paused') {
        pageNumberToSend = $scope.pageNumbers.pauseTab;
        surveyType = 33;
      }
      if($scope.active.tab == 'drafts') {
        pageNumberToSend = $scope.pageNumbers.draftsTab;
        surveyType = 11;
      }
      if($scope.active.tab == 'closed') {
        pageNumberToSend = $scope.pageNumbers.closedTab;
        surveyType = 44;
      }
      //call the method to get data
      if(!$scope.infinteScroll.disabled) {
        getPaginatedSurveysList(pageNumberToSend, surveyType, $scope.searchSurvey.query); 
      }          
    };


    /*------------For Datatable---------*/
    // if Different operators have different no of columns
    if($rootScope.buyer != 'none' || $rootScope.operator != 'none'){
      $scope.dtOptions = DTOptionsBuilder.newOptions().withOption('bLengthChange', false).withOption('paging', false).withOption('aaSorting', [1, 'desc']).withOption('bFilter', false).withFixedHeader({header: true});
      if( $rootScope.operator != 'none') {
        $scope.dtColumnDefs = [
          DTColumnDefBuilder.newColumnDef(0).notSortable()
       ];
      }
      if($rootScope.buyer != 'none') {
        $scope.dtColumnDefs = [
          DTColumnDefBuilder.newColumnDef(8).notSortable(),
          DTColumnDefBuilder.newColumnDef(0).notSortable()
       ];
      }
    }else{
      $scope.dtOptions = DTOptionsBuilder.newOptions().withOption('bLengthChange', false).withOption('paging', false).withOption('aaSorting', [1, 'desc']).withOption('bFilter', false).withFixedHeader({header: true});
      $scope.dtColumnDefs = [
          DTColumnDefBuilder.newColumnDef(7).notSortable(),
          DTColumnDefBuilder.newColumnDef(0).notSortable()
       ];
    }

    $scope.toUpdate = {
      id: "",
      encId: "",
      status: "",
      itemIndex: ""
    };
    $scope.statusUpdateMsg = "";
    $scope.showSuccessMessage = false;

    /*----------Put Survey Data in Survey Status Change Modal------*/
    $scope.openStatusModal = function(id, encId, status, itemIndex, currentStatus) {
      $scope.statusUpdateMsg = "";
      $scope.showSuccessMessage = false;

      $scope.toUpdate.id =id;
      $scope.toUpdate.encId =encId;
      $scope.toUpdate.status =status;
      $scope.toUpdate.itemIndex = itemIndex;
      $scope.toUpdate.currentStatus = currentStatus;

    };

    /*---------Updates Survey Status in Table after change-------*/
    $scope.updateSurveyStatus = function() {
      createSurvey.updateSurveyStatus($scope.toUpdate.id, $scope.toUpdate).success(function (data){
         if(data.apiStatus == "success"){
            if($scope.surveyDetails){
              $scope.surveyDetails.status = $scope.toUpdate.status;
            }

            let activityDate = new Date();
            let dateString = $filter('date')(activityDate, 'EEEE, MMMM d');
            let timeString = $filter('date')(activityDate, 'HH:mm');
            $scope.showActivities.unshift({
              activityString: userData['usrName'] + ' changed the survey status from ' + $scope.toUpdate.currentStatus + ' to ' + $scope.toUpdate.status,
              timeString: dateString + ' @ ' + timeString
            });
            if ($scope.showActivities.length) {
              $scope.isExist = true;
            }

            $scope.showSuccessMessage = true;
            $scope.statusUpdateMsg = " #"+$scope.toUpdate.id+" is in "+$scope.toUpdate.status+" state.";

            $timeout(function(){
              $("#status-change-modal .close").trigger("click");
            },3000);
          }
        })
        .error(function (err) {
           notify({message:err.msg,classes:'alert-danger',duration:2000} );
       });
    };

    /*--------Open Survey Details------*/
    $scope.showSurveyDetails = false;
    $scope.openSurveyDetails = function(survey, itemIndex){
      $scope.loader.show = true;
      $scope.tabs.makeDisable = true;
      $scope.toUpdate.itemIndex = itemIndex;
      $scope.infinteScroll.disabled = true;
      $rootScope.newId = survey.id;
      //$rootScope.clone = true;
      angular.element('body').addClass('manageSurvey');
      var user=localStorageService.get('logedInUser');
          

      $scope.survey_locale = encodeDecodeFactory.encode(survey.locale);
      // Show categories in link detail tab
      if(survey.status != 11 && survey.status != "Draft") {
        $scope.active.tab = 'quotas';
        $scope.showSurveyDetails = true;
        $scope.surveyDetails = survey;
        $scope.surveyDetails.status == 22 ? $scope.surveyDetails.status = "Live" : $scope.surveyDetails.status == 11 ? $scope.surveyDetails.status = "Drafts" : $scope.surveyDetails.status == 33 ? $scope.surveyDetails.status = "Pause" : $scope.surveyDetails.status == 44 ? $scope.surveyDetails.status = "Closed" : "Live";

        for(var i in $scope.surveyDetails.survey_grouping){
          if($scope.surveyDetails.survey_grouping[i] == survey.id){
            $scope.surveyDetails.survey_grouping.splice(i, 1);;
            break;
          }
        }

        if($scope.surveyDetails.survey_grouping && $scope.surveyDetails.survey_grouping.length == 0){
          $scope.surveyDetails.survey_grouping ='';
        }

        var userType = '';
        if($rootScope.supplier != 'none'){
            userType = 'supplier';
        }
        if($rootScope.buyer != 'none'){
            userType = 'buyer';
        }

        if($rootScope.operator != 'none'){
            userType = 'operator';
        }

        if(user.supplierAcssLvls != 'none'){
          createSurvey.getSurveyDetailforSupplier(survey.id, userType, survey.locale,userData.cmp).success(function(ssurveyDetails){

            $scope.loader.show = false;
            $scope.tabs.makeDisable = false;
            $timeout(function(){
              $scope.srvQtaMgeDetails = ssurveyDetails.quotaData[0];
              //PD-1261
              if(_.has($scope.srvQtaMgeDetails, "nestedQuotas") && $scope.srvQtaMgeDetails.nestedQuotas.length > 0) {
                allCaseSortNestedQuota = $scope.srvQtaMgeDetails.nestedQuotas;
              }
              $scope.srvAudienceDetails = ssurveyDetails.audience;
              $scope.suppSetObj = ssurveyDetails.supplierNames;
              $scope.srvMgeDetails = ssurveyDetails.result[0];
              $scope.surveyDetails.samplesName = ssurveyDetails.survey[0].samplesName;

              if(ssurveyDetails.survey[0].hasOwnProperty('sr_launchTS')){
                  $scope.surveyDetails.sr_launchTS = ssurveyDetails.survey[0].sr_launchTS;
              }
              if(ssurveyDetails.survey[0].hasOwnProperty('sr_closeTS')){
                  $scope.surveyDetails.sr_closeTS = ssurveyDetails.survey[0].sr_closeTS;
              }
              if(ssurveyDetails.survey[0].hasOwnProperty('openDates')){
                  $scope.surveyDetails.openDates = ssurveyDetails.survey[0].openDates;
              }
             

              if($scope.srvMgeDetails.hasOwnProperty('fielded') && $scope.srvMgeDetails.fielded == 0) {
                $scope.isSupplierFielded = true;

                $scope.srvMgeDetails.cpi_launch = ssurveyDetails.result[0].cpi_launch;
                $scope.srvMgeDetails.loi_launch = ssurveyDetails.result[0].loi_launch;
                $scope.srvMgeDetails.cpi_current = ssurveyDetails.result[0].acpi ||  ssurveyDetails.result[0].cpi_current ;
                $scope.srvMgeDetails.incidence_launch = ssurveyDetails.result[0].incidence_launch;
                $scope.srvMgeDetails.total_cost_projected = ssurveyDetails.result[0].total_cost_projected;

                if($scope.isSupplierFielded == true) {
                  $scope.cpiMode = "Current";
                  $scope.acpiMode = "Average";
                  $scope.loiMode = "Recent";//PD-1142
                  $scope.incidenceMode = "Recent"; //PD-1142
                }
              }else{
                $scope.isSupplierFielded = false;
                $scope.totalCostMode = "Current";
                $scope.cpiMode = "Current";
                $scope.acpiMode = "Average";
                $scope.loiMode = "Recent";//PD-1142
                $scope.incidenceMode = "Recent";//PD-1142
              }

              $scope.nestedQuotasQualName = []; 
              extractAutoNestedQuota(allCaseSortNestedQuota);//PD-1261
              //Change location name as the country changes
              console.log('$scope.srvMgeDetails.countryName 1 ',$scope.srvMgeDetails.countryCode);
              setLocationViews($scope.srvMgeDetails.countryCode);
            }, 100);
          });

        }else{
          createSurvey.getSurveyDetails(survey.id, userType, survey.locale).success(function(ssurveyDetails){
              $scope.loader.show = false;
              $scope.tabs.makeDisable = false;
              $timeout(function(){
                $scope.surveyDetails.samplesName = ssurveyDetails.survey[0].samplesName;

                // add the swagbucks project_id only for operator
                if(userType === 'operator' && ssurveyDetails.survey[0].sb_project_id) {
                    $scope.surveyDetails.sb_project_id = ssurveyDetails.survey[0].sb_project_id;
                }



              if(ssurveyDetails.survey[0].hasOwnProperty('sr_launchTS')){
                  $scope.surveyDetails.sr_launchTS = ssurveyDetails.survey[0].sr_launchTS;
              }
              if(ssurveyDetails.survey[0].hasOwnProperty('sr_closeTS')){
                  $scope.surveyDetails.sr_closeTS = ssurveyDetails.survey[0].sr_closeTS;
              }
              if(ssurveyDetails.survey[0].hasOwnProperty('openDates')){
                  $scope.surveyDetails.openDates = ssurveyDetails.survey[0].openDates;
              }
              


                //PD-822
                $scope.surveyDetails.survey_client = ssurveyDetails.survey[0].survey_client;

                $scope.srvMgeDetails = ssurveyDetails.mgmtData;
                
                if(ssurveyDetails.mgmtData && ssurveyDetails.mgmtData.currencyFx && ssurveyDetails.mgmtData.currencyFx.symbol) {
                   $scope.currency_symbol = ssurveyDetails.mgmtData.currencyFx.symbol;
                }

                /*modify data according to PD-389*/
                $scope.srvMgeDetails.cost_launch = ssurveyDetails.mgmtData.total_cost_launch || parseFloat(ssurveyDetails.mgmtData.cpi_launch * ssurveyDetails.mgmtData.goal).toFixed(2);
                $scope.srvMgeDetails.cpi_projected =  parseFloat(ssurveyDetails.mgmtData.total_cost_projected / ssurveyDetails.mgmtData.goal).toFixed(2);
                     
                $scope.srvQtaMgeDetails = ssurveyDetails.quotaData[0];
                
                //PD-1261
                if(_.has($scope.srvQtaMgeDetails, "nestedQuotas") && $scope.srvQtaMgeDetails.nestedQuotas.length > 0) {
                  allCaseSortNestedQuota = $scope.srvQtaMgeDetails.nestedQuotas;
                }

                /*==========Audience Qualification Data
                =====================================*/
                $scope.srvAudienceDetails = ssurveyDetails.audience;
               
                      
                /*PD-655*/
                $scope.srvAudienceDetails.survey_id = survey.id;
                if(survey.target.zipcodes != undefined && survey.target.zipcodes.length > 0) {
                  $scope.zipCodeFlg = true;
                  if(survey.target.zipcodes.length > 1) {
                    $scope.zipCodesLntFlg = true;
                  }
                }

                /*==============Get Suppliers for Buyer
                ======================================*/

               
                $scope.srvSupplierDetails = ssurveyDetails.supplierNames;
                $scope.availReconcileSurvey = ssurveyDetails.mgmtData;
                //PD-1028
                _.each($scope.srvSupplierDetails, function(itrateSupplr){
                    itrateSupplr["survey_id"] = survey.id;
                    
                });
                if(userData && userData.cmp == 56){
                  console.log('done');
                  _.each($scope.srvSupplierDetails, function(eachSup, j){
                      // Prodege MR
                      if(eachSup.id == 107){
                          eachSup.name = "GTM/My Survey";
                      }
                      // Avtive Measure
                      /*if(eachSup.id == 79){
                          eachSup.name = "GTM/My Survey";
                      }*/
                  }); 
                }
                /*if(userData && userData.cmp == 145){
                    console.log('done');
                    _.each($scope.srvSupplierDetails, function(eachSup, j){
                        if(eachSup.id == 9){
                            eachSup.name = "GTM";
                        }
                        if(eachSup.id == 26){
                            eachSup.name = "My Survey";
                        }
                    });   
                }*/

                $scope.nestedQuotasQualName = []; 
                extractAutoNestedQuota(allCaseSortNestedQuota);//PD-1261
                console.log('$scope.srvMgeDetails.countryName 2 ',$scope.srvMgeDetails.countryCode);
                setLocationViews($scope.srvMgeDetails.countryCode);
              }, 100);
          });
        }

      }else{
        $scope.loader.show = false;
        $scope.tabs.makeDisable = false;
  	    $state.go('launchsurvey',{surveyid: survey.id});
      }
    };


    /*--------Close Survey Details------*/
    $scope.closeSurveyDetails = function(surveyType){
        jQuery('body').removeClass('manageSurvey');
        $scope.showSurveyDetails = false;
        $scope.zipCodeFlg = false; /*PD-655*/
        $scope.zipCodesLntFlg = false; /*PD-655*/

        //set active tab according to current active tab
        if(surveyType != undefined && surveyType != null) {
          $scope.active.tab = ( surveyType == 'Live' ) ? 'live' : (surveyType == 'Pause') ? 'paused' : (surveyType == 'Closed') ? 'closed' : 'live';
          $scope.setTab($scope.active.tab);
        }
        //$scope.active.tab = 'live';
        $scope.infinteScroll.disabled = false;
        if($scope.filterCompanyDetail == false){
          $scope.totalCostMode = "Current";
          $scope.cpiMode = "Current";
          $scope.acpiMode = "Average";
          $scope.loiMode = "Recent";//PD-1142
          $scope.incidenceMode = "Recent";//PD-1142
        }
        //PD-1261
        $scope.quotaViewFlags.quotaview = true;
        $scope.quotaViewFlags.supplierview = false;

        $state.go('home')
    };

    //logout function and reset pssword function
    $rootScope.logout = function(){
        user.logoutUser(userData.id).success(function (data) {
            localStorageService.clearAll();
            sessionStorage.removeItem("token");
            authenticationService.revokeAuthentication();
            $state.go('login',{reload : true});
            //window.location.reload();
        }).error(function (err) {
            notify({message:'Error in logout',classes:'alert-danger',duration:2000} );
        })

    };
        
    $rootScope.resetPassword = function() {
        $state.go('resetPassword');
    };

    /*==========Survey Management Details
    =====================*/
    if( $rootScope.operator != 'none'){
      $scope.totalCostMode = "Current";
      $scope.cpiMode = "Current";
      $scope.acpiMode = "Average";
      $scope.loiMode = "Recent";//PD-1142
      $scope.incidenceMode = "Recent";//PD-1142
    }
    if($rootScope.supplier != 'none'){
      $scope.totalCostMode = "Current";
      $scope.cpiMode = "Current";
      $scope.acpiMode = "Average";
      $scope.loiMode = "Recent";//PD-1142
      $scope.incidenceMode = "Recent";//PD-1142
    }
    if($rootScope.buyer != 'none'){
      // $scope.totalCostMode = "Projected";
      // $scope.cpiMode = "At Launch";
      // $scope.acpiMode = "At Launch";
      // $scope.loiMode = "At Launch";
      // $scope.incidenceMode = "At Launch";

      $scope.totalCostMode = "Current";
      $scope.cpiMode = "Current";
      $scope.acpiMode = "Average";
      $scope.loiMode = "Recent";//PD-1142
      $scope.incidenceMode = "Recent";//PD-1142
    }
    if($scope.isSupplierFielded == true) {
        $scope.cpiMode = "At Launch";
        $scope.acpiMode = "Average";
        $scope.loiMode = "Recent";//PD-1142
        $scope.incidenceMode = "Recent";//PD-1142
    }

    $scope.changeTotalCostMode = function(mode){
      $scope.totalCostMode = mode;
    }
    $scope.changeCpiMode = function(mode){
      $scope.cpiMode = mode;
    }
    $scope.changeAcpiMode = function(mode){
      $scope.acpiMode = mode;
    }
    $scope.changeLoiMode = function(mode){
      $scope.loiMode = mode;
    }
    $scope.changeIncidenceMode = function(mode){
      $scope.incidenceMode = mode;
    }
    $scope.setLink = function(surveyDetails){
      var cmpId=userData.cmp;
      $scope.buyerEntryLink = config.pureSpecturm.url+'/startsurvey?survey_id='+ surveyDetails.id+'&supplier_id=?';
      if(config.app == "pureSpectrumApp-Staging"){
        $scope.buyerTestEntryLink = config.pureSpecturm.url+'/startsurvey?survey_id='+ surveyDetails.id + '&ps_redirect_test=1&bsec='+config.BSEC+'&supplier_id=26';
      }else{
        $scope.buyerTestEntryLink = config.pureSpecturm.url+'/startsurvey?survey_id='+ surveyDetails.id + '&ps_redirect_test=1&bsec='+config.BSEC+'&supplier_id=23';
      }
      $scope.suppEntryLink = config.pureSpecturm.url+'/startsurvey?survey_id='+ surveyDetails.id+'&supplier_id='+cmpId;
      $scope.suppTestEntryLink = config.pureSpecturm.url+'/startsurvey?survey_id='+ surveyDetails.id + '&ps_redirect_test=1&bsec='+config.BSEC+'&supplier_id='+cmpId;
    }

    /*------For Editing Live Close And Paused Surveys-----------------*/
    
    if($stateParams.key){
        $scope.showSurveyDetails = true;
        $scope.active.tab = 'quotas';

    }
    $scope.closeManage = function(key){
        $scope.active.tab = 'all';
        $state.go('home');
    };

    
    socket.on('channel', function (message) {
      var tempArr = [];
      var socLiveSurvey = _.findWhere($scope.liveSurveys, {"id":message.survey_param.id});
      var liveIndex = _.findIndex($scope.liveSurveys, socLiveSurvey);
      if(socLiveSurvey && angular.lowercase(socLiveSurvey.status) == 'live'){
        tempArr.push(socLiveSurvey);
        $scope.liveSurveys.splice(liveIndex,1);
        $scope.surveysCount.live = $scope.surveysCount.live - 1;
      }
      
      var socPauseSurvey = _.findWhere($scope.pausedSurveys, {"id":message.survey_param.id});
      var pauseIndex = _.findIndex($scope.pausedSurveys, socPauseSurvey);
      if(socPauseSurvey && socPauseSurvey.id  == message.survey_param.id){
         if(angular.lowercase(socPauseSurvey.status) == 'pause') {
          tempArr.push(socPauseSurvey);
          $scope.pausedSurveys.splice(pauseIndex,1);
          $scope.surveysCount.pause = $scope.surveysCount.pause - 1;
        }
      }

      var socCloseSurvey = _.findWhere($scope.closeSurveys, {"id":message.survey_param.id});
      var closeIndex = _.findIndex($scope.closeSurveys, socCloseSurvey);
      if(socCloseSurvey && socCloseSurvey.id  == message.survey_param.id){
        if(angular.lowercase(socCloseSurvey.status) == 'closed') {
          tempArr.push(socCloseSurvey);
          $scope.closeSurveys.splice(closeIndex,1);
        }
      } 

      var socDraftSurvey = _.findWhere($scope.draftSurveys, {"id":message.survey_param.id});
      var draftIndex = _.findIndex($scope.draftSurveys, socDraftSurvey);
      if(socDraftSurvey && socDraftSurvey.id  == message.survey_param.id){
        if(angular.lowercase(socDraftSurvey.status) == 'draft'){
          tempArr.push(socDraftSurvey);
          $scope.draftSurveys.splice(draftIndex,1);
        }
      } 

      if(angular.lowercase(message.survey_param.status) == 'live') {
        $scope.surveysCount.live = $scope.surveysCount.live + 1;
        if($scope.liveSurveys.length != 0 && tempArr[0] != undefined){
          tempArr[0].status ='Live';
          $scope.liveSurveys.push(tempArr[0]);
        }
      }else if(angular.lowercase(message.survey_param.status) == 'pause') {
        $scope.surveysCount.pause = $scope.surveysCount.pause + 1;
        if( $scope.pausedSurveys.length != 0 && tempArr[0] != undefined){
           tempArr[0].status ='Pause';
          $scope.pausedSurveys.push(tempArr[0]);
        }
      }else if(angular.lowercase(message.survey_param.status) == 'closed') {
        if( $scope.closeSurveys.length != 0 && tempArr[0] != undefined){
           tempArr[0].status ='Closed';
          $scope.closeSurveys.push(tempArr[0]);
        }
      }else if(angular.lowercase(message.survey_param.status) == 'draft') {
        if($scope.draftSurveys != undefined && $scope.draftSurveys.length != 0 && tempArr[0] != undefined){
           tempArr[0].status ='Draft';
          $scope.draftSurveys.push(tempArr[0]);
        }
      }
    });
    

    // update on survey done
    socket.on('channel2', function (message) {
      //console.log('channel2 ',$scope.showAccordianQuota.current);
      var user = localStorageService.get('logedInUser');
     
      if(user.supplierAcssLvls != 'none'){
        var survey_id = message.supp_survey_param.survey_id;
        var fielded   = message.supp_survey_param.fielded;
      }else{
        var survey_id = message.survey_param.survey_id;
        var fielded   = message.survey_param.fielded;
      }
      
      /*if($scope.surveyDetails && message.supp_survey_param && message.supp_survey_param.samplesName){
        $scope.surveyDetails.samplesName = message.supp_survey_param.samplesName;
      }*/
      
      if($scope.srvMgeDetails != undefined && $scope.srvMgeDetails.survey_id == survey_id){
        if(user.supplierAcssLvls != 'none' ){
          if( user.cmp == message.supp_survey_param.supplier_id){
            $scope.srvMgeDetails = message.supp_survey_param;
          }
        }else{
            $scope.srvMgeDetails = message.survey_param;
        }
      }

      if($scope.srvQtaMgeDetails != undefined){ 
        if($scope.srvQtaMgeDetails.survey_id == survey_id){
          $scope.srvQtaMgeDetails = message.quotamgmt_param[0];
        }
      }
      if($scope.srvSupplierDetails != undefined){
        if($scope.srvMgeDetails.survey_id == survey_id){
          _.each($scope.srvSupplierDetails, function(singleSupp){
            var currSupp = _.findWhere(message.supplierNames, {"id":singleSupp.id});
            if(currSupp){
              singleSupp['fielded'] = currSupp.fielded;
              singleSupp['cpi'] = currSupp.cpi;
              singleSupp['buyer_in_progress'] = currSupp.buyer_in_progress;
              singleSupp['remaining'] = currSupp.remaining;
              singleSupp['blockprice'] = currSupp.blockprice;
              singleSupp['price_override'] = currSupp.price_override;
              //PD-1227 1283
              
              if(_.has(currSupp, "performance")) {
                singleSupp['performance']  = currSupp.performance;
              }
              
              if(_.has(currSupp, "valid_click")) {
                singleSupp['valid_click'] = currSupp.valid_click;
              }
              if(_.has(currSupp, "valid_click_cost")) {
                singleSupp['valid_click_cost'] = currSupp.valid_click_cost;
              }
              if(_.has(currSupp, "total_click_cost")) {
                singleSupp['total_click_cost'] = currSupp.total_click_cost;
              }
              if(_.has(currSupp, "valid_click_per")) {
                singleSupp['valid_click_per'] = currSupp.valid_click_per;
              }
            }
          });
          //$scope.srvSupplierDetails = message.supplierNames;
        }
      }

      var socDashSurvey = _.findWhere($scope.dsbrdSurvey, {"id":survey_id});
      //console.log('socDashSurvey '+JSON.stringify(socDashSurvey));
      if(socDashSurvey){
        if(user.supplierAcssLvls != 'none' && user.cmp == message.supp_survey_param.supplier_id){
          socDashSurvey.supplier[0].fielded = fielded;
        }else{
          socDashSurvey.incidence_current = message.survey_param.incidence_current;
          socDashSurvey.acpi = message.survey_param.acpi;
          socDashSurvey.Fielded = fielded;
        }
      }
      
      var socLiveSurvey = _.findWhere($scope.liveSurveys, {"id":survey_id});
      //console.log('socLiveSurvey '+JSON.stringify(socLiveSurvey));
      if(socLiveSurvey){
        if(user.supplierAcssLvls != 'none' && user.cmp == message.supp_survey_param.supplier_id) {
          socLiveSurvey.supplier[0].fielded = fielded;
        }else{
          socLiveSurvey.incidence_current = message.survey_param.incidence_current;
          socLiveSurvey.acpi = message.survey_param.acpi;
          socLiveSurvey.Fielded = fielded;
        }
      }

      var socPauseSurvey = _.findWhere($scope.pausedSurveys, {"id":survey_id});
      //console.log('socPauseSurvey '+JSON.stringify(socPauseSurvey));
      if(socPauseSurvey){
        if(user.supplierAcssLvls != 'none' && user.cmp == message.supp_survey_param.supplier_id) {
          socPauseSurvey.supplier[0].fielded = fielded;
        } else {
          socPauseSurvey.incidence_current = message.survey_param.incidence_current;
          socPauseSurvey.acpi = message.survey_param.acpi;
          socPauseSurvey.Fielded = fielded;
        } 
      }

      var socCloseSurvey = _.findWhere($scope.closeSurveys, {"id":survey_id});
      //console.log('socCloseSurvey '+JSON.stringify(socCloseSurvey));
      if(socCloseSurvey){
        if(user.supplierAcssLvls != 'none' && user.cmp == message.supp_survey_param.supplier_id) {
          socCloseSurvey.supplier[0].fielded = fielded;
        }else{
          socCloseSurvey.incidence_current = message.survey_param.incidence_current;
          socCloseSurvey.acpi = message.survey_param.acpi;
          socCloseSurvey.Fielded = fielded;
        }
      }
      
    });
    socket.on('channel3', function (message) {
      //console.log('channel3 ',$scope.showAccordianQuota.current);
      var socDashSurvey = _.findWhere($scope.dsbrdSurvey, {"id":message.survey_param.survey_id});
      if(socDashSurvey){
        if(angular.lowercase(message.survey_param.st) == 'pause'){
          $scope.pausedSurveys.push(socDashSurvey);
        }
        socDashSurvey.status = message.survey_param.st;
      }
      var socLiveSurvey = _.findWhere($scope.liveSurveys, {"id":message.survey_param.survey_id});
      var liveIndex = _.findIndex($scope.liveSurveys, socLiveSurvey);
      if(socLiveSurvey && angular.lowercase(message.survey_param.st) == 'pause') {
        socLiveSurvey.status = message.survey_param.st;
        $scope.liveSurveys.splice(liveIndex,1);
      }
      //console.log('channel3  after ',$scope.showAccordianQuota.current);
    });
    //socket to update survey status in case survey gets closed on surveydone
    socket.on('channel4', function (message) {
      //console.log('channel4  ',$scope.showAccordianQuota.current);
      var socDashSurvey = _.findWhere($scope.dsbrdSurvey, {"id":message.survey_param.survey_id});
      if(socDashSurvey){
        if(angular.lowercase(message.status) == 'closed') {
          $scope.closeSurveys.push(socDashSurvey);
          //$scope.liveSurveys.splice(i,1);
        }
        socDashSurvey.status = message.status;
      }
      var socLiveSurvey = _.findWhere($scope.liveSurveys, {"id":message.survey_param.survey_id});
      var liveIndex = _.findIndex($scope.liveSurveys, socLiveSurvey);
      if(socLiveSurvey){
        if(angular.lowercase(message.status) == 'closed') {
          socLiveSurvey.status = message.status;
          $scope.liveSurveys.splice(liveIndex,1);
        }
      }
      //console.log('channel4  after ',$scope.showAccordianQuota.current);
    });
    
    socket.on('channel5', function (message) {
      //console.log('channel5  ',$scope.showAccordianQuota.current);
      var socDraftSurvey = _.findWhere($scope.draftSurveys, {"encriptionId":message.survey_param.id});
      var draftIndex = _.findIndex($scope.draftSurveys, socDraftSurvey);
      if(socDraftSurvey){
        if(angular.lowercase(socDraftSurvey.status) == 'draft'){
          $scope.draftSurveys.splice(draftIndex,1);
        }
      }
      //console.log('channel5  after ',$scope.showAccordianQuota.current);
    });
    socket.on('buyerProgressChannel', function (message) {
      //console.log('buyerProgressChannel  ',$scope.showAccordianQuota.current);
      var socDashSurvey = _.findWhere($scope.dsbrdSurvey, {"id":message.survey_param.survey_id});
      if(socDashSurvey && socDashSurvey.id == message.survey_param.survey_id){
        socDashSurvey.actualBuyerInProgress = message.survey_param.actualBuyerInProgress;
      }

      var socLiveSurvey = _.findWhere($scope.liveSurveys, {"id":message.survey_param.survey_id});
      if(socLiveSurvey && socLiveSurvey.id == message.survey_param.survey_id){
        socLiveSurvey.actualBuyerInProgress = message.survey_param.actualBuyerInProgress;
      }
      //console.log('buyerProgressChannel after ',$scope.showAccordianQuota.current);
    });
    // update counters of quota tab while update on BIP, sup_currently_open, in updateQuotaBIPCounterV2 function
    socket.on('quotaTabChannel', function (data){
      //console.log('quotaTabChannel  ',$scope.showAccordianQuota.current);
      //console.log("quotaTabChannel ",JSON.stringify(data));
      if($scope.srvQtaMgeDetails && data.survey_id && data.quotaData){
        if($scope.srvQtaMgeDetails.survey_id == data.survey_id) {
          $scope.srvQtaMgeDetails = data.quotaData[0];
          /*_.each(Object.keys($scope.srvQtaMgeDetails.quotas), function(quotaKey){
            //console.log('quotaKey '+quotaKey);
            _.each($scope.srvQtaMgeDetails['quotas'][quotaKey] , function(quotaSingleObj){
              //console.log('quotaSingleObj '+JSON.stringify(quotaSingleObj));
              var incomingQuotaData = data.quotaData[0]['quotas'][quotaKey];
              //console.log('incomingQuotaData '+JSON.stringify(incomingQuotaData));
              var currentQuota = _.findWhere(incomingQuotaData, {"unique_id":quotaSingleObj.unique_id});
              //console.log('currentQuota '+JSON.stringify(currentQuota));
              if(currentQuota){
                quotaSingleObj['currently_open']  = currentQuota.currently_open;
                quotaSingleObj['sup_currently_open']  = currentQuota.sup_currently_open;
                quotaSingleObj['buyer_in_progress']  = currentQuota.buyer_in_progress;
                quotaSingleObj['remaining']  = currentQuota.remaining;
                quotaSingleObj['achieved']  = currentQuota.achieved;
              }
            });
          });*/ 
        }
        /*if($scope.srvQtaMgeDetails.survey_id == data.survey_id) {
          $scope.srvQtaMgeDetails = data.quotaData[0];
        }*/
      }
      //console.log('quotaTabChannel after ',$scope.showAccordianQuota.current);
    });
    // update counters of supplier tab while update on BIP
    socket.on('supplierBPIChannel', function (data) {
      //console.log('supplierBPIChannel ',$scope.showAccordianQuota.current);
      //console.log("\n\n supplierBPIChannel ",JSON.stringify(data));
      //console.log("$scope.srvSupplierDetails ",JSON.stringify($scope.srvSupplierDetails));
      if($scope.srvQtaMgeDetails != undefined && data.survey_param && data.survey_param.survey_id && data.survey_param.survey_id == $scope.srvQtaMgeDetails.survey_id){ 
        _.each($scope.srvSupplierDetails, function(supIndex){
          if(supIndex.id === data.survey_param.supplier_id) {
            supIndex['buyer_in_progress'] = data.survey_param.actualBuyerInProgress;
          }
        });
      }
      //console.log('supplierBPIChannel after ',$scope.showAccordianQuota.current);
    });
    // update counters of supplier tab while Start Surveys- PD-772
    socket.on('supplierSurveyStartChannel', function (data) {
      //console.log('supplierSurveyStartChannel ',$scope.showAccordianQuota.current);
      //console.log("\n\n Survey Start counter channel ",JSON.stringify(data));
      //console.log("\n\n $scope.srvQtaMgeDetails ",$scope.srvSupplierDetails);
      if($scope.srvSupplierDetails && $scope.srvSupplierDetails.length > 0) {
        _.each($scope.srvSupplierDetails, function(srvSupplr){
            if(srvSupplr.survey_id == data.surveyStartCount.survey_id && srvSupplr.id == data.surveyStartCount.supplier_id) {
               srvSupplr.srvStrtCount = data.surveyStartCount.srvStrtCount;
               srvSupplr.lastSrvDate = data.surveyStartCount.lastSrvDate;
            }
        });
      }  
      //console.log('supplierSurveyStartChannel after ',$scope.showAccordianQuota.current);  
    });

    // update survey details after manual reconcilation- PD-1087
    socket.on('channel_recon', function (surveyManagementDoc) {
      
      var survey_id = surveyManagementDoc.survey_id;
      var user = localStorageService.get('logedInUser');

      if(surveyManagementDoc && $scope.srvMgeDetails && $scope.srvMgeDetails.survey_id == survey_id){
        
        if(surveyManagementDoc.statistics && surveyManagementDoc.statistics.length){
          var sur_st = _.findWhere(surveyManagementDoc.statistics, {"period": "all"});
          if((user.buyerAcssLvls != 'none' && user.cmp == sur_st.buyer.buyer_id) || user.operatorAcssLvls != 'none'){
            $scope.srvMgeDetails.fielded = surveyManagementDoc.fielded;
            $scope.srvMgeDetails.total_cost_current = sur_st.buyer.finance.buyer_amount_after_adj;
            $scope.srvMgeDetails.recCompltCount = sur_st.buyer.completes.buyer_recon;
            $scope.srvMgeDetails.manualFixCompltCount = sur_st.buyer.completes.buyer_manual_fix;

            //Updating Dashboard Completes PD-1301
            _.each($scope.closeSurveys, function(closSrv){
                if(closSrv.id == survey_id) {
                    closSrv.Fielded = surveyManagementDoc.fielded; 
                }
            });
          }

          if(user.supplierAcssLvls != 'none'){
            _.each(sur_st.suppliers, function(sup_st){
              if(sup_st.supplier_id == user.cmp){
                $scope.srvMgeDetails.total_cost_current = sup_st.finance.supplier_amount_after_adj;
              }
            })
          }

        }
        
        //updating supplier tab
        for(supIndex in $scope.srvSupplierDetails){
          var currSupp = _.findWhere(surveyManagementDoc.suppliers, {"id":$scope.srvSupplierDetails[supIndex].id});
          if(currSupp) {
            $scope.srvSupplierDetails[supIndex]['fielded'] = currSupp.achieved;
            $scope.srvSupplierDetails[supIndex]['remaining'] = currSupp.remaining;
            $scope.srvSupplierDetails[supIndex]['blockprice'] = Number(parseFloat((currSupp.block_price) / 0.8).toFixed(2));
          }
        }
      }
    });

    //Update supplier performance by socket PD-1227
    socket.on('supplier_performance', function(data){
      var survey_id = data.supplierData.survey_id;
      if($scope.srvSupplierDetails != undefined){
        if($scope.srvMgeDetails.survey_id == survey_id){
          _.each($scope.srvSupplierDetails, function(snglSupplr){
              if(data.supplierData.supplier_id === snglSupplr.id) {
                 
                  if(_.has(data.supplierData, "performance")){
                    snglSupplr.performance = data.supplierData.performance;
                  }

                  if(_.has(data.supplierData, "valid_click")) {
                    snglSupplr['valid_click'] = data.supplierData.valid_click;
                  }
                  if(_.has(data.supplierData, "valid_click_cost")) {
                    snglSupplr['valid_click_cost'] = data.supplierData.valid_click_cost;
                  }
                  if(_.has(data.supplierData, "total_click_cost")) {
                    snglSupplr['total_click_cost'] = data.supplierData.total_click_cost;
                  }
                  if(_.has(data.supplierData, "valid_click_per")) {
                    snglSupplr['valid_click_per'] = data.supplierData.valid_click_per;
                  }
              }
          });
        }
      }
    });

    /*==========Lock Quota===
    ========================*/

    $scope.lockQuotaImg = "../../img/lock.png";
    $scope.unLockQuotaImg = "../../img/unlock.png";



    $scope.lockQuota = function(surveyId, quotaName, unique_id, flag, index, option_id, quota){

       let quotaDetails = {
        quotas: [],
        type: ''
       };
        $scope.loader.show = true;
        if($rootScope.supplier != 'none') {
            return false;
        }
        if (_.has(quota, 'name') && quota['name'].length) {
          _.each(quota['name'], (quot) => {
            if (_.has(quot, 'from') && _.has(quot, 'to')) {
              quotaDetails['quotas'].push({
                name: quota['qualification_name'],
                condition: quot['from'] + ' - ' + quot['to']
              });
              
            }
            if (_.has(quot, 'name') && !_.has(quot, 'from') && !_.has(quot, 'to')) {
              quotaDetails['quotas'].push({
                name: quota['qualification_name'],
                condition: quot['name']
              });
            }
          })
          quotaDetails['type'] = (quota['qualification_name'] == quotaName) ? 'layered' : quotaName;
        }

        if (_.has(quota, 'combinedOptions') && quota['combinedOptions'].length) {
          _.each(quota['combinedOptions'], (quot) => {
              quotaDetails['quotas'].push({
                name: quot['q_name'],
                condition: ''
              });
          });
          quotaDetails['type'] = quotaName;
        }
        
        createSurvey.lockQuota(surveyId, quotaName, unique_id, flag, option_id, quotaDetails).success(function (data){
          if(data.apiStatus == "Success"){
            $scope.loader.show = false;
            //console.log("quotaName ",quotaName);
            //console.log("index ",index);
            // Checking if quotaName exists in advanceQuotas then go in first condition otherwise check in quotas else nested
            if($scope.srvQtaMgeDetails.advanceQuotas[quotaName]){
              $scope.srvQtaMgeDetails.advanceQuotas[quotaName][index].locked = flag;
            }else if($scope.srvQtaMgeDetails.quotas[quotaName]){
              $scope.srvQtaMgeDetails.quotas[quotaName][index].locked = flag;
            }else if(quotaName == "nested"){
              $scope.srvQtaMgeDetails.nestedQuotas[index].locked = flag;
            }else if(quotaName == "grouped"){
              $scope.srvQtaMgeDetails.groupedCatQuotas[index].locked = flag;
            }

            if(flag == true){
              notify({message:'Quota Locked',classes:'alert-success',duration:2000} );
            }else{
              notify({message:'Quota Unlocked',classes:'alert-success',duration:2000} );
            }
           }
        }).error(function (err) {
            $scope.loader.show = false;
             notify({message:err.msg,classes:'alert-danger',duration:2000} );
        });
    };

    $scope.lockQuotaAgeIncome = function(surveyId, quotaName, min, max, flag, index){
        $scope.loader.show = true;
        if($rootScope.operator != 'none' || $rootScope.supplier != 'none') {
            return false;
        }
        createSurvey.lockQuotaAgeIncome(surveyId, quotaName, min, max, flag).success(function (data){
        if(data.apiStatus == "Success"){
          $scope.loader.show = false;
          if(quotaName == "age"){
            $scope.srvQtaMgeDetails.quotas.age[index].locked = flag;
          }
          else if(quotaName == "houseHoldIncome"){
            $scope.srvQtaMgeDetails.quotas.houseHoldIncome[index].locked = flag;
          }

          if(flag == true){
            notify({message:'Quota Locked',classes:'alert-success',duration:2000} );
          }else{
            notify({message:'Quota Unlocked',classes:'alert-success',duration:2000} );
          }
         }
        }).error(function (err) {
          $scope.loader.show = false;
           notify({message:err.msg,classes:'alert-danger',duration:2000} );
        });
    };

    /*------Open Delete Modal-----*/
    $scope.toDelete={
      id: "",
      encId: "",
      status: ""
    };
    $scope.deleteModal = function(id, encId){
      $scope.deleteSuccessMsg = "";
      $scope.showSuccessMessage = false;

      $scope.toDelete.id =id;
      $scope.toDelete.encId =encId;
    };

    /*--------Delete Survey Function--------*/
    $scope.deleteSurvey = function() {
      $scope.loader.show = true;
      createSurvey.deleteDraftSurvey($scope.toDelete.encId).success(function (data){
          $scope.loader.show = false;
         if(data.apiStatus == "success"){
            $scope.showSuccessMessage = true;
            $scope.deleteSuccessMsg = " #"+$scope.toDelete.id+" is deleted";
            getSurveyesDetails();
            $timeout(function(){
              $("#survey-delete-modal .close").trigger("click");
            },3000);
          }
        })
        .error(function (err) {
          $scope.loader.show = false;
           notify({message:err.msg,classes:'alert-danger',duration:2000} );
       });
    };

    $scope.clearDataFunc = function() {
      $rootScope.clone = false;
      $rootScope.newId = "";
    }

    $scope.config = config; // For making footer links inactive on Prod

    $scope.createNewPriceBlock = function() {
      createSurvey.createNewPriceBlock($scope.surveyDetails.id).success(function(res) {
        notify({message:res.msg,classes:'alert-success',duration:2000} );
      })
      .error(function(err) {
        notify({message:err.msg,classes:'alert-danger',duration:2000} );
      })
    }

    //search for surveys
    $scope.searchSurveys = function(tabName) {
      $scope.dsbrdSurvey=[];
      $scope.liveSurveys = [];
      $scope.pausedSurveys = [];
      $scope.closeSurveys = [];
      $scope.draftSurveys = [];

      if(tabName == 'all') {
        $scope.pageNumbers.allTab = 1;
      }
      if(tabName == '22') {
        $scope.pageNumbers.liveTab = 1;
      }
      if(tabName == '33') {
        $scope.pageNumbers.pauseTab = 1;
      }
      if(tabName == '44') {
        $scope.pageNumbers.closedTab = 1;
      }
      if(tabName == '11') {
        $scope.pageNumbers.draftsTab = 1;
      }

      getPaginatedSurveysList(1, tabName, $scope.searchSurvey.query);
      getSurveysCount();
    };

    // For Zipcodees view button
    $scope.showZipCodes = function(surveyID){
      /*PD-655*/
      var url =  base_url+'/getzipcodebysurveyid/?survey_id=' + surveyID;
      window.location.assign(url);
    }

    $scope.inputBocClick = function() {
      angular.element('#fileModel').trigger('click');
    }
    /*
    @ To Upload the reconcilation file for survey reconcile.
    */
    $scope.param = {};
    $scope.uploadBuyerReconciliationFile = function() {
      $scope.loader.show = true;
      $scope.tabs.makeDisable = true; 
      $scope.uploadFile = document.getElementById('fileModel').files[0];
      var regex = new RegExp("(.*?)\.(csv|xlsx|xls)$");
      if($scope.uploadFile) { 
        var fileName = $scope.uploadFile.name;
        if((regex.test(fileName))) {
          createSurvey.uploadReconciliationFile($scope.uploadFile).success(function(res) {
            $scope.loader.show = false;
            $scope.tabs.makeDisable = false;
            delete $scope.param.file;
            $scope.totalFileTrans = res.msg.totalFileTrans;
            $scope.changeToComplt = res.msg.changeToCompltTrans;
            $scope.rejectTrans = res.msg.rejectedTrans;
            $scope.transStatusComplt = res.msg.statusComplt;
            angular.element("input[type='file']").val(null);
            angular.element("input[type='text']").val(null);
            //console.log("res-------", res, res.msg, res.msg.totalFileTrans, res.msg.changeComplt, res.msg.rejectedTransactions)
            if(res.msg != "error") {
              $scope.openModel = angular.element('#reconcileModal');
            }
            if(res.msg == "error") {
              $scope.openModel = angular.element('#reconcileWarnModal');  
            }

            $scope.openModel.modal('show');
          })
          .error(function(err) {
            $scope.loader.show = false;
            delete $scope.param.file;
            $scope.tabs.makeDisable = false;
            angular.element("input[type='file']").val(null);
            angular.element("input[type='text']").val(null);
            if(err.msg == "error") {
              $scope.openModel = angular.element('#reconcileWarnModal');
              $scope.openModel.modal('show');
            }
            else {
              $scope.tabs.makeDisable = false;  
              notify({message: "Something went wrong" , classes:'alert-danger', duration:2000} );
            }
          })
        }
        else {
          $scope.loader.show = false;
          delete $scope.param.file;
          $scope.tabs.makeDisable = false;  
          notify({message:"Please select .csv/.xls/.xlsx file to upload",classes:'alert-danger',duration:2000} );
        }
      }
      else {
        $scope.loader.show = false;
        $scope.tabs.makeDisable = false;  
        notify({message:"First select the file to upload",classes:'alert-danger',duration:2000} );
      }
    }

   /*
   *@ update STC by upload reconcile file trans IDs
   */
    $scope.confirmReconciliation = function() {
        $scope.loader.show = true;
        $scope.tabs = {
          makeDisable : true
        };
        createSurvey.confirmForReconcile().then(
            function(success) {
                $scope.loader.show = false;
                $scope.tabs.makeDisable = false;              
                notify({message: "File upload Reconciliation done successfully", classes:'alert-success', duration:2000} );
            },
            function(error) {
                $scope.loader.show = false;
                $scope.tabs.makeDisable = false;  
                notify({message : err , classes:'alert-danger', duration:2000} );
            }
      );
    }

    /*
     *@ decline reconciliation
     */
    $scope.declineReconciliation = function(){
        $scope.loader.show = true;
       $scope.tabs = {
          makeDisable : true
        };
       createSurvey.declineReconciliationProcess().then(
           function(success){
              $scope.loader.show = false;
               notify({message: "You decline the reconciliation process", classes:'alert-success', duration:2000} );
               $scope.tabs.makeDisable = false;  
           },
           function(error){
              $scope.loader.show = false;
               notify({message : error , classes:'alert-danger', duration:2000} );
               $scope.tabs.makeDisable = false;  
           }
       )

    }

    
    /*Show Date for Reconcile Approve content*/
    getReconcileDate();

    function getReconcileDate() {
        $scope.monthNames = [
          "January", "February", "March",
          "April", "May", "June", "July",
          "August", "September", "October",
          "November", "December"
        ];
        /*********************Current month setting*******************************/ 
        $scope.modDate = new Date();
        $scope.date = $scope.prevDate = new Date($scope.modDate.setMonth($scope.modDate.getMonth() + 1));
        $scope.monthIndex = $scope.date.getMonth();
        $scope.year = $scope.date.getFullYear();
        $scope.leapYear = leapYear($scope.year); 
        if($scope.leapYear) {
          $scope.day = ["31", "29", "31", "30", "31", "30", "31", "31", "30", "31", "30", "31" ]
        }
        $scope.day = ["31", "28", "31", "30", "31", "30", "31", "31", "30", "31", "30", "31" ]

        $scope.currentMonth = $scope.monthNames[$scope.monthIndex] + ' ' + $scope.day[$scope.monthIndex] + ' ' + $scope.year;

        /*********************Previous month setting*******************************/ 
        $scope.prvMOnthObj = new Date();
        $scope.prevDate = new Date($scope.prvMOnthObj.setMonth($scope.prvMOnthObj.getMonth()));
        $scope.prvMonthIndex = $scope.prevDate.getMonth();
        $scope.prvYear = $scope.prevDate.getFullYear();
        $scope.prevMonth = $scope.monthNames[$scope.prvMonthIndex] + ' ' + $scope.day[$scope.prvMonthIndex] + ' ' + $scope.prvYear;
    }

    /*
    * Function to check leap year
    */
    function leapYear(year){
      return ((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0);
    }



    /*
    *Function to clone Live/Paused/close surveys : PD-709
    */
    $rootScope.checkLive_pus_Clone = false;
    $scope.cloneLiveSurvey = function(survey) {
     	  $rootScope.newId = survey.id;
      	$rootScope.clone = true;
        $rootScope.checkLive_pus_Clone = true;
      	$state.go('dynstate', {'id': 'CreateSurveys', 'locale':encodeDecodeFactory.encode(survey.locale)});
    }


     $scope.approveFlg;
    /*
    *Approve all function to reconcile previous month surveys
    */
    $scope.confirmReconciliationMonth = function() {
      $scope.loader.show = true;
      $scope.apprvObj = {
        "survey_id" : $scope.surveyDetails.id
      }
      if($scope.approveFlg == 1) {
        $scope.apprvObj["apprvFlg"] = 1;
      }
      if($scope.approveFlg == 2) {
        $scope.apprvObj["apprvFlg"] = 2;
      }
      createSurvey.approveReconciliationProcess($scope.apprvObj).then(
          function(success) {
            $scope.loader.show = false;  
             if($scope.approveFlg == 1) {
                $scope.availReconcileSurvey.recon_curnt = 0;
             }
             if($scope.approveFlg == 2) {
                 $scope.availReconcileSurvey.recon_pre = 0;
             }
             notify({message : success.data.success , classes:'alert-success', duration:2000} );
          },
          function(error) {
            $scope.loader.show = false;
            notify({message : error , classes:'alert-danger', duration:2000} );
          }
      );
    }


    $scope.getReconciliationCount = function(apprvFlg) {
      $scope.getCount = {};
      $scope.getCount['survey_id'] = $scope.surveyDetails.id;
      $scope.getCount['apprvFlg'] = apprvFlg;
      
      createSurvey.getReconcileCount($scope.getCount).then(
         function(success) {
            $scope.approveFlg = success.data.success.apprvFlg;
            $scope.completeTrans = success.data.success.completeTransList;
            $scope.rejectedTrans = success.data.success.rejectedTransList;
            $scope.statusChangeTrans = success.data.success.statusChangeList;

            $scope.openModel = angular.element('#reconcileApprvModal');
            $scope.openModel.modal('show');
         },
         function(error) {
            notify({message : error , classes:'alert-danger', duration:2000} );
         }
      );
    }
    
    //PD-821, 1100
    /*
    * Function to update all currently open Quota and maximum on basis Number/Percentage type
    */
    $scope.saveCurrentlyOpendata = function(survey_id) {
      $scope.loader.show = true;
      var selectedQuotaArray = [];
      _.each($scope.srvQtaMgeDetails.quotas, function(quotaDetails){
          var matchedQuotasList = _.filter(quotaDetails, function(filterQuota){
            return filterQuota.editCurrntTrgtActive === true;
          });
          if(matchedQuotasList.length > 0) {
            _.each(matchedQuotasList, function(matchList){
                selectedQuotaArray.push(matchList);
            });
          }
      });

      var matchedNestdQuotasList = _.filter($scope.srvQtaMgeDetails.nestedQuotas, function(filterNstQuota){
            return filterNstQuota.editCurrntTrgtActive === true;
          });

      //Handle Advance Targeting PD-1282
      if(_.has($scope.srvQtaMgeDetails, "advanceQuotas")) {
        _.each($scope.srvQtaMgeDetails.advanceQuotas, function(advanceQuota) {
            var findMatcheObject = _.findWhere(advanceQuota, {"editCurrntTrgtActive": true});
            if(findMatcheObject) {
               selectedQuotaArray.push(findMatcheObject);
            }
        })
      }

      //Handle Grouped Quota
      if(_.has($scope.srvQtaMgeDetails, "groupedCatQuotas")) {

        var finadGroupMtchObj = _.where($scope.srvQtaMgeDetails.groupedCatQuotas, {"editCurrntTrgtActive": true}); 
        if(finadGroupMtchObj.length > 0) {
          _.each(finadGroupMtchObj, function(selectedQuota) {
             selectedQuotaArray.push(selectedQuota); 
          })
        }
      }

      $scope.tabs.makeDisable = true;
      if($scope.editCurrentTarget.value && $scope.editCurrentTarget.type && survey_id) {
        var selectedQuotaObj = {
          "survey_id": survey_id,
          "curr_target": $scope.editCurrentTarget.value,
          "type": $scope.editCurrentTarget.type
        };

        if(selectedQuotaArray && matchedNestdQuotasList) {
          var mergedArray = _.union(matchedNestdQuotasList, selectedQuotaArray);
          if(mergedArray.length > 0) {
            selectedQuotaObj.quotas = mergedArray;
          }
        }
        if(selectedQuotaObj && (selectedQuotaObj.hasOwnProperty('quotas') && selectedQuotaObj.quotas.length > 0)) {

          selectedQuotaObj.editType = "groupEdit";
        }
        else {
          selectedQuotaObj.editType = "allEdit";
        }

        createSurvey.updateAllCurrentlyOpenQuota(selectedQuotaObj).then(
              function(updatedData) {
                  $scope.loader.show = false;
                  $scope.tabs.makeDisable = false;
                  $scope.srvQtaMgeDetails = updatedData.data.Quotas[0];
                  selectedQuotaObj = {};
                  selectedQuotaArrayLockUnlock = []
                  $scope.lockUnlockGroupStatus.fadeoptcitylock = false;//PD-1154
                  $scope.lockUnlockGroupStatus.groupLockUnlockStatus = false;
                  if(updatedData.data.msg && updatedData.data.msg != ''){
                    notify({message : updatedData.data.msg , classes:'alert-warning', duration:2000});
                  }
              },
              function(err) {
                $scope.loader.show = false;
                $scope.tabs.makeDisable = false;
                notify({message : err.data.msg , classes:'alert-danger', duration:2000});
              }
          );
      }
      else {
        $scope.loader.show = false;
        $scope.tabs.makeDisable = false;
        notify({message : "Enter currently Open quantity or percentage" , classes:'alert-danger', duration:2000} );
      }
    }
    
    //Check Group Lock/Unlock Quota PD-1100
    /* Function to maintain Selected Quota Array for Group Lock/Unlock
    *{@Parms} surveyID , quotaName(age, gender....etc.), unique_id(quey id) 
    */
    var selectedQuotaArrayLockUnlock = [];
    $scope.checkGroupLockUnlockQuotaStatus = function(survey_id, quotaName, unique_id) {
      var selectedQuotaArray = [];
      _.each($scope.srvQtaMgeDetails.quotas, function(quotaDetails){
          var matchedQuotasList = _.filter(quotaDetails, function(filterQuota){
            if(filterQuota.editCurrntTrgtActive === true && unique_id ==        filterQuota.unique_id) {
               filterQuota.quota = quotaName;
            }
            return filterQuota.editCurrntTrgtActive === true;
          });
          if(matchedQuotasList.length > 0) {
            _.each(matchedQuotasList, function(matchList){
                selectedQuotaArray.push(matchList);
            });
          }
      });

      var matchedNestdQuotasList = _.filter($scope.srvQtaMgeDetails.nestedQuotas, function(filterNstQuota){
            if(filterNstQuota.editCurrntTrgtActive === true && unique_id ==filterNstQuota.unique_id) {
               filterNstQuota.quota = quotaName;
            }
            return filterNstQuota.editCurrntTrgtActive === true;
      });
     
      //Handle Advance Targeting PD-1282
      if(_.has($scope.srvQtaMgeDetails, "advanceQuotas")) {
        _.each($scope.srvQtaMgeDetails.advanceQuotas, function(advanceQuota) {
            var findMatcheObject = _.findWhere(advanceQuota, {"editCurrntTrgtActive": true});
            if(findMatcheObject) {
               findMatcheObject.quota = quotaName;
               selectedQuotaArray.push(findMatcheObject);
            }
        })
      }

      //Handle Grouped Quota
      if(_.has($scope.srvQtaMgeDetails, "groupedCatQuotas")) {
        
        var finadGroupMtchObj = _.where($scope.srvQtaMgeDetails.groupedCatQuotas, {"editCurrntTrgtActive": true});
        if(finadGroupMtchObj.length > 0) {
          _.each(finadGroupMtchObj, function(selectedQuota) {
            selectedQuota.quota = quotaName;
              selectedQuotaArray.push(selectedQuota);
          })
        }

      }
      
      var mergedArray = _.union(matchedNestdQuotasList, selectedQuotaArray);
      selectedQuotaArrayLockUnlock = mergedArray; //Insert selected quota array 
      var handleAllUnlock = [];
      var handleAllLok = [];
      if(mergedArray.length > 0) {
          handleAllUnlock = _.filter(mergedArray, function(filterLockUnlock){
            return filterLockUnlock.locked === false;
          });

          handleAllLok = _.filter(mergedArray, function(filterLockUnlock){
            return filterLockUnlock.locked === true;
          });
      }
      
      if(handleAllUnlock.length === mergedArray.length) {
          $scope.lockUnlockGroupStatus.groupLockUnlockStatus = false;
          $scope.lockUnlockGroupStatus.fadeoptcitylock = true;//PD-1154
      }
      else if(handleAllUnlock.length > 0 && handleAllLok.length > 0) {
          $scope.lockUnlockGroupStatus.groupLockUnlockStatus = false;
          $scope.lockUnlockGroupStatus.fadeoptcitylock = true;//PD-1154
      }
      else {
        if(handleAllLok.length === mergedArray.length)
          $scope.lockUnlockGroupStatus.groupLockUnlockStatus = true;
      }
       
       //PD-1154
      if(handleAllUnlock.length === 0 && mergedArray.length === 0) {
        $scope.lockUnlockGroupStatus.fadeoptcitylock = false;
      }
    }

    /*Function to Lock/Unlock Group quota
    *{@params} survey_id Unique Id of survey
    */
    $scope.updateLockUnlockQuotaGroup = function(survey_id) {
      $scope.loader.show = true;
      $scope.tabs.makeDisable = true;
       if(selectedQuotaArrayLockUnlock.length > 0) {
        var updateObjData = {
           survey_id : survey_id,
           group_data : selectedQuotaArrayLockUnlock
        }
         if($scope.lockUnlockGroupStatus.groupLockUnlockStatus) {
            updateObjData.updateLock = false;
         }
         else {
            updateObjData.updateLock = true;
         }
         createSurvey.lockUnlockGroupQuota(updateObjData).then(
              function(updatedData) {
                  $scope.loader.show = false;
                  $scope.tabs.makeDisable = false;
                  $scope.srvQtaMgeDetails = updatedData.data.Quotas[0];
                  if(updatedData.data.msg && updatedData.data.msg != ''){
                    notify({message : updatedData.data.msg , classes:'alert-success', duration:2000});
                  }
                  $scope.lockUnlockGroupStatus.groupLockUnlockStatus = false;
                  selectedQuotaArrayLockUnlock = [];
                  $scope.lockUnlockGroupStatus.fadeoptcitylock = false;//PD-1154
              },
              function(err) {
                $scope.loader.show = false;
                $scope.tabs.makeDisable = false;
                notify({message : err.data.msg , classes:'alert-danger', duration:2000});
              }
          );
       }
       else {
        $scope.loader.show = false;
        $scope.tabs.makeDisable = false;
          notify({message : "Please Select the Quota to Lock/Unlock" , classes:'alert-warning', duration:2000});
       }
    }
    //Avoid to select row on click lock/unlock
    $scope.avoidClick = function( e ) { 
       e.stopPropagation();
    }
    $scope.openZipcodesGroupModal = function(srv_id, buyer_ziplist_ref, name){
      console.log('name ',name);
      $scope.loader.show = true;
      $scope.zipcodeDetails = {'zipcode': 'Loading...', 'groupNo':''};
      postCode.getZipcodes(srv_id, buyer_ziplist_ref).success(function(response){
        $scope.loader.show = false;
        if(response.apiStatus == 200 && response.result && response.result[0].values.length > 0){
          $timeout(function(){
            $scope.zipcodeDetails = {
              'zipcode': $filter('convertArrToStr')(response.result[0].values),
              'groupNo' : name
            }
          },100);
        }else{
          $scope.zipcodeDetails = {'zipcode': '', 'groupNo':''};
          notify({message : "No Zipcode Found" , classes:'alert-warning', duration:2000});
        }
      }).error(function(err){
          $scope.loader.show = false;
          $scope.zipcodeDetails = {'zipcode': '', 'groupNo':''};
          notify({message : "Unable to fetch zipcodes" , classes:'alert-warning', duration:2000});
      });
    }

    
    function extractAutoNestedQuota(autoNestedQuotas) {
        //console.log("autoNestedQuotas "+JSON.stringify(autoNestedQuotas));
        if (autoNestedQuotas.length > 0) {
            _.each(autoNestedQuotas, function(nestedQuotas) {
                if(nestedQuotas.combinedOptions && nestedQuotas.combinedOptions.length){
                    _.each(nestedQuotas.combinedOptions, function(singleOpt){
                        //check for duplicates
                        var existIndex = _.findIndex($scope.nestedQuotasQualName, {"quotaname": singleOpt.q_name, "qualID": singleOpt.q_id});
                        if(existIndex != -1){
                            if(singleOpt.id){
                                var idArr = $scope.nestedQuotasQualName[existIndex].id;
                                idArr.push(singleOpt.id);
                                $scope.nestedQuotasQualName[existIndex].id = _.sortBy(_.uniq(idArr));

                            }else if(singleOpt.from){
                                var fromArr = $scope.nestedQuotasQualName[existIndex].from;
                                fromArr.push(singleOpt.from);
                                $scope.nestedQuotasQualName[existIndex].from = _.sortBy(_.uniq(fromArr));
                            }
                        }else{
                            var nestedQualObj = {};
                            nestedQualObj['quotaname'] = singleOpt.q_name;
                            nestedQualObj['qualID'] = singleOpt.q_id;
                            if(singleOpt.id){
                                nestedQualObj['id'] = [singleOpt.id];
                            }else{
                                nestedQualObj['from'] = [singleOpt.from];
                            }
                            $scope.nestedQuotasQualName.push(nestedQualObj);
                        }
                    })
                }
            })
            $scope.nestedQuotasQualName.unshift({"quotaname":'all'});
        }
    } 

    $scope.filterNestedQuotaByQualification = function(sortQuotaDetail) {
       
       var tempNestedSortArr = [];
       if(_.has($scope.srvQtaMgeDetails, "nestedQuotas") && allCaseSortNestedQuota.length > 0 && sortQuotaDetail.quotaname != "all" && sortQuotaDetail.quotaname) {
        if(sortQuotaDetail.quotaname == "age" || sortQuotaDetail.quotaname == "houseHoldIncome" || sortQuotaDetail.quotaname == "child_age") {
            _.each(sortQuotaDetail.from, function(fromRange) {
                _.each(allCaseSortNestedQuota, function(nestedQuota) {
                    var matchQualId = _.findWhere(nestedQuota.combinedOptions, {"q_id": sortQuotaDetail.qualID, "from": fromRange});
                    if(matchQualId) {
                       tempNestedSortArr.push(nestedQuota);
                    }
                })
            })
        }
        else {
           _.each(sortQuotaDetail.id, function(quotaID) {
                _.each(allCaseSortNestedQuota, function(nestedQuota) {
                    var matchQualId = _.findWhere(nestedQuota.combinedOptions, {"q_id": sortQuotaDetail.qualID, "id": quotaID});
                    if(matchQualId) {
                       tempNestedSortArr.push(nestedQuota);
                    }
                })
            })
        }
         tempNestedSortArr = _.uniq(tempNestedSortArr);
         $scope.srvQtaMgeDetails.nestedQuotas = tempNestedSortArr;
       }
       else {
        
        if(allCaseSortNestedQuota.length > 0) {
          $scope.srvQtaMgeDetails.nestedQuotas = allCaseSortNestedQuota;
        }
       }

       $scope.defaultActiveNestedBtn = sortQuotaDetail.quotaname;
    }
    
    //PD-1332
    $scope.showAccordianQuota = {
      current: null
    };

    $scope.checkExpendStatus = function(event) {
      var checkCloseStatus = angular.element(event.currentTarget).hasClass('fa fa-chevron-down rotate down')
      if(checkCloseStatus) {
         $scope.showAccordianQuota.current = null;
      }
    }

    // get survey activity logs

    $scope.getActivityLogs = (surveyId) => {
      $scope.loader = {show: true};
      $scope.isExist = false;
      $scope.showActivities = [];
      createSurvey.getSurveyActivityLogs(surveyId).then((response) => {
        if (!_.isNull(response['data']) && !_.isEmpty(response['data'])){
          $scope.activities = response['data']['activities'];
          if ($scope.activities && $scope.activities.length) {
            angular.forEach($scope.activities, (activity) => {
              let activityDate = new Date(activity['timestamp']);
              let dateString = $filter('date')(activityDate, 'EEEE, MMMM d');
              let timeString = $filter('date')(activityDate, 'HH:mm');
              if (userData['operatorAcssLvls'] != 'none') {
                $scope.showActivities.push({
                  activityString: activity['username'] + ' ' + activity['message'],
                  timeString: dateString + ' @ ' + timeString
                });
              } else if (userData['buyerAcssLvls'] === 'admin') {
                if (activity['buyerAdmin']) {
                  $scope.showActivities.push({
                    activityString: activity['username'] + ' ' + activity['message'],
                    timeString: dateString + ' @ ' + timeString
                  });
                }
              } else if (userData['buyerAcssLvls'] === 'full' && activity['buyerFull'] && userData['eml'] === activity['user_email']) {
                $scope.showActivities.push({
                  activityString: activity['username'] + ' ' + activity['message'],
                  timeString: dateString + '@' + timeString
                });

              }
            });
            
            if ($scope.showActivities.length) {
              $scope.isExist = true;
            }
          }
         
        } 
          $scope.loader = {show: false};
        
      }, (error) => {
        $scope.loader = {show: false};
        console.log("error : ", error);
      })
    }



    // add activity notes

    $scope.addActivityNotes = () => {
      $scope.showActivtityInputBox = true;
    }
    $scope.cancelAcitivityNotes = () => {
      $scope.showActivtityInputBox = false;
    }

    // save activity notes

    $scope.saveAcitivityNotes = (survey_id, msg) => {
      let timestamp = Date.now();
      let activityPayload = {
        survey_id: survey_id,
        user_id: userData['id'],
        user_email: userData['eml'],
        username: userData['usrName'],
        message: 'has added ' + msg,
        type: 'Manual Edit',
        timestamp: timestamp,
        isExpire: false,
        eventHandler: 'user',
        userCmp: userData['cmp'],
        isVisible: true,
        operatorAccess: true,
        buyerAdmin: false,
        buyerFull: false

      };
      createSurvey.addActivityNote(activityPayload).then((response) => {
  
      $scope.showActivtityInputBox = false;
      let activityDate = new Date(timestamp);
      let dateString = $filter('date')(activityDate, 'EEEE, MMMM d');
      let timeString = $filter('date')(activityDate, 'HH:mm');
      $scope.showActivities.unshift({
        activityString: activityPayload['username'] + ' ' + activityPayload['message'],
        timeString: dateString + ' @ ' + timeString
      });
      if ($scope.showActivities.length) {
        $scope.isExist = true;
      }
      },(error) => {
        console.log("error : ", error);
        $scope.showActivtityInputBox = false;
      })
    }


    function setLocationViews(countryCode) {
        var locationViews = {
            "US" :{
                "netrep": {
                    "name":"Nat Rep",
                    "isVisible":true,
                },
                "region": {
                    "name":"Census Region",
                    "isVisible":true,
                },
                "regions": {
                    "name":"Census Region",
                    "isVisible":true,
                },
                "division": {
                    "name":"Census Division",
                    "isVisible":true,
                },
                "divisions": {
                    "name":"Census Division",
                    "isVisible":true,
                },
                "state": {
                    "name":"State",
                    "isVisible":true,
                },
                "states": {
                    "name":"State",
                    "isVisible":true,
                },
                "dma": {
                    "name":"DMA",
                    "isVisible":true,
                },
                "csa": {
                    "name":"CSA",
                    "isVisible":true,
                },
                "msa": {
                    "name":"MSA",
                    "isVisible":true,
                },
                "county": {
                    "name":"County",
                    "isVisible":true,
                },
                "zipcode": {
                    "name":"Zipcode",
                    "isVisible":true,
                },
                "zipcodes": {
                    "name":"Zipcode",
                    "isVisible":true,
                }
            },
            "CA" :{
                "netrep": {
                    "name":"Nat Rep",
                    "isVisible":false,
                },
                "region": {
                    "name":"Census Region",
                    "isVisible":false,
                },
                "regions": {
                    "name":"Census Region",
                    "isVisible":false,
                },
                "state": {
                    "name":"Province",
                    "isVisible":true,
                },
                "states": {
                    "name":"Province",
                    "isVisible":true,
                },
                "zipcode": {
                    "name":"Postal Codes",
                    "isVisible":true,
                },
                "zipcodes": {
                    "name":"Postal Codes",
                    "isVisible":true,
                }
            },
            "IN" :{
                "netrep": {
                    "name":"Nat Rep",
                    "isVisible":false,
                },
                "state": {
                    "name":"State",
                    "isVisible":true,
                },
                "states": {
                    "name":"State",
                    "isVisible":true,
                },
                "zipcode": {
                    "name":"Pin Codes",
                    "isVisible":true,
                },
                "zipcodes": {
                    "name":"Pin Codes",
                    "isVisible":true,
                },
                "dma": {
                    "name":"District",
                    "isVisible":true,
                }
            },
            "UK" :{
                "netrep": {
                    "name":"Nat Rep",
                    "isVisible":false,
                },
                "regions": {
                    "name":"UK Region",
                    "isVisible":true,
                },
                "state": {
                    "name":"State",
                    "isVisible":false,
                },
                "zipcode": {
                    "name":"Postcodes",
                    "isVisible":true,
                },
                "zipcodes": {
                    "name":"Postcodes",
                    "isVisible":true,
                },
                "dma": {
                    "name":"District",
                    "isVisible":false,
                }
            }
        };
        $scope.locationViews = locationViews[countryCode];
    }

    $scope.getLocName = function(locName){
      return $scope.locationViews[locName].name;
    }

}]);

psApp.controller('decipherCtrl', ['$scope', '$http', '$state', '$rootScope', '$window', 'config', 'commonApi', 'createSurvey', 'notify', 'user', 'localStorageService', '$stateParams', '$timeout','$translate', '$location', '$filter', 'decipherService', 'buyerSettingService', function($scope, $http, $state, $rootScope, $window, config, commonApi, createSurvey, notify, user, localStorageService, $stateParams, $timeout, $translate, $location, $filter, decipherService, buyerSettingService) {

    var userData = localStorageService.get('logedInUser');
    console.log('userData ',userData);
    $scope.userDetail = {eml:userData.eml}
    $scope.properties = new Object();
    $scope.showList = false;
    var masterData = new Array();
    var buyerDetails = new Array();
    var indexNumber = {'language': new Number, 'country': new Number()};
    var currencyFx = new Object();
    //Flag used to show quotas after Next buttom
    $scope.showQuota = false;
    $scope.showMap = false;

    $scope.loader = {show: false};//PD-955
    /*--- Show Loader on every http request----*/
    $rootScope.$on('loading:progress', function (){
        $scope.loader.show = true;//PD-955
    });

    $rootScope.$on('loading:finish', function (){
        $scope.loader.show = false;//PD-955
    });
    /*--- Show Loader on every http request----*/

    /*$scope.$watch('masterDataService.get()', function (newValue, oldValue, scope) {
	    //Do anything with $scope.letters
	    console.log('\n\n newValue ',newValue);
	});*/
	/*$timeout(function(){
		masterData = masterDataService.get();
		console.log('\n\n masterData>>>> ',masterData);
	}, 2000);*/
    
	getMasterData();
    getCountries();
    getSampleTitle();
    getBuyerSetting();

    function getBuyerSetting(){
    	//console.log('$scope.userDetail.cmp ',$scope.userDetail);
    	buyerSettingService.getSetting(userData.cmp).then(function(response){
    		if(response && response.data && response.data.apiStatus == 'success'){
    			buyerDetails = response.data.buyer;
    			$scope.properties.uri = buyerDetails.decipherObj[0].selectedURI;
    			$scope.properties.directory = buyerDetails.decipherObj[0].directory_name;
    			console.log('$scope.properties ',JSON.stringify($scope.properties));
    			getTitle();
    		}	
    	}, function(err){
    		console.log('err ',JSON.stringify(err));
    	});
    }
    //Get MasterData
	function getMasterData(){
		createSurvey.getMasterDataByCountryLang().then(
	      function(response){
	        if(response && response.data && response.data.apiStatus == "Success"){
	        	masterData = response.data.values;
	        }
	    }, function(err){
	        console.log('Error Fetching MaterData ',JSON.stringify(err));
	    })
    };


    var selctdCountry = {};
    $scope.setLanguage = function(id) {
        //$scope.properties.language = id;
        if($scope.lang.length > 0) {
            $scope.lang.forEach(function(singleLang){
                if(singleLang.id !== undefined && singleLang.id == id && singleLang.short_code !== undefined) {
                	$scope.properties.survey_localization = singleLang.transalte_code+"_"+$scope.countryCode;
                	indexNumber.language = singleLang.id;
                    //$scope.properties.languageCode = singleLang.short_code;
                    //$scope.properties.languageName = singleLang.name;
                    document.getElementById("languagedrop").innerHTML = singleLang.name; //update value in UI
                    //$scope.properties.languageTranslate = singleLang.transalte_code;
                    $translate.use($scope.properties.languageTranslate);
                    $scope.getCpi();
                }
            })
        }
    }

    var setSelectedCountry = function(item) {
        $scope.lngFlag = true;
        /*$scope.properties.country = item.id;
        $scope.properties.countryCode = item.short_Code;
        $scope.properties.countryName =  item.name;*/
        
        $timeout(function() {
            $scope.countryValue = item.name;
            $scope.countryCode = item.short_Code;
            indexNumber.country = item.id;
        },0);
        

        commonApi.getLanguageByCountry(item.id).success(function(data) {
            //$scope.languageValue = 'Select Language';
            $scope.lang = [];
            // $scope.properties.countryCode = data.short_Code;
            //$scope.properties.countryName =  data.name;
            if (data && data.languages && data.languages.length > 0) {

                //$scope.lang.concat(data.languages.values[0].lang);
                $scope.lang = data.languages;
                $scope.setLanguage(data.languages[0].id);

                $scope.disableQualification = false;
                //getMasterDataByCountryLang($scope.properties.countryCode, data.languages[0].short_code);
                //optionsToDisplay($scope.properties.countryCode);
            }
        }).error(function(err) {
            notify({
                message: "Something went wrong in fetching Languages",
                classes: 'alert-danger',
                duration: 2000
            });
        });

        selctdCountry = {};
    }

    $scope.setCountry = function(event, item) {
        event.preventDefault();
        event.stopPropagation();
        selctdCountry = item;

        if($scope.checkDirty) {
            if($scope.properties.country != item.id) {
                $timeout(function() {
                    angular.element('#cntryModal').trigger('click');
                },0);
            }else{
                setSelectedCountry(item);
            }
        }else {
            setSelectedCountry(item);
        }
        angular.element('#Survey_Country').attr('aria-expanded','false');
        angular.element('#Survey_Country').parent('.dropdown').removeClass('open');
        //clear selected locations
    };

    $scope.setCountrySelected = function() {
        if(selctdCountry && selctdCountry.id) {
            setSelectedCountry(selctdCountry);
            // resetSurveyData();
            $scope.checkDirty = false;
        }
    };

    function getCountries() {
        $scope.country = new Array();
        commonApi.countries().success(function(data) {
            if (data.countries != null) {
                var arr1 = new Array();
                var arr2 = new Array();
                // For making US Canada at top and other are in alphabetical order
                    angular.forEach(data.countries.values, function(value){
                        if(value.short_Code == 'US' || value.short_Code == 'CA'){
                            arr1.push(value);
                        }else{
                            arr2.push(value);
                        }
                    });
                    arr1 = $filter('orderBy')(arr1, '-name');
                    arr2 = $filter('orderBy')(arr2, 'name');
                $scope.country = _.union(arr1, arr2);
                //console.log('$scope.country '+JSON.stringify($scope.country));
                $scope.app.country = data.countries.values;
                var countryDt = data.countries.values[0];
                if($location.search().locale !== undefined) {
                    countryDt = _.findWhere(data.countries.values, {short_Code : surveyLocale.countryCode});
                }
                setSelectedCountry(countryDt);
            }
        }).error(function(err) {
            notify({
                message: "Something went wrong in fetching coutries",
                classes: 'alert-danger',
                duration: 2000
            });
        });
    }

    $scope.getCpi = function(){
    	if(indexNumber.language && indexNumber.country && $scope.properties.expected_loi && $scope.properties.expected_ir){

    		createSurvey.getSurveyHeaderValue(indexNumber.language, indexNumber.country, $scope.properties.expected_loi, $scope.properties.expected_ir).success(function(data) {
    			if(data && data.apiStatus && data.apiStatus == "success"){
    				$scope.properties.offer_price = data.CPI;
    				currencyFx = data.currencyFx;
    			}
    		}).error(function(err){
    			console.log("Error in calculating CPI ",err);
    		})
    		// Check All fields filled to show Condition Map
    		// Also check that Title is selected from the list
    		console.log('titleDetail ',JSON.stringify(titleDetail));
    		var checkValidTitle = _.findIndex(titleDetail, {"title":$scope.properties.survey_title});
    		if(checkValidTitle != -1 && $scope.properties.survey_title && $scope.properties.completes_required && $scope.properties.field_time){
    			$scope.showMap = true;
    		}
    	}else{
    		console.log('All Values are not avialble to calculate Cpi');
    	}
    }

    function getSampleTitle() {
        commonApi.samples().success(function(data) {
            if (data.sample != null) {
                $scope.samples = data.sample.values;
                $scope.app.samples = data.sample.values;
            }
        }).error(function(err) {
            notify({
                message: "Something went wrong in fetching samples",
                classes: 'alert-danger',
                duration: 2000
            });
        });
    }

    $scope.setSample = function(data){
    	$scope.samplesValue = data.name;
    	$scope.properties.survey_category_code = data.id;
    }

    var titleDetail = new Array();
    function getTitle(){
    	//var cmp_id = userData.cmp;
    	var cmp_id = 1;
    	console.log('$scope.properties ',JSON.stringify($scope.properties));
    	decipherService.getTitle($scope.properties.uri, $scope.properties.directory).then(
	    	function(response){
	    		console.log('response ',JSON.stringify(response));
	    		if(response && response.data && response.data.apiStatus == "Success"){
	    			titleDetail = response.data.data;
	    		}
	    }, function(err){
	    	console.log('err ',err);
	    })
    };

    $scope.titleSearch = function(str){
    	console.log('str ',str);
    	if(str){
	    	$scope.titleDetail = _.filter(titleDetail, function(item){
	    		return item.title.toLowerCase().indexOf(str.toLowerCase()) != -1;
	    	})
	    	//console.log('titleDetail ',JSON.stringify(titleDetail));
	    	//console.log('\n\n $scope.titleDetail ',JSON.stringify($scope.titleDetail));
	    }else{
	    	$scope.titleDetail = angular.copy(titleDetail);
	    }
    	$scope.showList = $scope.titleDetail.length > 0 ? true:false;
    }

    $scope.uncheckQual = function(item){
    	console.log('item ',JSON.stringify(item));
    	console.log('$scope.defines ',JSON.stringify($scope.defines));
    	$scope.loader.show = true;
    	//console.log('indexInDefines ',indexInDefines);
    	if(item.isChecked){
    		item.isChecked = false;
    		//var indexInDefines = _.findIndex($scope.defines, {"decipherKey":item.deciQual+'.'+item.conditions[0].deciCondCode});
    		//$scope.defines.splice(indexInDefines, 1);
    		if(item.conditions){
	    		_.each(item.conditions, function(singleCondition){
	    			$scope.defines = _.without($scope.defines, _.findWhere($scope.defines, {
							  	"decipherKey": item.deciQual+'.'+singleCondition.deciCondCode
							}));
	    		})
	    	}
    		console.log('$scope.defines removed ',JSON.stringify($scope.defines));
    		//$scope.defines[indexInDefines].isChecked = false;
    	}else{
			item.isChecked = true;
			console.log('item ',JSON.stringify(item));
			if(item.conditions[0].value.indexOf('-') == -1){
				_.each(item.conditions, function(singleCondition){
					$scope.defines.push({
						"decipherKey": item.deciQual+'.'+singleCondition.deciCondCode,
						"value": singleCondition.value,
						"markerKey": singleCondition.markerKey,
						"goal": parseInt(singleCondition.goal),
						"locked": false,
						"current_target": parseInt(singleCondition.goal),
						"psQualCode": parseInt(item.psQualCode),
						"condition_codes":[
							singleCondition.psCondCode
						]
					})
				})
			}else{
				_.each(item.conditions, function(singleRange){
					var range = singleRange.value.split('-');
					$scope.defines.push({
						"decipherKey": item.deciQual+'.'+singleRange.deciCondCode,
						"value": singleRange.value,
						"markerKey": singleRange.markerKey,
						"goal": parseInt(singleRange.goal),
						"locked": false,
						"current_target": parseInt(singleRange.goal),
						"psQualCode": parseInt(item.psQualCode),
						"range_sets":[{
							"units": 311,
							"from":parseInt(range[0]),
							"to":parseInt(range[1])
						}]
					})
				})
			}
			//$scope.defines[indexInDefines].isChecked = true;
			console.log('$scope.defines added ',JSON.stringify($scope.defines));
    	}
    	$scope.loader.show = false;
    }

    $scope.defines = new Array();
    $scope.definesForView = new Array();
    //$scope.quotaView = new Array();

    $scope.titleClick = function(item){
    	$scope.properties.survey_title = item.title;
    	$scope.properties.path = item.path;
    	
    	decipherService.getQuotas($scope.properties.uri, item.path).then(
    		function(response){
    			if(response && response.data && response.data.apiStatus == "Success"){
    				console.log('response ',JSON.stringify(response));
    				$scope.defines = response.data.defines;
    				/*$scope.defines = [
				        {
				            "decipherKey": "Q4.r2",
				            "value": "18-24",
				            "markerKey": "vqO36",
				            "goal": 179
				        },
				        {
				            "decipherKey": "Q3.r1",
				            "value": "Male",
				            "markerKey": "YFuXl",
				            "goal": 637
				        },
				        {
				            "decipherKey": "Q4.r3",
				            "value": "25-44",
				            "markerKey": "h2WcC",
				            "goal": 644
				        },
				        {
				            "decipherKey": "Q3.r2",
				            "value": "Female",
				            "markerKey": "duyvU",
				            "goal": 630
				        },
				        {
				            "decipherKey": "Q4.r5 or Q4.r6",
				            "value": "45-64",
				            "markerKey": "DOF8i",
				            "goal": 444
				        }
				    ];*/
    				// Create a array to show defines on view
    				_.each($scope.defines, function(item){
    					console.log('item ',JSON.stringify(item.decipherKey));
    					console.log('buyerDetails.decipherObj[0].selectedQualification ',JSON.stringify(buyerDetails.decipherObj[0].selectedQualification));
    					// To remove or conditons from decipherKey
    					if(item.decipherKey.indexOf('or') != -1){
    						var newKey = item.decipherKey.split('or');
    						console.log('newKey 1 ',newKey);
    						newKey = newKey[0].toString().replace(/\s/g, "");
    						console.log('newKey 2 ',newKey);
    						item.decipherKey = newKey;
    						console.log('decipherKey 3 ',item.decipherKey);
    					}

    					var condition = item.decipherKey.split('.');
    					var deciQualCode = condition[0];
    					var deciCondCode = condition[1];

    					//find pskey using decipherKey from buyerSettings
    					//console.log('buyerDetails.decipherObj[0].selectedQualification ',JSON.stringify(buyerDetails.decipherObj[0].selectedQualification));
    					var psKey = _.findWhere(buyerDetails.decipherObj[0].selectedQualification, {'decipherCode': item.decipherKey});
    					console.log('psKey ',psKey);
    					psKey = psKey.psCode.split('.');
    					var psQualCode = psKey[0];
    					var psCondCode = psKey[1];
    					var psQualName = _.findWhere(masterData, {id: parseInt(psKey[0])}).masterKey; 

    					//Adding value in Quota Array need to create Survey
    					item['locked'] = false;
    					item['current_target'] = item.goal;
    					item['psQualCode'] = parseInt(psQualCode);
    					if(psCondCode.indexOf('-') == -1){
    						item['condition_codes'] = new Array();
    						item.condition_codes.push(psCondCode.toString());
    					}else{
    						var range = psCondCode.split('-');
    						item['range_sets'] = new Array();
    						item.range_sets.push({
    							"units":311,
								"from":parseInt(range[0]),
								"to":parseInt(range[1])
    						});
    					}

    					//console.log('psQualName ',psQualName);

    					var qualExist = _.findIndex($scope.definesForView, {'deciQual':deciQualCode});
    					if(qualExist == -1){
    						$scope.definesForView.push({
    							'deciQual':deciQualCode,
    							'psQualName': psQualName,
    							'psQualCode': psQualCode,
    							'isChecked' : true,
    							'conditions' : [{
    								'deciCondCode':deciCondCode,
    								'psCondCode':psCondCode,
    								'markerKey': item.markerKey,
    								'goal':item.goal,
    								'value':item.value
    							}]
    						})
    					}else{
    						// Check if the Qual Exist then Add the condition Code
    						var condExist = _.findIndex($scope.definesForView[qualExist].conditions, {'deciQual':deciQualCode});
    						if(condExist == -1){
    							$scope.definesForView[qualExist].conditions.push({
    								'deciCondCode':deciCondCode,
    								'psCondCode':psCondCode,
    								'markerKey': item.markerKey,
    								'goal':item.goal,
    								'value':item.value
    							})
    						}else{
    							console.log('No need to add QualCode');
    						}
    					}

    					// Quota View
    					/*var quotaExist = _.findIndex($scope.quotaView, {'markerKey':item.markerKey});
    					if(quotaExist == -1){
    						$scope.quotaView.push({
    							"markerKey":item.markerKey,
    							"value": item.value,
    							"goal" : item.goal,
    							"current_target" : item.goal
    						});
    					}*/

    				});
    				console.log('$scope.definesForView ',JSON.stringify($scope.definesForView));
    			}
    			$scope.getCpi();
    			//$scope.loader.show = false;
    	}, function(err){
    		console.log('err in Fetching Quotas ',err);
    		//$scope.loader.show = false;
    	});
    	$scope.showList = false;

    }

    $scope.openMappingModal = function(qualDetail){
    	$scope.decModalData = qualDetail;
    }

    $scope.clearModalData = function(){
    	$scope.decModalData = {};
    }

    $scope.showQuotaView = function(){
    	$scope.showQuota = !$scope.showQuota;
    }

    $scope.lockQuotaImg = "../../img/lock.png";
    $scope.unLockQuotaImg = "../../img/unlock.png";
    $scope.lockQuota = function(item){
    	if(item.locked){
	    	item.locked = false;
	    	item.current_target = item.goal;
	    }else{
	    	item.locked = true;
	    	item.current_target = 0;
	    }
    }

    $scope.saveSurvey = function(){
    	$scope.loader.show = true;//PD-955
    	console.log('$scope.defines ',JSON.stringify($scope.defines));
    	var tempDefine = new Array();
    	_.each($scope.defines, function(item){
    		var singleObj = new Object();
    		singleObj[item.decipherKey.toString()] = item.value;
    		singleObj['markerKey'] = item.markerKey;
    		singleObj['goal'] = item.goal;
    		singleObj['qualification_code'] = item.psQualCode;
    		if(item.condition_codes){
    			singleObj['condition_codes'] = item.condition_codes;
    		}else if(item.range_sets){
    			singleObj['range_sets'] = item.range_sets;
    		}
    		console.log('singleObj ',JSON.stringify(singleObj));
    		tempDefine.push(singleObj);
    	});
    	$scope.properties['defines'] = tempDefine;
    	// Converting string value to Int
    	$scope.properties.completes_required = parseInt($scope.properties.completes_required);
    	$scope.properties.expected_ir = parseInt($scope.properties.completes_required);
    	$scope.properties.expected_loi = parseInt($scope.properties.completes_required);

    	console.log('$scope.properties ',JSON.stringify($scope.properties));

    	decipherService.createSurvey($scope.properties).success(function(response){
    		if(response && response.apiStatus == 'Success'){
    			$state.go('choosesuppliers', {
                    surveyid: response.ps_survey_id
                });
                $scope.loader.show = false;//PD-955
                notify({message: "Survey Created Successfully", classes: 'alert-success', duration: 2000});
    		}
    	}).error(function(err){
    		console.log('Error in Creating Survey ',err);
    		notify({message: "Error in Saving Survey", classes: 'alert-danger', duration: 2000});
    	})

    }

}]);
angular.module('pureSpectrumApp')
    .controller('forgotPasswordCtrl',['$scope','localStorageService','$http','$state','user','authenticationService','notify','companyService','ngProgressLite','vcRecaptchaService','config',function($scope, localStorageService, $http, $state, user, authenticationService, notify, companyService, ngProgressLite, vcRecaptchaService,config){
        $scope.forgotPasswordObj ={};
        $scope.forgotPasswordObj.noOfAttempt = 0;
        
        $scope.publicKey = config.CAPTCHA_KEY;

        $scope.disableDiv = false;
        $scope.submitEmail = function() {
            if( $scope.forgotPasswordObj.noOfAttempt >= 5 ){
                $scope.disableDiv = true;
                 notify({message:"You have attempted 5 times. Please try again after sometimes ",classes:'alert-danger',duration:3000} ); 
            }else{
                ngProgressLite.start();
            if(vcRecaptchaService.getResponse() === ""){ //if string is empty
                notify({message:"Please resolve the captcha and submit!",classes:'alert-danger',duration:3000} ); 
            }else{
            user.checkForgotPasswordEmail($scope.forgotPasswordObj.email).success(function (data) {
                 notify({message:data.msg,classes:'alert-success',duration:3000} ); 
            }).error(function (err) {
                $scope.forgotPasswordObj.noOfAttempt +=1;
                   notify({message:err.msg,classes:'alert-danger',duration:3000} ); 
            });
            }
                ngProgressLite.done();
            }
            
        }
    }]);


/**
 * Created by Parveen on 3/7/2016.
 */
angular.module('pureSpectrumApp')
    .controller('indexController',['$scope','$http','$state','$cookies','$window','config',function($scope, $http, $state, $cookies ,$window, config){

    }]);
angular.module('pureSpectrumApp')
    .controller('invalidPassLnkCtrl',['$scope','$state','$stateParams',function($scope, $state, $stateParams){
        
        $scope.cnnfgVal = $stateParams.locked;
        if($scope.cnnfgVal === "lock") {
        	$scope.showFlglock = true;
        	$scope.showFlgInvld = false;

        }
        if($scope.cnnfgVal === "expirelink") {
        	$scope.showFlglock = false;
        	$scope.showFlgInvld = true;
        }
        console.log("$scope.hideFlg", $scope.cnnfgVal)

        $scope.bckLoginPage = function() {
            $state.go('login');
        }
    }]);

    //PD-344


/**
*choose supplier controller
*/
angular.module('pureSpectrumApp')
    .controller('launchSurveyCtrl',['$scope','$http','$state', '$stateParams', '$cookies','$window','config','commonApi','createSurvey','companyService','notify','user','localStorageService','ngProgressLite', '$filter','$rootScope','buyerSettingService', '$timeout', '$q', 'encodeDecodeFactory', 'Upload', function($scope, $http, $state, $stateParams, $cookies, $window, config, commonApi, createSurvey, companyService, notify, user, localStorageService, ngProgressLite, $filter, $rootScope, buyerSettingService, $timeout, $q, encodeDecodeFactory, Upload){

        var userData = localStorageService.get('logedInUser');
        $scope.loader = {show: false}; //PD-955
        /*--- Show Loader on every http request----*/
        $rootScope.$on('loading:progress', function (){
            $scope.loader.show = true;//PD-955
        });

        $rootScope.$on('loading:finish', function (){
            $scope.loader.show = false;//PD-955
        });
        /*--- Show Loader on every http request----*/
        getSurveyData();
        $scope.srvId = $stateParams.surveyid;
        $scope.finalSurvey = {};
        $scope.oldLaunchVal = '';
        
        // Manage Edit
        $scope.manageEdit = false;
        if($stateParams.edit == 'editStep3'){
            $scope.manageEdit = true;
        }
        $scope.headerValues = {
            completes: 0,
            cpi: 0,
            total: 0,
            field_time:0
        };
        $scope.surveyData = [];
        $scope.finalSurvey.survey_grouping = [];
        $scope.categoryExclusion = "";
        $scope.maxprogressSt = {
            maxprogress_st: false,
            maxinProgressNo: 0
        }

        $scope.launchquantity = 0;
        $scope.launchpercentile = 0;

        $scope.currency_symbol = '$';
        $scope.currencyFx = {fx: 321,symbol: '$'};

        $scope.pdfurl = "/files/BuyerRedirectGuideV2.pdf";
        $scope.field_time = 0;

        $scope.categoryExc = [];
        $scope.catEx = {};
        $scope.surveyExclusion = false;
        //PD-1236
        $scope.disableAutoMapping = {
            IsURLTransform: false,
            visibleTransfrmUrl: false,
            visibleBuyerClient : false,
            visibleMaxInProgress : false
        }; 

        var psidDataArr = new Array();//Include/Exclude PSID Array
        var suppliers = new Array();   // To check length before launch
        //PD-1096
        if(config.app == "pureSpectrumApp-Prod" && _.contains(config.enableUrlTranfrmUsr, userData.cmp)) {
            $scope.disableAutoMapping.visibleTransfrmUrl = true;
        }

        if(config.app == "pureSpectrumApp-Prod" && _.contains(config.buyerClient, userData.cmp)) {
            $scope.disableAutoMapping.visibleBuyerClient = true;
        }

        if(config.app == "pureSpectrumApp-Dev" || config.app == "pureSpectrumApp-Staging") {
            $scope.disableAutoMapping.visibleTransfrmUrl = true;
            $scope.disableAutoMapping.visibleBuyerClient = true;
        }

        //PD-1360
        if((config.app == "pureSpectrumApp-Prod" || config.app == "pureSpectrumApp-Staging") && _.contains(config.maxinProgress, userData.cmp)) {
            $scope.disableAutoMapping.visibleMaxInProgress = true;
        }

        if(config.app == "pureSpectrumApp-Dev") {
            $scope.disableAutoMapping.visibleMaxInProgress = true;
        }
        
        //PD-260
        $scope.buyerSettings = {};
        getBuyerInfo(userData.cmp);

        //Regular expression for match transaction in Live&Test URL
        var regexAmprsnd = new RegExp("\\&transaction_id", "g");
        var regexQustionMrk = new RegExp("\\?transaction_id", "g");

        $scope.enableInclExcl = false;

        if (_.contains(config.incl_excl, userData.cmp) || userData.operatorAcssLvls == 'admin' || config.incl_excl.length == 0) {
            $scope.enableInclExcl = true;
        }

        $scope.$watch('finalSurvey.liveUrl', function (newValue, oldValue, scope) {
            $scope.warningFlg = false;
            //Do anything with $scope.finalSurvey.liveUrl
            if(typeof newValue === 'undefined' || newValue === '' || newValue === 'null') {
                $scope.finalSurvey.liveUrlTT = 'Please enter your Survey URL to check its final form.';
            } else {
                var operationalBuyerUrl = getOperationalBuyerUrl(newValue, $scope.buyerSettings, 0);
                $scope.finalSurvey.liveUrlTT = 'Your URL settings transform the Entry URL into: \n\n '+operationalBuyerUrl;
            }
            if($scope.finalSurvey.liveUrl != undefined && $scope.finalSurvey.liveUrl != null && $scope.finalSurvey.liveUrl != ''){

                if($scope.finalSurvey.liveUrl.search(regexAmprsnd) != -1) {
                    $scope.warningFlg = true;
                    $scope.splitUrl = $scope.finalSurvey.liveUrl.split("transaction_id=");
                    if($scope.splitUrl[1]) {
                        $scope.trans_id = "&transaction_id=" +$scope.splitUrl[1];
                    }
                    else {
                        $scope.trans_id = "&transaction_id=";
                    }
                }
                else {
                    if($scope.finalSurvey.liveUrl.search(regexQustionMrk) != -1) {
                        $scope.warningFlg = true;
                        $scope.splitUrl = $scope.finalSurvey.liveUrl.split("transaction_id=");
                        if($scope.splitUrl[1]) {
                            $scope.trans_id = "&transaction_id=" +$scope.splitUrl[1];
                        }
                        else {
                            $scope.trans_id = "&transaction_id=";
                        }
                    }
                }
                $scope.finalSurvey.liveWarningMsg = "We think there's an issue with your URL. Please remove the portion that reads " + '"'+ $scope.trans_id + '"' + "\n\n.\n\nIf you are certain that your link is okay as is, please continue.";
                
                $scope.liveUrlCheck = $scope.finalSurvey.liveUrl.endsWith('=') || $scope.finalSurvey.liveUrl.indexOf(''+$scope.checkWithUserUrl+'') !== -1;
            }
        });

        $scope.$watch('finalSurvey.testUrl', function (newValue, oldValue, scope) {
            $scope.warningTestFlg = false;
            //Do anything with $scope.finalSurvey.testUrl
            if(typeof newValue === 'undefined' || newValue === '' || newValue === 'null') {
                $scope.finalSurvey.testUrlTT = 'Your TEST URL is empty, we will use your LIVE URL as the TEST URL. Please add a TEST URL if it is different than the LIVE URL.';
            } else {
                var operationalBuyerUrl = getOperationalBuyerUrl(newValue, $scope.buyerSettings , 1);
                $scope.finalSurvey.testUrlTT = 'Your URL settings transform the Entry URL into: \n\n '+operationalBuyerUrl;
            }
            if($scope.finalSurvey.testUrl != undefined && $scope.finalSurvey.testUrl != null && $scope.finalSurvey.testUrl != ''){

                if($scope.finalSurvey.testUrl.search(regexAmprsnd) != -1) {
                    $scope.warningTestFlg = true;
                    $scope.splitUrl = $scope.finalSurvey.testUrl.split("transaction_id=");
                    if($scope.splitUrl[1]) {
                        $scope.trans_id = "&transaction_id=" +$scope.splitUrl[1];
                    }
                    else {
                        $scope.trans_id = "&transaction_id=";
                    }
                }
                else {
                    if($scope.finalSurvey.testUrl.search(regexQustionMrk) != -1) {
                        $scope.warningTestFlg = true;
                        $scope.splitUrl = $scope.finalSurvey.testUrl.split("transaction_id=");
                        if($scope.splitUrl[1]) {
                            $scope.trans_id = "&transaction_id=" +$scope.splitUrl[1];
                        }
                        else {
                            $scope.trans_id = "&transaction_id=";
                        }
                    }
                }

                $scope.finalSurvey.testWarningMsg = "We think there's an issue with your URL. Please remove the portion that reads " + '"'+ $scope.trans_id + '"' + "\n\n.\n\nIf you are certain that your link is okay as is, please continue.";
                $scope.testUrlCheck = $scope.finalSurvey.testUrl.endsWith('=') || $scope.finalSurvey.testUrl.indexOf(''+$scope.checkWithUserUrl+'') !== -1;
            }
        });


        var getOperationalBuyerUrl = function(url, buyerSettings, isTest) {

            if(typeof $scope.buyerSettings.ps_transaction !== 'undefined' && $scope.buyerSettings.ps_transaction !== ''){
                url = getQueryStringUrl(url);
                url += $scope.buyerSettings.ps_transaction+' = [%ps_transaction_id%]';
            } else {
                url = getQueryStringUrl(url);
                url += 'transaction_id = [%ps_transaction_id%]';
            }

            if(typeof $scope.buyerSettings.ps_psid !== 'undefined' && $scope.buyerSettings.ps_psid !== ''){
                url = getQueryStringUrl(url);
                url += $scope.buyerSettings.ps_psid+' = [%psid%]';
            }

            if(typeof $scope.buyerSettings.ps_status !== 'undefined' && $scope.buyerSettings.ps_status !== ''){
                url = getQueryStringUrl(url);
                url += $scope.buyerSettings.ps_status+' = [%st%]';
            }

            if(typeof $scope.buyerSettings.ps_hash !== 'undefined' && $scope.buyerSettings.ps_hash !== ''){
                url = getQueryStringUrl(url);
                url += $scope.buyerSettings.ps_hash+' = [%ps_hash%]';
            }

            // code is commented for now will use it letter

            if(typeof $scope.buyerSettings.ps_transaction_id2 !== 'undefined' && $scope.buyerSettings.ps_transaction_id2 !== ''){
                url = getQueryStringUrl(url);
                url += $scope.buyerSettings.ps_transaction_id2+' = [%ps_transaction_id%]';
            }

            if(typeof $scope.buyerSettings.ps_transaction_id3 !== 'undefined' && $scope.buyerSettings.ps_transaction_id3 !== ''){
                url = getQueryStringUrl(url);
                url += $scope.buyerSettings.ps_transaction_id3+' = [%ps_transaction_id%]';
            }
            if(typeof $scope.buyerSettings.ps_transaction_id4 !== 'undefined' && $scope.buyerSettings.ps_transaction_id4 !== ''){
                url = getQueryStringUrl(url);
                url += $scope.buyerSettings.ps_transaction_id4+' = [%ps_transaction_id%]';
            }

            // added supplier_id to buyer url

            if(typeof $scope.buyerSettings.ps_supplier_id !== 'undefined' && $scope.buyerSettings.ps_supplier_id !== ''){
                url = getQueryStringUrl(url);
                url += $scope.buyerSettings.ps_supplier_id+' = [%ps_supplier_id%]';
            }

            /*if(isTest) {
                url = getQueryStringUrl(url);
                url += 'ps_test = 1';
            }*/
            return url;

        }

        var getQueryStringUrl = function(url){
            if(url != '' && url != undefined && url != null){
                if (url.search(/^http[s]?\:\//) == -1) {
                    url = 'http://' + url;
                }
                var re = /[?]/;
                var result = url.match(re);
                if(result && result[0] == '?'){
                    var lastChar = url.charAt(url.length - 1);
                    if(lastChar=='?'){
                        url =  url;
                    }
                    if(lastChar!='&'){
                        url =  url + '&';
                    }
                    else{
                        url =  url ;
                    }
                   return url;
                }
                else{
                    url = url+'?';
                    return url;
                }
            }
        }


        function getBuyerInfo(id){
            //$scope.loader.show = true; //PD-955
            buyerSettingService.getSetting(id).success(function (data) {
                if(data.apiStatus){
                    if(data.buyer.variable_mapping){
                        for(var i = 0; i < data.buyer.variable_mapping.length; i++) {
                            for(var j in data.buyer.variable_mapping[i]) {
                                if(j == "ps_transaction") {
                                    $scope.buyerSettings.ps_transaction = data.buyer.variable_mapping[i][j].outgoing;
                                }
                                if(j == "ps_psid") {
                                    $scope.buyerSettings.ps_psid = data.buyer.variable_mapping[i][j].outgoing;
                                }
                                if(j == "ps_status") {
                                    $scope.buyerSettings.ps_status = data.buyer.variable_mapping[i][j].outgoing;
                                }
                                if(j == "ps_hash") {
                                    $scope.buyerSettings.ps_hash = data.buyer.variable_mapping[i][j].outgoing;
                                }
                                if(j == "ps_transaction_id2") {
                                    $scope.buyerSettings.ps_transaction_id2 = data.buyer.variable_mapping[i][j].outgoing;
                                }
                                if(j == "ps_transaction_id3") {
                                    $scope.buyerSettings.ps_transaction_id3 = data.buyer.variable_mapping[i][j].outgoing;
                                }
                                if(j == "ps_transaction_id4") {
                                    $scope.buyerSettings.ps_transaction_id4 = data.buyer.variable_mapping[i][j].outgoing;
                                }
                                if(j == "ps_supplier_id") {
                                    $scope.buyerSettings.ps_supplier_id = data.buyer.variable_mapping[i][j].outgoing;
                                }
                            
                            }
                        }
                    }

                    $scope.checkWithUserUrl = $scope.buyerSettings.ps_transaction+'=';
                    
                    if($scope.finalSurvey.liveUrl !== undefined && $scope.finalSurvey.liveUrl !== null && $scope.finalSurvey.liveUrl !== "") {
                        var operationalBuyerUrl = getOperationalBuyerUrl($scope.finalSurvey.liveUrl, $scope.buyerSettings, 0);
                        $scope.finalSurvey.liveUrlTT = 'Your URL settings transform the Entry URL into: \n\n '+operationalBuyerUrl;
                    } else {
                        $scope.finalSurvey.liveUrlTT = 'Please enter your Survey URL to check its final form.';
                    }

                    if($scope.finalSurvey.testUrl !== undefined && $scope.finalSurvey.testUrl !== null && $scope.finalSurvey.testUrl !== "") {
                        var operationalBuyerUrl = getOperationalBuyerUrl($scope.finalSurvey.testUrl, $scope.buyerSettings, 1);
                        $scope.finalSurvey.testUrlTT = 'Your URL settings transform the Entry URL into: \n\n '+operationalBuyerUrl;
                    } else {
                        $scope.finalSurvey.testUrlTT = 'Your TEST URL is empty, we will use your LIVE URL as the TEST URL. Please add a TEST URL if it is different than the LIVE URL.';
                    }
                    //$scope.loader.show = false;//PD-955

                }
            }).error(function (err) {
                //$scope.loader.show = false;//PD-955
                notify({message:err.msg,classes:'alert-danger',duration:2000} );
            })
        }

        //PD-260 End

        //PD-1253
        $scope.checkBilling = function() {
            $scope.finalSurvey.survey_po = "";
        }
        // end PD-1253

        //get survey data
        function getSurveyData() {
            //$scope.loader.show = true;//PD-955
            var id = $rootScope.clone && $rootScope.newId != undefined && $rootScope.newId != null && $rootScope.newId != "" ? $rootScope.newId : $stateParams.surveyid;
            createSurvey.getSurveyById(id).success(function (data){
                //Remove Old CPI for Live Clone
                if($rootScope.clone && $scope.checkLive_pus_Clone) {
                    data.survey[0].cpi = $scope.liveCloneCPI;
                }
                $scope.survey_locale = encodeDecodeFactory.encode(data.survey[0].locale); // set for footer updatesurvey fn 
                $scope.headerValues.completes = data.survey[0].number;
                $scope.headerValues.cpi = data.survey[0].cpi;
                $scope.headerValues.field_time = data.survey[0].field_time;
                $scope.clickBalance = data.survey[0].clickBalance;
                $scope.estmClicks = data.survey[0].estmClicks;

                if(data.survey[0].currencyFx && data.survey[0].currencyFx.symbol) {
                    $scope.currency_symbol = data.survey[0].currencyFx.symbol;
                    $scope.currencyFx = data.survey[0].currencyFx;
                }
                
                $scope.surveyData = data.survey;
                calculateTotalCost();
                getSampleTitle();
                //$scope.field_time = data.survey[0].field_time;
                $scope.fldOverTime = data.survey[0].fldOverTime;
                $scope.launchquantity = data.survey[0].launchQuantity;
                $scope.launchpercentile = data.survey[0].launchPercentile;
                $scope.softlaunchno = data.survey[0].softLaunch;
                $scope.finalSurvey.softLaunchOldVal = data.survey[0].softLaunch;
                $scope.finalSurvey.oldLaunchQuantity = data.survey[0].launchQuantity;
                $scope.maxprogressSt.maxprogress_st = data.survey[0].maxInPrgs; //PD-952
                $scope.finalSurvey.oldMaxProgressVal = data.survey[0].maxInPrgs;
                $scope.maxprogressSt.maxinProgressNo = data.survey[0].maxInPrgsNo; //PD-952
                $scope.finalSurvey.oldMaxProgressQuantity = data.survey[0].maxInPrgsNo;
                $scope.finalSurvey.liveUrl = data.survey[0].liveUrl;
                $scope.finalSurvey.testUrl = data.survey[0].testUrl;
                $scope.finalSurvey.oldLiveUrl = data.survey[0].liveUrl;
                $scope.finalSurvey.oldTestUrl = data.survey[0].testUrl;
                $scope.finalSurvey.buyerMsg = data.survey[0].buyerMsg; //pd-782
                $scope.finalSurvey.oldBuyerMsg = data.survey[0].buyerMsg;
                $scope.finalSurvey.teamMember = data.survey[0].teamMember;
                $scope.finalSurvey.incl_excl = data.survey[0].incl_excl;
                $scope.finalSurvey.hasPSIDRefList = data.survey[0].hasPSIDRefList || false;
                if($rootScope.clone && $scope.checkLive_pus_Clone) {
                    $scope.finalSurvey.hasPSIDRefList = false;
                }
                // to check length before launch
                suppliers = data.survey[0].supplier;
                //PD-1236
                if(_.has(data.survey[0], "IsURLTransform") ) {
                    $scope.disableAutoMapping.IsURLTransform = data.survey[0].IsURLTransform;
                }
                $scope.finalSurvey.survey_grouping = data.survey[0].survey_grouping;
                $scope.finalSurvey.oldSurveyGrouping = data.survey[0].survey_grouping;

                //PD-1253
                if($rootScope.clone && $scope.checkLive_pus_Clone) {
                    $scope.openModel = angular.element('#billingModal');
                    $scope.openModel.modal({
                        backdrop: 'static',
                        keyboard: false 
                    });
                    $scope.finalSurvey.survey_po = (data.survey[0].survey_po != undefined && data.survey[0].survey_po != null && data.survey[0].survey_po != "") ? data.survey[0].survey_po : "PS" + id;     
                    $scope.finalSurvey.oldSurvey_po = (data.survey[0].survey_po != undefined && data.survey[0].survey_po != null && data.survey[0].survey_po != "") ? data.survey[0].survey_po : "PS" + id;     

                }
                else {
                    $scope.finalSurvey.survey_po = (data.survey[0].survey_po != undefined && data.survey[0].survey_po != null && data.survey[0].survey_po != "") ? data.survey[0].survey_po : "";
                    $scope.finalSurvey.oldSurvey_po = (data.survey[0].survey_po != undefined && data.survey[0].survey_po != null && data.survey[0].survey_po != "") ? data.survey[0].survey_po : "";
                }

                //PD-1468
                /*$scope.finalSurvey.survey_external_id = (data.survey[0].survey_external_id != undefined && data.survey[0].survey_external_id != null && data.survey[0].survey_external_id != "") ? data.survey[0].survey_external_id : "";*/
                generateEntryLink(data.survey[0].liveUrl , data.survey[0].field_time);
                $scope.finalSurvey.surveyStatus = data.survey[0].status;
		        $scope.finalSurvey.surveyClient = data.survey[0].surveyClient;//pd-822
                $scope.finalSurvey.oldSurveyClient = data.survey[0].surveyClient;

                $scope.survey_locale = encodeDecodeFactory.encode(data.survey[0].locale);

                if(data.survey[0].catExcl.length>0){
                    for(var i in data.survey[0].catExcl){
                         if(data.survey[0].catExcl[i].id == 1){
                             $scope.completed = true;
                            $scope.catEx.Completed = data.survey[0].catExcl[i].time;
                         }
                        if(data.survey[0].catExcl[i].id == 2){
                            $scope.started = true;
                            $scope.catEx.Started = data.survey[0].catExcl[i].time;
                        }
                        if(data.survey[0].catExcl[i].id == 3){
                            $scope.Quota_Full = true;
                            $scope.catEx.QuotaFull = data.survey[0].catExcl[i].time;
                        }
                    }
                }
                //$scope.loader.show = false;//PD-955

                //getSurveyHeaderPricingValue(data.survey[0].language, data.survey[0].country, data.survey[0].lengthOfSurvey, data.survey[0].incidence);
            }).error( function (err){
                //$scope.loader.show = false;//PD-955
                notify({message:err.msg,classes:'alert-danger',duration:2000} );
            })
        }

        function getSurveyHeaderPricingValue(lang,ctry,LOI,incd){
            createSurvey.getSurveyHeaderValue(lang,ctry,LOI,incd, $stateParams.surveyid).success(function (data) {
                if(data.CPI){
                    var tmpCpi = parseFloat(data.CPI).toFixed(2);
                    $scope.headerValues.cpi = (tmpCpi*100)/100;
                    if($scope.headerValues.completes && $scope.headerValues.cpi){
                        calculateTotalCost();
                    }
                    else{
                        $scope.total=0;
                    }
                }
            }).error(function (err) {
                notify({message:err.msg,classes:'alert-danger',duration:2000} );
            })
        }

        function calculateTotalCost(){
            var tol = ($scope.headerValues.completes*$scope.headerValues.cpi);
            $scope.headerValues.total = parseFloat(tol).toFixed(2);
        }

        function getSampleTitle(){
            ngProgressLite.start();
            commonApi.samples().success(function(data){
                ngProgressLite.done();
                if(data.sample!=null) {
                    $scope.samples = data.sample.values;
                    getCategoryEx(data.sample.values);
                }
            }).error(function(err){
                notify({message:err.msg,classes:'alert-danger',duration:2000} );
            })
        }

        function getCategoryEx(data) {
            for(var i=0; i<data.length; i++) {
                if(data[i].id == $scope.surveyData[0].samplesType) {
                    $scope.categoryExclusion = data[i].name;
                }
            }
        }

        $scope.launchquantityChange = function(){
            $scope.launchpercentile = Math.round(($scope.launchquantity * 100) / $scope.headerValues.completes);
            //$scope.launchpercentiles = $filter('number')($scope.launchpercentile, 2);
        }

        $scope.launchpercentileChange = function(){
            $scope.launchquantity = Math.round(($scope.launchpercentile * $scope.headerValues.completes) / 100);
            //$scope.launchquantity = $filter('number')($scope.launchquantity, 2);
        }
     

        $scope.catExStartedTime = function (value) {
           $scope.catExStarted = value;
            if(value){
                $scope.catEx[0].time = value;
            }
        }

        $scope.getCatExcComplete = function (value,id) {
            if(value == true){
                $scope.categoryExc.push({"id":id,"time":"7 days"});
            }

            if(value == false){
                for(var i in $scope.categoryExc){
                    if($scope.categoryExc[i].id == id){
                        $scope.categoryExc.splice(i,1);
                    }
                }
            }
        }

        $scope.getCatExcStarted = function (value,id) {
            if(value == true){
                $scope.categoryExc.push({"id":id,"time":"30 days"});
            }

            if(value == false){
                for(var i in $scope.categoryExc){
                    if($scope.categoryExc[i].id == id){
                        $scope.categoryExc.splice(i,1);
                    }
                }
            }
        }

        $scope.getCatExcQuota = function (value,id) {
            if(value == true){
                $scope.categoryExc.push({"id":id,"time" : "90 days"});
            }

            if(value == false){
                for(var i in $scope.categoryExc){
                    if($scope.categoryExc[i].id == id){
                        $scope.categoryExc.splice(i,1);
                    }
                }
            }
        }

        $scope.catExCompletedTime = function (value,id){
            if(value){
                $scope.catEx.Completed = value;
                for(var i in $scope.categoryExc){
                    if($scope.categoryExc[i].id == id){
                        $scope.categoryExc[i].time = value;
                    }
                }
            }
        }

        $scope.catExStartedTime = function (value,id){
            if(value){
                $scope.catEx.Started = value;
                for(var i in $scope.categoryExc){
                    if($scope.categoryExc[i].id == id){
                        $scope.categoryExc[i].time = value;
                    }
                }
            }
        }

        $scope.catExQuotaTime = function (value,id){
            if(value){
                $scope.catEx.QuotaFull = value;
                for(var i in $scope.categoryExc){
                    if($scope.categoryExc[i].id == id){
                        $scope.categoryExc[i].time = value;
                    }
                }
            }
        }

        $scope.showLoader = ''; // Variable for Disabling Next Page Button Until Api Calls Finishes
        $scope.saveSurvey = function (status, test) {
            $scope.showLoader = 'DataLoading';
            if($scope.surveyExclusion){
               notify({message:"Not a valid number in survey_grouping",classes:'alert-danger',duration:2000} );
               $scope.showLoader = '';
                return false;
            }
            
      
            $scope.finalSurvey.survey_id = $stateParams.surveyid;
            $scope.finalSurvey.catExcl = $scope.categoryExc;
            $scope.finalSurvey.softLaunch = $scope.softlaunchno || false;
            $scope.finalSurvey.maxInPrgs = $scope.maxprogressSt.maxprogress_st || false; //PD-952
            $scope.finalSurvey.maxInPrgsNo = $scope.maxprogressSt.maxinProgressNo; //PD-952
            $scope.finalSurvey.IsURLTransform = $scope.disableAutoMapping.IsURLTransform; //PD-1236

            if(parseInt($scope.launchpercentile) > 100 || $scope.launchquantity > $scope.surveyData[0].number) {
                notify({message:"Soft launch cannot exceed total completes. Please check Soft Launch and try again.",classes:'alert-danger',duration:2000} );
                $scope.showLoader = '';
                return false;
            }
            $scope.finalSurvey.launchPercentile = $scope.launchpercentile;
            $scope.finalSurvey.launchQuantity = $scope.launchquantity;
            //$scope.finalSurvey.field_time = $scope.field_time || 0;
            $scope.finalSurvey.fldOverTime = $scope.fldOverTime || false;
            $scope.finalSurvey.cpi = $scope.headerValues.cpi;

            //$scope.finalSurvey.psid_ref_file = $scope.psidRefFile;
            //PD-1277
            if(!$scope.finalSurvey.survey_po){
                $scope.finalSurvey.survey_po = "PS" + $stateParams.surveyid;
            }

            //PD-1378
           if(_.has($scope.finalSurvey, "isTest")) {
              delete $scope.finalSurvey.isTest;
           }
             
            if(status === 'final'){
                //var time = new Date();
                // check suppliers before launch
                if(suppliers == undefined || suppliers == null || suppliers == ''){
                    console.log('no suppliers');
                    notify({message:'Please add suppliers before launch', classes:'alert-danger',duration:2000} );
                    return false;
                }
                if(status === 'save' && $scope.finalSurvey.surveyStatus != undefined && $scope.finalSurvey.surveyStatus != null && $scope.finalSurvey.surveyStatus != "" && $scope.finalSurvey.surveyStatus != 22) {
                    $scope.finalSurvey.st = 11;
                }
                else{
                    $scope.finalSurvey.st = 22;
                }
                //$scope.finalSurvey.End_Date = time.setDate(time.getDate()+ parseInt($scope.field_time));
                createSurvey.updateSurveyLaunch($scope.finalSurvey).success(function (data) {
                    $rootScope.clone = false;
                    $scope.showLoader = '';
                    notify({message:data.msg,classes:'alert-success',duration:2000} );
                    if(status === 'final' && $scope.finalSurvey.surveyStatus != undefined && $scope.finalSurvey.surveyStatus != null && $scope.finalSurvey.surveyStatus != "" && $scope.finalSurvey.surveyStatus != 22){
                        $state.go('home');
                    }
                    /*PD-709*/
                    if(status === 'final' && ($scope.finalSurvey.surveyStatus == 22 || $scope.finalSurvey.surveyStatus == 33 || $scope.finalSurvey.surveyStatus == 34)) {
                        $state.go('home');
                    }
                    

                }).error(function (err) {
                    $scope.showLoader = '';
                    notify({message:err.msg,classes:'alert-danger',duration:2000} );
                })
            }
            
            //PD-1325 implemented "saveOnClose"
            if(status == 'goToManageSurvey' || status === 'saveAndNew' || status === 'saveAndClone' || status === 'save' || status === 'saveOnClose' || status === 'switchBreadcrumbMenu'){
                //var time = new Date();
               // $scope.finalSurvey.End_Date = time.setDate(time.getDate()+ parseInt($scope.field_time)); // this is added to fix the field time issue
                if(status === 'saveOnClose' || status === 'switchBreadcrumbMenu') {
                  $scope.finalSurvey.st = 11;
                  if(!$scope.finalSurvey.liveUrl) {
                    if(status === 'saveOnClose') {
                        $state.go('home');
                    }
                    return;
                  }
                }

                createSurvey.updateSurveyFromManageStep3($stateParams.surveyid, $scope.finalSurvey).success(function(data) {
                    //console.log(data);
                    $scope.showLoader = '';
                    ngProgressLite.done();
                    if(status === 'saveAndNew' || status === 'saveAndClone' || status === 'save' || status === 'saveOnClose' || status === 'switchBreadcrumbMenu'){
                        if(status === 'save') {
                            notify({message:'Survey Saved',classes:'alert-success',duration:2000} );
                            $rootScope.clone = false;
                            $rootScope.newId = "";
                            //$state.go('dynstate', {id: 'CreateSurveys'}); 
                        }else if(status === 'saveAndNew') {
                            notify({message:'Survey Saved',classes:'alert-success',duration:2000} );
                            $rootScope.clone = false;
                            $rootScope.newId = "";
                            $state.go('dynstate', {id: 'CreateSurveys'}); 
                        } else if(status === 'saveAndClone') {
                            notify({message:'Survey Saved',classes:'alert-success',duration:2000} );
                            $rootScope.newId = $stateParams.surveyid;
                            $rootScope.clone = true;
                            $state.go('dynstate', {id: 'CreateSurveys', 'locale':$scope.survey_locale});
                        }
                        else {
                            if(status === 'saveOnClose') {
                                $state.go('home');
                            }
                        } 
                    }
                    else{
                       notify({message:data.msg,classes:'alert-success',duration:2000} );
                       $state.go('editSurvey', {key: $stateParams.surveyid});
                   }
                }).error(function (err) {
                    $scope.showLoader = '';
                    notify({message:err.msg,classes:'alert-danger',duration:2000} );
                })
            }
        }


        

        function generateEntryLink(liveUrl , field_time){
            var link = '';
            var testLink ='';
            if(liveUrl && field_time){
                link = config.pureSpecturm.url+'/startsurvey-'+$scope.surveyData[0].locale.countryCode.toLowerCase()+'?survey_id='+ $stateParams.surveyid + '&supplier_id=?';
                testLink = config.pureSpecturm.url+'/startsurvey?survey_id='+ $stateParams.surveyid + '&ps_redirect_test=1&bsec='+config.BSEC+'&supplier_id=';
                if(config.app == "pureSpectrumApp-Staging"){
                   testLink = testLink + 26;
                }else{
                    testLink = testLink + 23;
                }

                $scope.entryLink = link;
                $scope.testEntryLink = testLink;

            }
            else{
                $scope.entryLink = link;
                $scope.testEntryLink = testLink;
            }

        }

        $scope.getLiveUrl = function (url) {
           generateEntryLink(url , $scope.field_time);
        }

        $scope.getFieldTime = function (ftime) {
           generateEntryLink($scope.finalSurvey.liveUrl, ftime);
        }

        $scope.saveSurveyOnTestLink = function(status, test) {
            var deferred = $q.defer();
            if($scope.surveyExclusion){
                deferred.reject("Not a valid number in survey_grouping");
            }
            $scope.finalSurvey.survey_id = $stateParams.surveyid;
            $scope.finalSurvey.catExcl = $scope.categoryExc;
            $scope.finalSurvey.softLaunch = $scope.softlaunchno || false;
            $scope.finalSurvey.softLaunchOldVal = $scope.softLaunchOldVal;
            $scope.finalSurvey.oldLiveUrl = $scope.oldLiveUrl;
            $scope.finalSurvey.oldTestUrl = $scope.oldTestUrl;
            $scope.finalSurvey.oldSurveyGrouping = $scope.oldSurveyGrouping;
            $scope.finalSurvey.maxInPrgs = $scope.maxprogressSt.maxprogress_st || false; //PD-952
            $scope.finalSurvey.maxInPrgsNo = $scope.maxprogressSt.maxinProgressNo; //PD-952

            if(parseInt($scope.launchpercentile) > 100 || $scope.launchquantity > $scope.surveyData[0].number) {
                deferred.reject("Soft launch cannot exceed total completes. Please check Soft Launch and try again.");
            }
            $scope.finalSurvey.launchPercentile = $scope.launchpercentile;
            $scope.finalSurvey.launchQuantity = $scope.launchquantity;
            //$scope.finalSurvey.field_time = $scope.field_time || 0;
            $scope.finalSurvey.fldOverTime = $scope.fldOverTime || false;
            $scope.finalSurvey.cpi = $scope.headerValues.cpi;
            //PD-1378
            $scope.finalSurvey.isTest = test;
            
            createSurvey.updateSurveyFromManageStep3($stateParams.surveyid, $scope.finalSurvey).success(function(data) {
                $rootScope.clone = false;
                $rootScope.newId = "";
                deferred.resolve('Survey Saved');
            }).error(function (err) {
                deferred.reject(err.msg);
            })
            // promise is returned
            return deferred.promise;
        }

        $scope.openTab = function (url) {
            ngProgressLite.start();
            $scope.showLoader = 'DataLoading';
            if(url !=''){
                $scope.saveSurveyOnTestLink('save' , 'test').then(function(data) {
                    console.log("saveSurveyOnTestLink success "+JSON.stringify(data));
                    $scope.showLoader = '';
                    ngProgressLite.done();
                    $window.open(url, '_blank');
                    notify({message:'Survey Saved',classes:'alert-success',duration:2000} );
                    //$state.go('dynstate', {id: 'CreateSurveys'}); 
                }).catch(function (err) {
                    console.log("saveSurveyOnTestLink err "+JSON.stringify(err));
                    $scope.showLoader = '';
                    ngProgressLite.done();
                    notify({message:err,classes:'alert-danger',duration:2000} );
                })
            } else {
                $scope.showLoader = '';
                ngProgressLite.done();
                notify({message:'URL not exist',classes:'alert-danger',duration:2000} );
            }
        }

        $scope.closeManage = function(key){
            $state.go('editSurvey', {key: key});
        }
        $scope.clearFields = function() {
            $rootScope.$emit("CallMethod", {});
        }
        $scope.getId = function() {
            $rootScope.newId = $stateParams.surveyid;
            $rootScope.clone = true;
        }

        $scope.validateNumber = function(elm){ 
            if((elm.which >= 65 && elm.which <= 90) || (elm.shiftKey && elm.which >= 48 && elm.which <= 57)){
                //console.log("this is not a valid numbers");
               $scope.surveyExclusion = true;
            }else{
                $scope.surveyExclusion = false;
            }

            for(var i in $scope.finalSurvey.survey_grouping){
              if(isNaN($scope.finalSurvey.survey_grouping[i])){
                $scope.surveyExclusion = true;
                break;
              }
            }
        }

        //PSID file upload
        $scope.uploadPsidFile = function(file, event) {
            //console.log('file ',file);

            if (file != null && file != undefined && file.name && (file.name.indexOf('.csv') > 0 || file.name.indexOf('.xlsx') > 0 || file.name.indexOf('.xls')) > 0) {
                $scope.psidRefFile = file;
                createSurvey.uploadPSIDRefFile($stateParams.surveyid, $scope.psidRefFile).success(function(data) {
                    $scope.finalSurvey.hasPSIDRefList = true;
                    event.preventDefault();
                    notify({
                        message:'File uploaded successfully',
                        classes:'alert-success',
                        duration:2000
                    });                        
                }).error(function(err) {
                    notify({
                        message: err.msg,
                        classes: 'alert-danger',
                        duration: 5000
                    });
                })
            } else if(event.type == 'change') {
                notify({
                    message: "Your Upload Failed. Please Check Your File And Try Again",
                    classes: 'alert-danger',
                    duration: 5000
                });
            }
        }; 


        //view latest upload zipcodes
        $scope.viewLatestPsids = function() {
            //Cleaning the p tag before appending psid data
            var myEl = angular.element( document.querySelector( '#view-psids' ) );
            myEl.empty();
            //read psid from the path in the file
            createSurvey.viewLatestUploadedPSID(parseInt($stateParams.surveyid), parseInt($scope.finalSurvey.incl_excl)).then(
            function(response) {
                var psidDataArr = response.data.psids;
                var divel = document.getElementById('view-psids');
                divel.appendChild(document.createTextNode(psidDataArr)); 
            },
            function(error) {
                notify({
                    message: error.data.msg || "error getting psid",
                    classes: 'alert-success',
                    duration: 2000
                });
            });
        };


        //clear file Uploaded PSIDs
        $scope.clearUploadPsids = function() {
            psidDataArr = [];
            createSurvey.clearUploadedPSIDs(parseInt($stateParams.surveyid)).then(
            function(response) {
                $scope.finalSurvey.hasPSIDRefList = false;
                notify({
                    message: "PSIDs cleared successfully",
                    classes: 'alert-success',
                    duration: 2000
                });
            },
            function(error) {
                //console.log("error ",error)
                notify({
                    message: error.data.msg || "error while removing psid",
                    classes: 'alert-success',
                    duration: 2000
                });
            });
        };

        $scope.chgeInclExcl = function(flagValue){
            if(flagValue == 1){
                $scope.finalSurvey.survey_grouping = '';
            }
        }


    }]);        

angular.module('pureSpectrumApp')
    .controller('loginCtrl',['$scope','localStorageService','$http','$state','user','authenticationService','notify','companyService','ngProgressLite',function($scope, localStorageService, $http, $state, user, authenticationService, notify, companyService, ngProgressLite){
        $scope.loginObj ={};
        $scope.login = function() {
            ngProgressLite.start();
            user.logIn($scope.loginObj).success(function (data) {
                ngProgressLite.done();
                //PD-344
                $scope.checkResetReq = data.user.password_reset;
                $scope.lockedAccountStatus = data.user.lockout_attempt;
                if($scope.checkResetReq === 1) {
                    if($scope.lockedAccountStatus > 3) {
                        notify({message:'Your account have been locked, Please contact support@purespectrun.com for assistance',classes:'alert-danger',duration:8000} );
                    }
                    else {
                        notify({message:'Your account have been disabled, Please check your email and reset using secure reset-link or contact support@purespectrun.com for assistance',classes:'alert-danger',duration:8000} );    
                    }
                }
                else {
                    localStorageService.set('localStorageToken', data.token);
                    localStorageService.set('logedInUser', data.user);
                    $scope.app.token = localStorageService.get('localStorageToken');
                    authenticationService.setAuthentication(true, data.token, $scope.loginObj.rememberme);
                    ngProgressLite.done();
                    $state.go('home',{reload : true});
                }
            }).error(function (err) {
                if(err.msg =="Invalid credentials")
                    notify({message:err.msg+'. '+'Please check your email and password',classes:'alert-danger',duration:3000} );
                else
                   notify({message:err.msg,classes:'alert-danger',duration:3000} ); 
            });
        }

    }]);


angular.module('pureSpectrumApp')

    .controller('mainCtrl',['$scope','localStorageService' ,'$state' ,'$rootScope',function($scope, localStorageService ,$state ,$rootScope){
        $scope.app = {
            name: 'pureSpectrumApp',
            version: '1.0.0',
            token:'',
            user:{},
            race:[],
            education:[],
            children:[],
            employement:[],
            relation:[],
            country:[],
            samples:[],
            lang:[],
            gender:[],
            device:[],
            surveySuccess : ''
        };
        $scope.$state = $state;

        $rootScope.$on('$stateChangeStart',
            function(event, toState, toParams, fromState, fromParams, options){
               if(toState.name == 'startsurvey' || toState.name == 'home'){
                   $scope.fotrHide = true;
                   $scope.hdrHide = true;
               }
               else{
                   $scope.fotrHide = false;
                   $scope.hdrHide = false;

               }
            }
        );

        $scope.app.token=localStorageService.get('localStorageToken');
    }]);
angular.module('pureSpectrumApp')
    .controller('manageBuyerCntrl',['$scope','$http','$state','localStorageService','user','notify','supplierService','createSurvey','ngProgressLite','companyService','commonApi','$rootScope','buyerService', function($scope, $http, $state, localStorageService, user, notify, supplierService, createSurvey, ngProgressLite, companyService, commonApi, $rootScope, buyerService){

        $scope.show=false;
        $scope.showCreate = false;
        $scope.dsboardLink = [];
        $scope.buyers = [];
        $scope.blockedBuyList = [];

        var userData = localStorageService.get('logedInUser');

        showDataOnDashboard();
        getCompanyDetails();
        getBuyers();
        

        function checkAccessByRole(cmpInfo) {
           if(cmpInfo.isABuyer || cmpInfo.isASupplier || cmpInfo.isAnOperator) {
               $scope.ManageCmpLink = (cmpInfo.isAnOperator == true) ? cmpInfo.isAnOperator : false;

               user.checkAccess(userData.buyerAcssLvls, userData.supplierAcssLvls, userData.operatorAcssLvls).success(function(dataEtnl){
                   if(dataEtnl.Entitlement){
                       for(var i in dataEtnl.Entitlement){
                           if(dataEtnl.Entitlement[i].featureKey == 'CreateSurveys') {
                               if (dataEtnl.Entitlement[i].buyer.admin == true || dataEtnl.Entitlement[i].buyer.full == true) {
                                   $scope.showCreate = true;
                                        $scope.showManageSurvey  = false;
                               }
                               else {
                                   $scope.showCreate = false;
                               }
                           }
                           if(dataEtnl.Entitlement[i].featureKey == 'manageCompanies' ){
                               if (dataEtnl.Entitlement[i].operator.admin == true || dataEtnl.Entitlement[i].operator.full == true){
                                   $scope.dsboardLink.push({
                                       "featureName":dataEtnl.Entitlement[i].featureName,
                                       "featureKey":dataEtnl.Entitlement[i].featureKey,
                                       "featureLabel":dataEtnl.Entitlement[i].featureLabel
                                   });
                               }
                                $scope.showManageSurvey  = false;
                           }
                           if(dataEtnl.Entitlement[i].featureKey == 'manageSuppliers'){
                               if(dataEtnl.Entitlement[i].buyer.admin == true){
                                   $scope.dsboardLink.push({
                                       "featureName":dataEtnl.Entitlement[i].featureName,
                                       "featureKey":dataEtnl.Entitlement[i].featureKey,
                                       "featureLabel":dataEtnl.Entitlement[i].featureLabel
                                   });
                               }
                                $scope.showManageSurvey  = false;
                           }
                           if(dataEtnl.Entitlement[i].featureKey == 'manageUsers' ){
                               if (dataEtnl.Entitlement[i].operator.admin == true){
                                   $scope.dsboardLink.push({
                                       "featureName":dataEtnl.Entitlement[i].featureName,
                                       "featureKey":dataEtnl.Entitlement[i].featureKey,
                                       "featureLabel":dataEtnl.Entitlement[i].featureLabel
                                   });
                               }
                           }
                           if(dataEtnl.Entitlement[i].featureKey == 'ManageSupplierPricingCard' ){
                               if(dataEtnl.Entitlement[i].supplier.admin || dataEtnl.Entitlement[i].supplier.full) {
                                   $scope.dsboardLink.push({
                                       "featureName": dataEtnl.Entitlement[i].featureName,
                                       "featureKey": dataEtnl.Entitlement[i].featureKey,
                                       "featureLabel": dataEtnl.Entitlement[i].featureLabel
                                   });
                               }
                           }
                           if(dataEtnl.Entitlement[i].featureKey == 'ManageSupplierSettings' ){
                               if(dataEtnl.Entitlement[i].supplier.admin || dataEtnl.Entitlement[i].supplier.full) {
                                   $scope.dsboardLink.push({
                                       "featureName": dataEtnl.Entitlement[i].featureName,
                                       "featureKey": dataEtnl.Entitlement[i].featureKey,
                                       "featureLabel": dataEtnl.Entitlement[i].featureLabel
                                   });
                               }
                           }
                           if(dataEtnl.Entitlement[i].featureKey == 'manageBuyers'){
                               if (dataEtnl.Entitlement[i].supplier.admin || dataEtnl.Entitlement[i].supplier.full){
                                   $scope.dsboardLink.push({
                                       "featureName":dataEtnl.Entitlement[i].featureName,
                                       "featureKey":dataEtnl.Entitlement[i].featureKey,
                                       "featureLabel":dataEtnl.Entitlement[i].featureLabel
                                   });
                               }
                            }
                           if(dataEtnl.Entitlement[i].featureKey == 'manageSurveys' ){
                               if(dataEtnl.Entitlement[i].buyer.limited ) {
                                   $scope.showManageSurvey  = true;
                                   $scope.hideManageSurvey = true;
                               }
                           }
                           if(dataEtnl.Entitlement[i].featureKey == 'downloadReports' ){
                                if(dataEtnl.Entitlement[i].supplier.admin || dataEtnl.Entitlement[i].supplier.full){
                             
                                  $scope.dsboardLink.push({
                                    "featureName":dataEtnl.Entitlement[i].featureName,
                                    "featureKey":dataEtnl.Entitlement[i].featureKey,
                                    "featureLabel":dataEtnl.Entitlement[i].featureLabel
                                  });
                                }
                              }
                           if(dataEtnl.Entitlement[i].supplier.admin == true || dataEtnl.Entitlement[i].supplier.full == true || dataEtnl.Entitlement[i].supplier.limited == true ) {
                                $scope.showManageSurvey  = true;
                                $scope.hideManageSurvey = false;
                                $scope.filterCompanyDetail = true;
                                $scope.hideStatusEdit = true;
                           }
                       }
                       localStorageService.set('accessRole',dataEtnl.Entitlement[0]);
                       showDataOnDashboard();
                   }
               }).error(function (err) {
                   notify({message:err.error,classes:'alert-danger',duration:2000} );
               });
           }
        }

        function showDataOnDashboard(){
            var user=localStorageService.get('logedInUser');
            var access=localStorageService.get('accessRole');

            $scope.userName = user.usrName;
            $scope.buyer = user.buyerAcssLvls;
            $scope.supplier = user.supplierAcssLvls;
            $scope.operator = user.operatorAcssLvls;

            if(!access) {
                $scope.buyerrole='none';
                $scope.supplierrole='none';
            }
            else {
                if(access &&access.buyer.full==true){
                    $scope.buyerrole='full';
                }
                else{
                    $scope.buyerrole='none';
                }
                if(access.buyer.admin==true){
                    $scope.buyerrole='admin';
                }
                else{
                    $scope.buyerrole='none';
                }

                if(access.buyer.limited==true){
                    $scope.buyerrole='limited';
                }
                else{
                    $scope.buyerrole='none';
                }

                if(access.supplier.full==true){
                    $scope.supplierrole='full';
                }
                else{
                    $scope.supplierrole='none';
                }
                if(access.supplier.admin==true){
                    $scope.supplierrole='admin';
                }
                else{
                    $scope.supplierrole='none';
                }
                if(access.supplier.limited==true){
                    $scope.supplierrole='limited';
                }
                else{
                    $scope.supplierrole='none';
                }
            }
        }

        function getBuyers() {
            ngProgressLite.start();
            commonApi.getBuyerCounterParty().success(function (data) {
                $scope.buyers = data.company;
                buyerService.getBlockedBuyer(userData.cmp).success(function(list){
                    ngProgressLite.done();

                    if(list.hasOwnProperty('buyer') && list.buyer.hasOwnProperty('buyerList')) {
                        $scope.blockedBuyList = list.buyer.buyerList;
                        for(var i in $scope.buyers){
                            for(var j in $scope.blockedBuyList){
                                if($scope.buyers[i].id == $scope.blockedBuyList[j].buyerId){
                                    $scope.buyers[i].buyerSt = $scope.blockedBuyList[j].buyerStatus;
                                    $scope.buyers[i].blocked = true;
                                }
                            }
                        }
                    }
                }).error(function(err){
                    notify({message:err.msg,classes:'alert-danger',duration:3000} );
                })
            }).error(function (err) {
                notify({message:err.msg,classes:'alert-danger',duration:3000} );
            });
        }
        
        $scope.setBuyerBlocked = function(index) {
            if($scope.buyers[index].blocked) {
                $scope.buyers[index].buyerSt = "B";
                $scope.buyers[index].blocked = true;
            }else {
                $scope.buyers[index].buyerSt = "";
                $scope.buyers[index].blocked = false;
            }
        };

        function getCompanyDetails(){
            var cmpId=userData.cmp;

            companyService.getCompany(cmpId).success(function (data) {
                if(data.company){
                    checkAccessByRole(data.company[0])
                }
                else{
                    notify({message:'User Company does not exist',classes:'alert-warning',duration:2000} );
                }
            }).error(function (err) {
                notify({message:'Error in Company',classes:'alert-danger',duration:2000} );
            });
        }

        $scope.saveBuyers = function() {
            var postObj = {
                supplierId: userData.cmp,
                buyerList: []
            };

            for(var i = 0; i < $scope.buyers.length; i++) {
                if($scope.buyers[i].buyerSt != undefined && $scope.buyers[i].buyerSt != null && $scope.buyers[i].buyerSt != "") {
                    if($scope.buyers[i].buyerSt == "B") {
                        postObj.buyerList.push({
                            buyerId: $scope.buyers[i].id,
                            buyerStatus: "B"
                        });
                    }
                }
            }

            buyerService.updateBlockedBuyers(postObj).success(function(data){
                notify({message:"Buyer Status saved successfully",classes:'alert-success',duration:3000} );
            })
            .error(function(error){
                notify({message:error.msg,classes:'alert-danger',duration:3000} );
            });
        };

        $scope.bckDashboard = function() {
            $state.go('home');
        };

    }]);


/**
 * Created by Parveen on 3/15/2016.
 */
angular.module('pureSpectrumApp')
    .controller('companiesCntrl', ['$scope', '$http', '$state', 'localStorageService', 'user', 'notify', 'companyService', 'createSurvey', 'ngProgressLite', 'currencyService',
        function($scope, $http, $state, localStorageService, user, notify, companyService, createSurvey, ngProgressLite, currencyService) {
        $scope.cmpDetails = {};
        $scope.currencies = [];

        getCompaniesDetails();
        getCurrencies();

        $scope.companyinfo = {};
        $scope.shUpdate = false;
        $scope.shDelete = false;
        $scope.shSave = true;
        $scope.showCompanyInfo = {isExpose: "0"}; /*PD-607*/
        $scope.selectedCurrency = {};
        $scope.currencyPlaceholder = 'Select';
        $scope.disableCurrency = false;

        function getCompaniesDetails() {
            ngProgressLite.start();
            companyService.getAllCompaniesData().success(function (data) {
                ngProgressLite.done();
                $scope.companyinfo = data.companies;
            }).error(function (err) {
                notify({message:err.msg, classes: 'alert-danger', duration:3000});
            });
        }

        function getCurrencies() {
            ngProgressLite.start();
            currencyService.getCurrencyDataForCompanies().success(function (data) {
                ngProgressLite.done();

                if (data.currencies) {
                    $scope.currencies = _.map(data.currencies, function (currency) {
                        currency.name = currency.currencyFullName + ' (' + currency.currencyShortCode + ')';
                        return currency;
                    });
                }
            }).error(function (err) {
                notify({message:err.msg, classes: 'alert-danger', duration:3000});
            });
        }

        $scope.selectCurrency = function (currency) {
            $scope.selectedCurrency = currency;
            $scope.showCompanyInfo.fx = currency.fx;
        };
        
        $scope.fetchCompanyData = function (data) {
            $scope.showCompanyInfo = angular.copy(data);
            $scope.selectedCurrency = {};
            $scope.disableCurrency = false;

            if ($scope.showCompanyInfo.isExpose === undefined) {
                $scope.showCompanyInfo.isExpose = "0"; /*PD-607*/
            }

            $scope.shDelete = true;
            $scope.shUpdate = true;
            $scope.shSave = false;

            if (data.fx) {
                $scope.selectedCurrency = _.find($scope.currencies, function (currency) {
                   return (parseInt(currency.fx) === parseInt(data.fx));
                });
                $scope.disableCurrency = true;
            }
        };

        $scope.changeDefault = function () {  /*PD-607*/
          $scope.showCompanyInfo.isExpose = "1";
        };

        $scope.makeDefaultChk = function () {  /*PD-607*/
            $scope.showCompanyInfo.isExpose = "0";
        };

        $scope.updateCompanyDetails = function (cmpData) {
            ngProgressLite.start();

            if (cmpData.isNotify == "1") {
                cmpData.isNotify = true;
            }
            else {
                cmpData.isNotify = false;
            }

            if (cmpData.isABuyer == "1") {
                cmpData.isABuyer = true;
            }
            else {
                cmpData.isABuyer = false;
            }

            if (cmpData.isASupplier == "1") {
                cmpData.isASupplier = true;
            }
            else {
                cmpData.isASupplier = false;
            }

            if (cmpData.isAnOperator == "1") {
                cmpData.isAnOperator = true;
            }
            else {
                cmpData.isAnOperator = false;
            }

            if (cmpData.status == "Active") {
                cmpData.status = 1;
            }

            if (cmpData.isExpose == "1") {  /*PD-607*/
              cmpData.isExpose = true;
            }
            else {
              cmpData.isExpose = false;
            }

           companyService.updateCompanyDetails(cmpData).success(function (data) {
               ngProgressLite.done();
               notify({message:data.msg, classes:'alert-success', duration:3000});
               if ($scope.showCompanyInfo.fx) {
                   $scope.disableCurrency = true;
               }
               getCompaniesDetails();
           }).error(function (err) {
               notify({message:err.msg, classes:'alert-danger', duration:3000});
           });
        };

        $scope.newCompany = function () {
            $scope.shDelete = false;
            $scope.shUpdate = false;
            $scope.shSave = true;
            $scope.showCompanyInfo = {};
            $scope.showCompanyInfo.isExpose = 0;
            $scope.selectedCurrency = {};
            $scope.disableCurrency = false;
        };

        $scope.saveCompanyDetails = function (cmpData) {
            ngProgressLite.start();

            if (cmpData.isNotify == "1") {
                cmpData.isNotify = true;
            }
            else {
                cmpData.isNotify = false;
            }

            if (cmpData.isExpose == "1") {  /*PD-607*/
              cmpData.isExpose = true;
            }
            else {
              cmpData.isExpose = false;
            }

            if (cmpData.isABuyer == "1") {
                cmpData.isABuyer = true;
            }
            else {
                cmpData.isABuyer = false;
            }

            if (cmpData.isASupplier == "1") {
                cmpData.isASupplier = true;
                cmpData.supplier_type = "public";//PD-1393
            }
            else {
                cmpData.isASupplier = false;
            }

            if (cmpData.isAnOperator == "1") {
                cmpData.isAnOperator = true;
            }
            else {
                cmpData.isAnOperator = false;
            }

            cmpData.status = 1;

            companyService.saveCompanyDetails(cmpData).success(function (data) {
                ngProgressLite.done();
                notify({message:data.msg, classes:'alert-success', duration:3000});
                getCompaniesDetails();
                //$scope.cancelCompanyInfo();
            }).error(function (err) {
                notify({message:err.msg, classes:'alert-danger', duration:3000});
            });
        };

        $scope.deleteCompany = function (cmpId) {
            ngProgressLite.start();
            companyService.deleteCompany(cmpId).success(function (data) {
                ngProgressLite.done();
                $scope.showCompanyInfo = '';
                $scope.selectedCurrency = {};
                $scope.disableCurrency = false;
                notify({message:data.msg, classes:'alert-success', duration:3000});
                getCompaniesDetails();
            }).error(function (err) {
                notify({message:err.msg, classes:'alert-danger', duration:3000});
            });
        };

        $scope.cancelCompanyInfo = function () {
            $scope.showCompanyInfo = '';
            $scope.selectedCurrency = {};
            $scope.disableCurrency = false;
        };
    }]);
/*
 * controller for Invoice 
 * 
*/
angular.module('pureSpectrumApp')
.controller('invoiceCtrl',['$scope','$state', '$timeout','localStorageService','user','notify','companyService', 'settingService', 'createSurvey','ngProgressLite', '$rootScope','config','$stateParams','encodeDecodeFactory', 'invoiceService', 'FileSaver', 'Blob', function($scope, $state, $timeout, localStorageService, user, notify, companyService, settingService, createSurvey, ngProgressLite, $rootScope, config,$stateParams, encodeDecodeFactory, invoiceService, FileSaver, Blob){

	var base_url = config.pureSpecturm.url;
	//list of companies
	$scope.companies = [];
	//selected company 
	$scope.selectedCompany = {
		name : 'All',
		id : 0
	};
	//selected month
	$scope.selectedMonth = {
		mm : '01',
		month : 'January'
	}
	//seleted year
	$scope.selectedYear = 2018;

	//Loader
	$scope.tabs = {
      makeDisable : false
    };

	//get list of companies
	var getCompanies = function() {
		companyService.getInvoiceCompaniesData().then(
			function(response) {
				if(response && response.data && response.data.companies && response.data.companies.length > 0) {
					$scope.companies = response.data.companies;
				}else {
					//no companies found
					notify({message:"No companies found",classes:'alert-warning',duration:3000} );
				}
			}, 
			function(error) {
				notify({message:"Error getting Compnies",classes:'alert-danger',duration:3000} );
			});
	};

	//init function
	$scope.initData = function() {
		getCompanies();
	};

	//select company
	$scope.selectCompany = function(company) {
		if(company == 'all') {
			$scope.selectedCompany.name = 'All';
			$scope.selectedCompany.id = 0;
		}else {
			$scope.selectedCompany.name = company.name;
			$scope.selectedCompany.id = company.id;
		}
	};

	//select month
	$scope.monthSelect = function(mm, month) {
		$scope.selectedMonth.mm = mm;
		$scope.selectedMonth.month = month;
	}

	$scope.selectYear = function(yr) {
		$scope.selectedYear = yr;
	}

	//download invoice
	$scope.downloadInvoice = function() {
		var url =  base_url+'/survey/finance?company_id=' + $scope.selectedCompany.id + '&company_name=' + $scope.selectedCompany.name + '&period=' + $scope.selectedYear.toString() + $scope.selectedMonth.mm.toString();
        /*window.location.assign(url);*/
		invoiceService.fetchInvoiceFile($scope.selectedCompany.id, $scope.selectedCompany.name, $scope.selectedYear.toString() + $scope.selectedMonth.mm.toString()).then(
			function(response) {
				var fileName = response.data.fileName;
				window.open(invoiceService.downloadInvoice(fileName));

				// invoiceService.downloadInvoice(fileName).then(
				// 	function(response) {
				// 		console.log("response", response);
				// 	}, 
				// 	function(error) {
				// 		console.log("error is ", JSON.stringify(error));
				// 		notify({message: error.data.msg, classes:'alert-danger',duration:3000} );
				// 	});
			}, 
			function(error) {
				console.log("error is ", JSON.stringify(error));
				notify({message: error.data.msg, classes:'alert-danger',duration:3000} );
			});
	};

/*
*Function To download Buyer/Supplier Invoice statement monthly
*/
	$scope.downloadPdfInvoice = function(type) {
		$scope.tabs = {
	      makeDisable : true
	    };
		$scope.buyerInvoicePdfObj = {};
		$scope.supplierInvoicePdfObj = {};
		$scope.buyerInvoiceXlsxObj = {};
		$scope.supplierInvoiceXlsxObj = {};
		if(type === "buyerInvoiceReport" && type!=null && type!= undefined){
			$scope.buyerInvoicePdfObj.company_id = $scope.selectedCompany.id;
			$scope.buyerInvoicePdfObj.company_name = $scope.selectedCompany.name;
			$scope.buyerInvoicePdfObj.period = $scope.selectedYear.toString() + $scope.selectedMonth.mm.toString();
			$scope.buyerInvoicePdfObj.pdf_type = "buyerPdf";
			invoiceService.downloadPdfInvoiceFile($scope.buyerInvoicePdfObj).then(
				function(response) {
	  				var file = new Blob([response.data], {type: 'application/pdf'});
	                FileSaver.saveAs(file, ($scope.selectedCompany.name).replace(/ /g,'') + "-" +$scope.buyerInvoicePdfObj.period + ".pdf");
	                $scope.tabs = {
				      makeDisable : false
				    };

				}, 
				function(error) {
					$scope.tabs = {
				      makeDisable : false
				    };
					console.log("error---", JSON.stringify(error));
					var outBuff = arrayBufferToString(error.data);
					notify({message: outBuff, classes:'alert-danger',duration:3000} );
				});
		}
		else if(type === "supplierInvoiceReport" && type!=null && type!= undefined){
			$scope.supplierInvoicePdfObj.company_id = $scope.selectedCompany.id;
			$scope.supplierInvoicePdfObj.company_name = $scope.selectedCompany.name;
			$scope.supplierInvoicePdfObj.period = $scope.selectedYear.toString() + $scope.selectedMonth.mm.toString();
			$scope.supplierInvoicePdfObj.pdf_type = "supplierPdf";
			invoiceService.downloadPdfInvoiceFile($scope.supplierInvoicePdfObj).then(
				function(response) {
	  				var file = new Blob([response.data], {type: 'application/pdf'});
	                FileSaver.saveAs(file, ($scope.selectedCompany.name).replace(/ /g,'') + "-" +$scope.supplierInvoicePdfObj.period +".pdf");
	                $scope.tabs = {
				      makeDisable : false
				    };
				}, 
				function(error) {
					$scope.tabs = {
				      makeDisable : false
				    };
					console.log("error---", JSON.stringify(error));
					var outBuff = arrayBufferToString(error.data);
					notify({message: outBuff, classes:'alert-danger',duration:3000} );
				});
		}
		if(type === "buyerInvoiceXlsxReport" && type!=null && type!= undefined){
			$scope.buyerInvoiceXlsxObj.company_id = $scope.selectedCompany.id;
			$scope.buyerInvoiceXlsxObj.company_name = $scope.selectedCompany.name;
			$scope.buyerInvoiceXlsxObj.period = $scope.selectedYear.toString() + $scope.selectedMonth.mm.toString();
			$scope.buyerInvoiceXlsxObj.pdf_type = "buyerXlsx";
			
			invoiceService.downloadPdfInvoiceFile($scope.buyerInvoiceXlsxObj).then(
				function(response) {
	  				var file = new Blob([response.data], {type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'});
	  			
	                FileSaver.saveAs(file, ($scope.selectedCompany.name).replace(/ /g,'') + "-" +$scope.buyerInvoiceXlsxObj.period +".xlsx");
	                $scope.tabs = {
				      makeDisable : false
				    };
				}, 
				function(error) {
					$scope.tabs = {
				      makeDisable : false
				    };
					console.log("error---", JSON.stringify(error));
					var outBuff = arrayBufferToString(error.data);
					notify({message: outBuff, classes:'alert-danger',duration:3000} );
				});
		}
		else {
			if(type === "supplierInvoiceXlsxReport" && type!=null && type!= undefined){
				$scope.supplierInvoiceXlsxObj.company_id = $scope.selectedCompany.id;
				$scope.supplierInvoiceXlsxObj.company_name = $scope.selectedCompany.name;
				$scope.supplierInvoiceXlsxObj.period = $scope.selectedYear.toString() + $scope.selectedMonth.mm.toString();
				$scope.supplierInvoiceXlsxObj.pdf_type = "supplierXlsx";
				invoiceService.downloadPdfInvoiceFile($scope.supplierInvoiceXlsxObj).then(
					function(response) {
		  				var file = new Blob([response.data], {type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'});
		                FileSaver.saveAs(file, ($scope.selectedCompany.name).replace(/ /g,'') + "-" +$scope.supplierInvoiceXlsxObj.period +".xlsx");
		                $scope.tabs = {
					      makeDisable : false
					    };
					}, 
					function(error) {
						$scope.tabs = {
					      makeDisable : false
					    };
						console.log("error---", JSON.stringify(error));
						var outBuff = arrayBufferToString(error.data);
						notify({message: outBuff, classes:'alert-danger',duration:3000} );
					});
			}
		}
	};


	//Convert arrayBuffer to string
	function arrayBufferToString(buffer){
	    var arr = new Uint8Array(buffer);
	    var str = String.fromCharCode.apply(String, arr);
	    if(/[\u0080-\uffff]/.test(str)){
	        throw new Error("this string seems to contain (still encoded) multibytes");
	    }
	    return str;
	}

}]);

   
angular.module('pureSpectrumApp')
.directive('fileModel', ['$parse', function ($parse) {
    return {
        restrict: 'A',
        link: function(scope, element, attrs) {
            var model = $parse(attrs.fileModel);
            var modelSetter = model.assign;
            
            element.bind('change', function(){
                scope.$apply(function(){
                    modelSetter(scope, element[0].files[0]);
                    scope.filepath = element[0].files[0].name;
                    element.val(null);
                });
            });
        }
    };
}])
        
.controller('manageOperatorCtrl',['$scope', '$http', '$state', '$timeout', 'localStorageService','user','notify', 'companyService', 'createSurvey', 'ngProgressLite', '$rootScope', 'config', '$stateParams', 'fileUpload', '$upload', function($scope, $http, $state, $timeout, localStorageService, user, notify, companyService, createSurvey, ngProgressLite, $rootScope, config, $stateParams, fileUpload, $upload){
	     $scope.userInfo=localStorageService.get('logedInUser');
        $scope.base_url = config.pureSpecturm.url;
        $scope.showSPU = true;
        $scope.showStatusAndPrice = true;
        var regex = new RegExp("(.*?)\.(xlsx|xls)$");

         $scope.clickUpload = function(){
            angular.element('#fileMobile').trigger('click');
        };

        $scope.statusPriceUpdateFile = function(){
	        $scope.file = $scope.myFile;
	        if($scope.file) {
	        	var fileName = $scope.file.name;
	        	if(regex.test(fileName)) {
			        $scope.upload = $upload.upload({
		                url: $scope.base_url + '/manualStatusPriceTraffic',
		                method: 'POST',
		                headers: {'Content-Type': undefined},
		                file: $scope.file,
		                data: {"LoggedInUser": $scope.userInfo.id}
		            }).success(function(data){
		            	notify({message:data.msg,classes:'alert-success',duration:3000} );
		            	$scope.myFile ='';
		            	$scope.filepath ='';
		            }).error(function (err) {
	                    $scope.myFile ='';
	                    $scope.filepath ='';
		                notify({message:err.msg,classes:'alert-danger',duration:3000} );
		            });
	            }
	            else {
	            	notify({message:"Please select .xls/.xlsx file to upload",classes:'alert-danger',duration:2000} );
	            }
            }
            else {
            	notify({message:"First Select the file from browse option",classes:'alert-danger',duration:3000} );
            }
	    }

   
    	$scope.statusUpdateFile = function(){
	        $scope.file = $scope.myFile;
	        if($scope.file) {
	        	var fileName = $scope.file.name;
	        	if(regex.test(fileName)) {
			        $scope.upload = $upload.upload({
		                url: $scope.base_url + '/manualsurveytraffic',
		                method: 'POST',
		                headers: {'Content-Type': undefined},
		                file: $scope.file,
		                data: {"LoggedInUser": $scope.userInfo.id}
		            }).success(function(data){
		            	notify({message:data.msg,classes:'alert-success',duration:3000} );
		            	$scope.myFile ='';
		            	$scope.filepath ='';
		            }).error(function (err) {
		                notify({message:err.msg,classes:'alert-danger',duration:3000} );
		            });
	            }
	            else {
	            	notify({message:"Please select .xls/.xlsx file to upload",classes:'alert-danger',duration:2000} );
	            }
            }
            else {
            	notify({message:"First Select the file from browse option",classes:'alert-danger',duration:3000} );
            }
	    }

	    $scope.priceUpdateFile = function() {
	    	$scope.file = $scope.myFile;
	        if($scope.file) {
	        	var fileName = $scope.file.name;
	        	if(regex.test(fileName)) {
			        $scope.upload = $upload.upload({
		                url: $scope.base_url + '/manualpriceupdatetraffic',
		                method: 'POST',
		                headers: {'Content-Type': undefined},
		                file: $scope.file,
		                data: {"LoggedInUser": $scope.userInfo.id}
		            }).success(function(data){
		            	notify({message:data.msg,classes:'alert-success',duration:3000} );
		            	$scope.myFile ='';
		            	$scope.filepath ='';
		            }).error(function (err) {
		                notify({message:err.msg,classes:'alert-danger',duration:3000} );
		            });
	            }
	            else {
	            	notify({message:"Please select .xls/.xlsx file to upload",classes:'alert-danger',duration:2000} );
	            }
            }
            else {
            	notify({message:"First Select the file from browse option",classes:'alert-danger',duration:3000} );
            }
	    }

	    $scope.deletionFile = function() {
	    	$scope.file = $scope.myFile;
	        if($scope.file) {
	        	var fileName = $scope.file.name;
	        	if(regex.test(fileName)) {
			        $scope.upload = $upload.upload({
		                url: $scope.base_url + '/manualdeletiontraffic',
		                method: 'POST',
		                headers: {'Content-Type': undefined},
		                file: $scope.file,
		                data: {"LoggedInUser": $scope.userInfo.id}
		            }).success(function(data){
		            	notify({message:data.msg,classes:'alert-success',duration:3000} );
		            	$scope.myFile ='';
		            	$scope.filepath ='';
		            }).error(function (err) {
		                notify({message:err.msg,classes:'alert-danger',duration:3000} );
		            });
	            }
	            else {
	            	notify({message:"Please select .xls/.xlsx file to upload",classes:'alert-danger',duration:2000} );
	            }
            }
            else {
            	notify({message:"First Select the file from browse option",classes:'alert-danger',duration:3000} );
            }
	    }

	    $scope.statusPriceUpdate = function() {
	    	$scope.filepath ='';
	    	$scope.myFile ='';
	    	$scope.showSPU = true;
	    	$scope.showStatusAndPrice = true;
	    	$scope.showStatus = false;
	    	$scope.showPrice = false;
	    	$scope.showDelete = false;
	    }

	     $scope.statusUpdate = function() {
	    	$scope.filepath ='';
	    	$scope.myFile ='';
	    	$scope.showStatus = false;
	    	$scope.showStatusAndPrice = true;
	    	$scope.showPrice = false;
	    	$scope.showDelete = false;
	    	$scope.showSPU = false;
	    }

	    $scope.priceUpdate = function() {
	    	$scope.filepath ='';
	    	$scope.myFile ='';
	    	$scope.showStatus = false;
	    	$scope.showStatusAndPrice = false;
	    	$scope.showPrice = true;
	    	$scope.showDelete = false;
	    	$scope.showSPU = false;
	    }

	    $scope.statusDeletion = function() {
	    	$scope.filepath ='';
	    	$scope.myFile ='';
	    	$scope.showStatus = false;
	    	$scope.showStatusAndPrice = false;
	    	$scope.showPrice = false;
	    	$scope.showDelete = true;
	    	$scope.showSPU = false;
	    }
}]);




angular.module('pureSpectrumApp')
    .controller('suppliersCntrl',['$scope','$http','$state','localStorageService','user','notify','supplierService','createSurvey','ngProgressLite','companyService','buyerService', function($scope, $http, $state, localStorageService, user, notify, supplierService, createSurvey, ngProgressLite, companyService, buyerService){
        
        $scope.show=false;
        $scope.showCreate = false;
        $scope.dsboardLink=[];
        var userData = localStorageService.get('logedInUser');
        showDataOnDashboard();
        getCompanyDetails();
        getSuppliers(userData.cmp);

        $scope.suppliers = [];
        $scope.supplierTypes = {
            preferredTypes: [],
            blockedTypes: []
        };

        function checkAccessByRole(cmpInfo){
           if(cmpInfo.isABuyer || cmpInfo.isASupplier || cmpInfo.isAnOperator){
               if(cmpInfo.isAnOperator==true){
                   $scope.ManageCmpLink=true;
               }
               else{
                   $scope.ManageCmpLink=false;
               }
               user.checkAccess(userData.buyerAcssLvls, userData.supplierAcssLvls, userData.operatorAcssLvls).success(function(dataEtnl){
                   if(dataEtnl.Entitlement){
                       for(var i in dataEtnl.Entitlement){
                           if(dataEtnl.Entitlement[i].featureKey == 'CreateSurveys') {
                               if (dataEtnl.Entitlement[i].buyer.admin == true || dataEtnl.Entitlement[i].buyer.full == true) {
                                   $scope.showCreate = true;
                                        $scope.showManageSurvey  = false;
                               }
                               else {
                                   $scope.showCreate = false;
                               }
                           }
                           if(dataEtnl.Entitlement[i].featureKey == 'manageCompanies' ){
                               if (dataEtnl.Entitlement[i].operator.admin == true || dataEtnl.Entitlement[i].operator.full == true){
                                   $scope.dsboardLink.push({
                                       "featureName":dataEtnl.Entitlement[i].featureName,
                                       "featureKey":dataEtnl.Entitlement[i].featureKey,
                                       "featureLabel":dataEtnl.Entitlement[i].featureLabel
                                   });
                               }
                 $scope.showManageSurvey  = false;
                           }
                           if(dataEtnl.Entitlement[i].featureKey == 'manageSuppliers'){
                               if(dataEtnl.Entitlement[i].buyer.admin == true){
                                   $scope.dsboardLink.push({
                                       "featureName":dataEtnl.Entitlement[i].featureName,
                                       "featureKey":dataEtnl.Entitlement[i].featureKey,
                                       "featureLabel":dataEtnl.Entitlement[i].featureLabel
                                   });
                               }
                $scope.showManageSurvey  = false;
                           }
                           if(dataEtnl.Entitlement[i].featureKey == 'manageUsers' ){
                               if (dataEtnl.Entitlement[i].operator.admin == true){
                                   $scope.dsboardLink.push({
                                       "featureName":dataEtnl.Entitlement[i].featureName,
                                       "featureKey":dataEtnl.Entitlement[i].featureKey,
                                       "featureLabel":dataEtnl.Entitlement[i].featureLabel
                                   });
                               }
                           }
                           if(dataEtnl.Entitlement[i].featureKey == 'ManageSupplierPricingCard' ){
                               if(dataEtnl.Entitlement[i].supplier.admin || dataEtnl.Entitlement[i].supplier.full) {
                                   $scope.dsboardLink.push({
                                       "featureName": dataEtnl.Entitlement[i].featureName,
                                       "featureKey": dataEtnl.Entitlement[i].featureKey,
                                       "featureLabel":dataEtnl.Entitlement[i].featureLabel
                                   });
                               }
                           }

                           if(dataEtnl.Entitlement[i].featureKey == 'ManageSupplierSettings' ){
                               if(dataEtnl.Entitlement[i].supplier.admin || dataEtnl.Entitlement[i].supplier.full) {
                                   $scope.dsboardLink.push({
                                       "featureName": dataEtnl.Entitlement[i].featureName,
                                       "featureKey": dataEtnl.Entitlement[i].featureKey,
                                       "featureLabel":dataEtnl.Entitlement[i].featureLabel
                                   });
                               }
                           }

                           if(dataEtnl.Entitlement[i].featureKey == 'manageSurveys' ){
                               if(dataEtnl.Entitlement[i].buyer.limited ) {
                                   // getSurveyesDetails();
                                   $scope.showManageSurvey  = true;
                                   $scope.hideManageSurvey = true;
                               }
                           }
                           if(dataEtnl.Entitlement[i].supplier.admin == true || dataEtnl.Entitlement[i].supplier.full == true || dataEtnl.Entitlement[i].supplier.limited == true ) {
                                $scope.showManageSurvey  = true;
                                $scope.hideManageSurvey = false;
                                $scope.filterCompanyDetail = true;
                                $scope.hideStatusEdit = true;
                           }

                       }
                       localStorageService.set('accessRole',dataEtnl.Entitlement[0]);
                       showDataOnDashboard();
                   }
               }).error(function (err) {
                   notify({message:err.error,classes:'alert-danger',duration:2000} );
               })
           }
        }


        function showDataOnDashboard(){
            var user=localStorageService.get('logedInUser');
            var access=localStorageService.get('accessRole');
            $scope.userName=user.usrName;
            $scope.buyer=user.buyerAcssLvls;
            $scope.supplier=user.supplierAcssLvls;
            $scope.operator=user.operatorAcssLvls;

            if(!access){
                $scope.buyerrole='none';
                $scope.supplierrole='none';
            }
            else{

                if(access &&access.buyer.full==true){
                    $scope.buyerrole='full';
                }
                else{
                    $scope.buyerrole='none';
                }
                if(access.buyer.admin==true){
                    $scope.buyerrole='admin';
                }
                else{
                    $scope.buyerrole='none';
                }

                if(access.buyer.limited==true){
                    $scope.buyerrole='limited';
                }
                else{
                    $scope.buyerrole='none';
                }

                if(access.supplier.full==true){
                    $scope.supplierrole='full';
                }
                else{
                    $scope.supplierrole='none';
                }
                if(access.supplier.admin==true){
                    $scope.supplierrole='admin';
                }
                else{
                    $scope.supplierrole='none';
                }
                if(access.supplier.limited==true){
                    $scope.supplierrole='limited';
                }
                else{
                    $scope.supplierrole='none';
                }
            }

        }

        /*$scope.logout=function(event){
            ngProgressLite.start();
            event.preventDefault();
            user.logoutUser(userData.id).success(function (data) {
                ngProgressLite.done();
                localStorageService.clearAll();
                sessionStorage.removeItem("token");
                window.location.reload();

            }).error(function (err) {
                notify({message:'Error in logout',classes:'alert-danger',duration:2000} );
            })

        }*/

        function getSuppliers(id) {
            ngProgressLite.start();
            supplierService.getAllSuppliersData(id).success(function (data) {
                ngProgressLite.done();
                $scope.suppliers = data.supplierList;
                  /*buyerService.getAllBlockedBuyers().success(function(blcokedBuyers){
                      $scope.blockedBuyList = blcokedBuyers.buyer;
                      //console.log(JSON.stringify($scope.blockedBuyList));
                      for(var i in $scope.suppliers){
                            if($scope.suppliers[i].id == $scope.blockedBuyList.supplierId){
                                for (var j in $scope.blockedBuyList.buyerList){
                                  if(userData.cmp == $scope.blockedBuyList.buyerList[j].buyerId){
                                    $scope.suppliers.splice(i, 1);
                                    //console.log('in');
                                  }
                                }
                            }
                      }
                  }).error(function(err){
                      notify({message:err.msg,classes:'alert-danger',duration:3000} );
                  })*/
                for(var i=0; i<data.supplierList.length; i++) {
                    if(data.supplierList[i].supplrSt != undefined && data.supplierList[i].supplrSt != null) {
                        if(data.supplierList[i].supplrSt == "P") {
                            $scope.supplierTypes.preferredTypes[i] = true;
                            $scope.supplierTypes.blockedTypes[i] = false; 
                        }else if(data.supplierList[i].supplrSt == "B") {
                            $scope.supplierTypes.preferredTypes[i] = false;
                            $scope.supplierTypes.blockedTypes[i] = true; 
                        }else {
                            $scope.supplierTypes.blockedTypes[i] = false;
                            $scope.supplierTypes.preferredTypes[i] = false;
                        }
                    }
                }
            }).error(function (err) {
                notify({message:err.msg,classes:'alert-danger',duration:3000} );
            })
        }

        $scope.setPreffered = function(index) {
            if($scope.supplierTypes.preferredTypes[index]) {
                $scope.suppliers[index].supplrSt = "P";
                $scope.supplierTypes.blockedTypes[index] = false;
            }else {
                $scope.suppliers[index].supplrSt = "";
            }
        };

        $scope.setBlocked = function(index) {
            if($scope.supplierTypes.blockedTypes[index]) {
                $scope.suppliers[index].supplrSt = "B";
                $scope.supplierTypes.preferredTypes[index] = false;
            }else {
                $scope.suppliers[index].supplrSt = "";
            }
        };
        function getCompanyDetails(){
            var cmpId=userData.cmp;

            companyService.getCompany(cmpId).success(function (data) {
                if(data.company){
                    checkAccessByRole(data.company[0])
                }
                else{
                    notify({message:'User Company does not exist',classes:'alert-warning',duration:2000} );
                }
            }).error(function (err) {
                notify({message:'Error in Company',classes:'alert-danger',duration:2000} );
            })
        }

        $scope.saveSuppliers = function() {
            var postObj = {
                companyId: userData.cmp,
                supplierList: []
            };
            for(var i=0; i<$scope.suppliers.length; i++) {
                if($scope.suppliers[i].supplrSt != undefined && $scope.suppliers[i].supplrSt != null && $scope.suppliers[i].supplrSt != "") {
                    if($scope.suppliers[i].supplrSt == "P") {
                        postObj.supplierList.push({
                            supplierId: $scope.suppliers[i].id,
                            supplierStatus: "P"
                        });
                    }else if($scope.suppliers[i].supplrSt == "B") {
                        postObj.supplierList.push({
                            supplierId: $scope.suppliers[i].id,
                            supplierStatus: "B"
                        });
                    }
                }
            }

            supplierService.setPrfBlkSuppliers(postObj).success(function(data){
                notify({message:"Suppliers Status saved successfully",classes:'alert-success',duration:3000} );
            })
            .error(function(error){
                notify({message:error.msg,classes:'alert-danger',duration:3000} );
            });
        };

        $scope.bckDashboard = function() {
            $state.go('home');
        };


    }]);


angular.module('pureSpectrumApp')
    .controller('manageUserCtrl',['$scope', '$http', '$state', '$timeout', 'localStorageService','user','notify', 'companyService', 'createSurvey', 'ngProgressLite', '$rootScope', 'config', '$stateParams', function($scope, $http, $state, $timeout, localStorageService, user, notify, companyService, createSurvey, ngProgressLite, $rootScope, config, $stateParams){
            $scope.show=false;
            $rootScope.showCreate = false;
            $rootScope.dsboardLink=[];
            $scope.allSurveySearch = "";
            $scope.isCompanyDisabled = false;
            $scope.isOperatorDisabled = false;
            $scope.isSupplierDisabled = false;
            $scope.isBuyerDisabled = false;
            $scope.userDetails ={};
            $scope.shUpdate=false;
            $scope.shDelete=false;
            $scope.shSave=true;
            var userData = localStorageService.get('logedInUser');
            getCompanyDetails();
            getUsersDetails();
            


            
             function checkAccessByRole(cmpInfo){
               if(cmpInfo.isABuyer || cmpInfo.isASupplier || cmpInfo.isAnOperator){
                   if(cmpInfo.isAnOperator==true){
                       $scope.ManageCmpLink=true;
                   }
                   else{
                       $scope.ManageCmpLink=false;
                   }
                   user.checkAccess(userData.buyerAcssLvls, userData.supplierAcssLvls, userData.operatorAcssLvls).success(function(dataEtnl){
                       if(dataEtnl.Entitlement){
                           for(var i in dataEtnl.Entitlement){
                               if(dataEtnl.Entitlement[i].featureKey == 'CreateSurveys') {
                                   if (dataEtnl.Entitlement[i].buyer.admin == true || dataEtnl.Entitlement[i].buyer.full == true) {
                                       $rootScope.showCreate = true;
               $scope.showManageSurvey  = false;
                                   }
                                   else {
                                       $rootScope.showCreate = false;
                                   }
                               }
                               if(dataEtnl.Entitlement[i].featureKey == 'manageCompanies' ){
                                   if (dataEtnl.Entitlement[i].operator.admin == true || dataEtnl.Entitlement[i].operator.full == true){
                                       $rootScope.dsboardLink.push({
                                           "featureName":dataEtnl.Entitlement[i].featureName,
                                           "featureKey":dataEtnl.Entitlement[i].featureKey,
                                           "featureLabel":dataEtnl.Entitlement[i].featureLabel
                                       });
                                   }
             $scope.showManageSurvey  = false;
                               }
                               if(dataEtnl.Entitlement[i].featureKey == 'manageSuppliers'){
                                   if(dataEtnl.Entitlement[i].buyer.admin == true){
                                       $rootScope.dsboardLink.push({
                                           "featureName":dataEtnl.Entitlement[i].featureName,
                                           "featureKey":dataEtnl.Entitlement[i].featureKey,
                                           "featureLabel":dataEtnl.Entitlement[i].featureLabel
                                       });
                                   }
            $scope.showManageSurvey  = false;
                               }
                               if(dataEtnl.Entitlement[i].featureKey == 'manageUsers' ){
                                   if (dataEtnl.Entitlement[i].operator.admin == true){
                                       $rootScope.dsboardLink.push({
                                           "featureName":dataEtnl.Entitlement[i].featureName,
                                           "featureKey":dataEtnl.Entitlement[i].featureKey,
                                           "featureLabel":dataEtnl.Entitlement[i].featureLabel
                                       });
                                   }
                               }
                               if(dataEtnl.Entitlement[i].featureKey == 'ManageSupplierPricingCard' ){
                                   if(dataEtnl.Entitlement[i].supplier.admin || dataEtnl.Entitlement[i].supplier.full) {
                                       $rootScope.dsboardLink.push({
                                           "featureName": dataEtnl.Entitlement[i].featureName,
                                           "featureKey": dataEtnl.Entitlement[i].featureKey,
                                           "featureLabel":dataEtnl.Entitlement[i].featureLabel
                                       });
                                   }
                               }
                               if(dataEtnl.Entitlement[i].featureKey == 'manageSurveys' ){
                                   if(dataEtnl.Entitlement[i].buyer.limited ) {
                                      // getSurveyesDetails();
                                       $scope.showManageSurvey  = true;
                                       $scope.hideManageSurvey = true;
                                   }
                               }
                               if(dataEtnl.Entitlement[i].supplier.admin == true || dataEtnl.Entitlement[i].supplier.full == true || dataEtnl.Entitlement[i].supplier.limited == true ) {
                                  
                                    $scope.showManageSurvey  = true;
                                    $scope.hideManageSurvey = false;
                                    $scope.filterCompanyDetail = true;
                                    $scope.hideStatusEdit = true;
                               }

                           }

                           localStorageService.set('accessRole',dataEtnl.Entitlement[0]);
                           //showDataOnDashboard();
                       }
                   }).error(function (err) {
                       notify({message:err.error,classes:'alert-danger',duration:2000} );
                   })
               }
        }



            function getCompanyDetails(){
                var cmpId=userData.cmp;
                companyService.getCompany(cmpId).success(function (data) {
                    if(data.company){
                        checkAccessByRole(data.company[0])
                    }
                    else{
                        notify({message:'User Company does not exist',classes:'alert-warning',duration:2000} );
                    }
                }).error(function (err) {
                    notify({message:'Error in Company',classes:'alert-danger',duration:2000} );
                })
            }

           function getUsersDetails(){
                  user.getUserData().success(function (data) {
                      if(data.companies){
                          $scope.users = data.companies;
                         companyService.getAllCompaniesData().success(function (data) {
                  if(data.companies){
                       $scope.companies = data.companies;
                  }
                  
              }).error(function (err) {
                  notify({message:'Error in Company',classes:'alert-danger',duration:2000} );
              });
                      }
                  }).error(function (err) {
                      notify({message:err.msg,classes:'alert-danger',duration:2000} );
                  })
          }
  
            /*****************updated company flag dropdown****/
            $scope.updateLevelDropdown = function (id) {
              $scope.isOperatorDisabled = false;
              $scope.isSupplierDisabled = false;
              $scope.isBuyerDisabled = false;
              for(var i in $scope.companies){
                  if($scope.companies[i].id == id){
                    if($scope.companies[i].isAnOperator == false)
                         $scope.isOperatorDisabled = true;
                     if($scope.companies[i].isASupplier == false)
                         $scope.isSupplierDisabled = true;
                      if($scope.companies[i].isABuyer == false)
                         $scope.isBuyerDisabled = true;
                      break;
                  }
               }
            }
      
            $scope.fetchUserData= function (data) {

                $scope.userDetails=angular.copy(data);
                $scope.shDelete=true;
                $scope.shUpdate=true;
                $scope.shSave=false;
            }
  
            /**************** Clear user form *******************/
            $scope.clearUserDetail = function (userData) {
                $scope.userDetails={};
                $scope.isOperatorDisabled = false;
                $scope.isSupplierDisabled = false;
                $scope.isBuyerDisabled = false;
                $scope.isCompanyDisabled = false;
            }

        /*************** creating new user ****************************/
      
        
        $scope.saveUserDetails = function (cmpData) 
    {
          
            ngProgressLite.start();
             if($scope.userDetails.email == undefined || $scope.userDetails.email == null || $scope.userDetails.email == "") {
                notify({message: 'Please Enter the User Id', classes:'alert-danger',duration:3000} );
                return false;
            }

            if($scope.userDetails.name == undefined || $scope.userDetails.name == null || $scope.userDetails.name == "") {
                notify({message: 'Please Enter the Name', classes:'alert-danger',duration:3000} );
                return false;
            }

            if($scope.userDetails.company == undefined || $scope.userDetails.company == null || $scope.userDetails.company == "") {
                notify({message: 'Please Select the Company', classes:'alert-danger',duration:3000} );
                return false;
            }
            if(cmpData.id == undefined)
            {

              if($scope.userDetails.password == undefined || $scope.userDetails.password == null || $scope.userDetails.password == "") {
                  notify({message: 'Please Enter the Password', classes:'alert-danger',duration:3000} );
                  return false;
              }
            }
             
             
             
                  var count ='';
            for(var i in $scope.companies)
            {
              if($scope.companies[i].id == cmpData.company)
              {
                count=i;
                break;
                
              }
            }

            if($scope.companies[count].isABuyer == false)
                    cmpData.buyerSideAccessLevels = "none";
                  else
                  {
                    if( $scope.userDetails.buyerSideAccessLevels == null || $scope.userDetails.buyerSideAccessLevels == "") {
                notify({message: 'Please Select the  Buyer Access Leve', classes:'alert-danger',duration:3000} );
                return false;
            }
                  }

            if($scope.companies[count].isASupplier == false)
                    cmpData.supplierSideAccessLevels = "none";
                  else
                  {
                    if( $scope.userDetails.supplierSideAccessLevels == null || $scope.userDetails.supplierSideAccessLevels == "") {
              
                cmpData.supplierSideAccessLevels = "none";
            }
                  }

            if($scope.companies[count].isAnOperator == false)
                    cmpData.operatorAccessLevels = "none";
              else
              {
                if( $scope.userDetails.operatorAccessLevels == null || $scope.userDetails.operatorAccessLevels == "") {
              
                cmpData.operatorAccessLevels = "none";
            }
              }
                


            if(cmpData.id != undefined)
            {   

                 if(cmpData.status =='Active')
                    cmpData.status =1;
                else
                    cmpData.status =2;
              user.updateUserDetails(cmpData).success(function (data) {
                ngProgressLite.done();
                notify({message:data.msg,classes:'alert-success',duration:3000} );
                getUsersDetails();
                 $scope.userDetails={};

                }).error(function (err) {
                 notify({message:err.msg,classes:'alert-danger',duration:3000} );
                });
                

            }
            else
            {
              user.saveUserDetails(cmpData).success(function (data) {
                ngProgressLite.done();
                notify({message:data.msg,classes:'alert-success',duration:3000} );
                getUsersDetails();
                $scope.userDetails={};
                }).error(function (err) {
                 notify({message:err.msg,classes:'alert-danger',duration:3000} );
                });

            }

            
            
        }

/*******************/

        $scope.toUpdate = {
          id: "",
          encId: "",
          status: "",
          name:""
        };
        $scope.statusUpdateMsg = "";
        $scope.showSuccessMessage = false;

        /*----------Put Survey Data in Survey Status Change Modal------*/
        $scope.openStatusModal = function(id, encId, status) {
          $scope.statusUpdateMsg = "";
          $scope.showSuccessMessage = false;

          $scope.toUpdate.id =id;
          $scope.toUpdate.encId =encId;
          $scope.toUpdate.status =status;
        };

        /*----------Put User Data in User Status Change Modal------*/
        $scope.openUserStatusModal = function(id, name, status) {
          $scope.statusUpdateMsg = "";
          $scope.showSuccessMessage = false;

          $scope.toUpdate.id =id;
            $scope.toUpdate.name =name;
          $scope.toUpdate.status =status;
        };

         /*---------Updates user Status in Table after change-------*/
        $scope.updateUserStatus = function(){
          user.updateStatus($scope.toUpdate.id, $scope.toUpdate).success(function (data){
             if(data.apiStatus == "success"){
                $scope.showSuccessMessage = true;
                $scope.statusUpdateMsg = " "+$scope.toUpdate.name+" is in "+$scope.toUpdate.status+" state.";
                getUsersDetails();
                $timeout(function(){
                  $("#status-change-modal .close").trigger("click");
                },3000);
              }
            }).error(function (err) {
               notify({message:err.msg,classes:'alert-danger',duration:2000} );
           });
        };

            /*--------Open Survey Details------*/
            $scope.openUserDetails = function(user){
              $scope.showUserDetails = true;
              $scope.isCompanyDisabled = true;
              $scope.userDetails = user;
              $scope.isOperatorDisabled = false;
              $scope.isSupplierDisabled = false;
              $scope.isBuyerDisabled = false;
                for(var i in $scope.companies){
                  if($scope.companies[i].id == user.company){
                    if($scope.companies[i].isAnOperator == false){
                      $scope.isOperatorDisabled = true;
                    }
                    if($scope.companies[i].isASupplier == false){
                      $scope.isSupplierDisabled = true;
                    }
                    if($scope.companies[i].isABuyer == false){
                      $scope.isBuyerDisabled = true;
                    }
                    break;
                }
              }
            };

    }]);

 /**
 * Created by Jaspreet Singh on  12/04/2017.
 */
angular.module('pureSpectrumApp')
    .controller('operatorSettingCtrl', ['$scope', '$http', '$state', '$stateParams', '$cookies', '$window', 'config', 'commonApi', 'createSurvey', 'companyService', 'supplierService','feasibilityService' ,'notify', 'user', 'localStorageService', 'ngProgressLite', '$filter', '$timeout', '$rootScope', 'settingService', 'encodeDecodeFactory', 'currencyService', function ($scope, $http, $state, $stateParams, $cookies, $window, config, commonApi, createSurvey, companyService, supplierService, feasibilityService, notify, user, localStorageService, ngProgressLite, $filter, $timeout, $rootScope, settingService, encodeDecodeFactory, currencyService) {
        var localeInfo;
        var feasibilityPayload      = {};

        var supplierId;
        $scope.feasibilityObj       = {};
        $scope.supplierObj          = {};
        $scope.feasibilityModes     = [{ label: 'None', value: 0 }, { label: 'Genpop Estimate', value: 1 }]; /* PD-844 */
        $scope.detectedEmptyFld     = false; /* Disable the 'Save' button if true. */
        $scope.isGenipopMode        = false; /* Show Genpop Estimatation Fileds. */
        $scope.enableSaveBtn        = false; /* Show Save button if true. */
        $scope.enableFeasibilityEst = true;
        $scope.suppliers            = [];    /* It will contain the Supplier's List. */
        $scope.feasCountry          = [];    /* Contains the Countries's List. */
        $scope.surveyLocalization   = [];    /* Contains the combine list of Country & Language. */
        $scope.feasLngByCountry     = [];    /* Contains Language/s on the basis of  Country*/
        $scope.countryNotSelected   = true;
        $scope.langNotSelected      = true;
        $scope.selectedBuyer        = { name : 'All', id : 0};
        $scope.selectedSupplier     = { label : 'All', value : 0};
        $scope.loader               = {show: false};

        $scope.currencies = [];
        $scope.selectedCurrency = {};
        $scope.currencyPlaceholder = 'Select';

        /**  Handles Tab **/
        $scope.tab = 1;
        $scope.setTab = function (newTab) {
            $scope.tab = newTab;
        };

        $scope.isSet = function (tabNum) {
            return $scope.tab === tabNum;
        };

        $scope.selectBuyer = function(buyer) {
            if (buyer === 'all') {
                $scope.selectedBuyer.name = 'All';
                $scope.selectedBuyer.id = 0;
            }
            else {
                $scope.selectedBuyer.name = buyer.name;
                $scope.selectedBuyer.id = buyer.id;
            }
        };

        $scope.selectSupplier = function(supplier) {
            if (supplier === 'all') {
                $scope.selectedSupplier.label = 'All';
                $scope.selectedSupplier.value = 0;
            }
            else {
                $scope.selectedSupplier.label = supplier.label;
                $scope.selectedSupplier.value = supplier.value;
            }
        };

        $scope.selectCurrency = function (currency) {
            $scope.selectedCurrency = angular.copy(currency);
        };

        /* Fetching all the Suppliers PD-1393 */
        companyService.getAllCompaniesData().success(function (data) {
            if (data.companies.length > 0) {
                var cmp = data.companies;
                _.each(cmp, function (supplier) {
                    if (supplier.isASupplier === true) {
                        $scope.suppliers.push({
                            label: supplier.name,
                            value: supplier.id,
                            supplerType: (supplier.supplier_type == "public" ? false : true)
                        });
                    }
                });
            }
        }).error(function (err) {
            $scope.loader.show = false;
            notify({message: err.msg, classes: 'alert-danger', duration: 2000});
        });

        /*Fetching all Buyer Companies*/
        companyService.getBuyerCompany().success(function (res) {
            $scope.buyers = res.company;
        }).error(function (err) {
            notify({message: err.msg, classes: 'alert-danger', duration: 2000});
        });

        /* Fetch all Countries */
        commonApi.countries().success(function (data) {
            if (_.has(data, 'countries')) {
                if (data.countries.values) {
                    $scope.surveyLocalization = data.countries.values;
                    _.each(data.countries.values, function (countryRecord) {
                        $scope.feasCountry.push({
                            label : countryRecord.name,
                            value : countryRecord.short_Code
                        });
                    });
                }
                else {
                    console.log({ status: "Failure", msg: "Countries Value's not found !" });
                }
            }
            else {
                console.log({ status: "Failure", msg: "Countries not found !" });
            }
        }).error(function (err) {
            $scope.loader.show = false;
            notify({message: err.msg, classes: 'alert-danger', duration: 2000});
        });

        /* Fetch all currencies */
        function fetchAllCurrencies() {
            currencyService.getAllCurrencies().success(function (res) {
                if (res.currencies) {
                    $scope.currencies = _.map(res.currencies, function (currency) {
                        currency.name = currency.currencyFullName + ' (' + currency.currencyShortCode + ')';
                        return currency;
                    });
                }
            }).error(function (err) {
                notify({message: err.msg, classes: 'alert-danger', duration: 2000});
            });
        }

        fetchAllCurrencies();

        /** Ensures that  "desktopMonthlyActUsr","mobileMonthlyActUsr","patnrDelvryMulplr"
         *  fields only enable when genepopMode = 1.
         **/
        $scope.changeFeasibility = function() {
            if ($scope.feasibilityObj.genpopMode === 0) {
                $scope.isGenipopMode = false;
                $scope.detectedEmptyFld=false;
            }
            else {
                $scope.isGenipopMode = true;
                $scope.enableSaveBtn = true;
            }
        };


        /** Validate the Feasibility Fields and disable the Save button if any of the three
         *  fields("desktopMonthlyActUsr","mobileMonthlyActUsr","patnrDelvryMulplr")
         *  is/are empty.
         **/
        $scope.validateField = function() {
            var feasObj = $scope.feasibilityObj;

            if(!feasObj.surveyLocalization){
                $scope.detectedEmptyFld = true;
            }
            else if(!feasObj.surveyLocalization.feasCountry || !feasObj.surveyLocalization.feasLng){
                $scope.detectedEmptyFld = true;
            }
            else if (!("feasCountry" in feasObj.surveyLocalization) || !("feasLng" in feasObj.surveyLocalization) || !feasObj.desktopMonthlyActUsr || !feasObj.mobileMonthlyActUsr || !feasObj.patnrDelvryMulplr){
                    $scope.detectedEmptyFld = true;
            } else {
                $scope.detectedEmptyFld = false;
                $scope.enableSaveBtn = true;
            }
        };

        /**
         *  Saving the Feasibility data to Server.
         */

        $scope.saveFeasibility = function() {
            var feasObj      = $scope.feasibilityObj;
                feasObj.s_id = $scope.supplierObj.id;
        
            if (feasObj.desktopMonthlyActUsr !== null &&  feasObj.mobileMonthlyActUsr !== null && feasObj.patnrDelvryMulplr !== null  && feasObj.surveyLocalization !== undefined && feasObj.surveyLocalization.feasCountry !== undefined &&  feasObj.surveyLocalization.feasLng !== undefined) {
                if(feasObj.genpopMode === 1 ){
                   if(feasObj.hasOwnProperty('desktopMonthlyActUsr') && feasObj.desktopMonthlyActUsr && feasObj.hasOwnProperty('mobileMonthlyActUsr') && feasObj.mobileMonthlyActUsr && feasObj.hasOwnProperty('patnrDelvryMulplr') && feasObj.patnrDelvryMulplr){
                     feasibilityService.saveFeasibility($scope.feasibilityObj).success(function(data) {
                      notify({ message: 'Feasibility Settings Saved !', classes: 'alert-success', duration: 2000 });
                      }).error(function(err) {
                       notify({ message: err.msg, classes: 'alert-danger', duration: 3000 });
                      });
                    }else{
                        
                        notify({ message: 'Below fields cannot be Empty!', classes: 'alert-danger', duration: 2000 });
                        $scope.detectedEmptyFld = true;
                    }

                }else{
                      if(feasObj.hasOwnProperty('desktopMonthlyActUsr') && feasObj.desktopMonthlyActUsr){
                        feasObj.desktopMonthlyActUsr="";
                      }
                      if(feasObj.hasOwnProperty('mobileMonthlyActUsr') && feasObj.mobileMonthlyActUsr){
                           feasObj.mobileMonthlyActUsr="";
                      }
                      if(feasObj.hasOwnProperty('patnrDelvryMulplr') && feasObj.patnrDelvryMulplr){
                           feasObj.patnrDelvryMulplr="";
                      }

                    feasibilityService.saveFeasibility($scope.feasibilityObj).success(function(data) {
                    notify({ message: 'Feasibility Settings Saved !', classes: 'alert-success', duration: 2000 });
                    }).error(function(err) {
                    notify({ message: err.msg, classes: 'alert-danger', duration: 3000 });
                    });
                 }   
            }else {
                notify({ message: 'Below fields cannot be Empty!', classes: 'alert-danger', duration: 2000 });
                $scope.detectedEmptyFld = true;
            }
        };


        /**
         *  Fetching Feasibility Setting's data for Supplier.
         */

        $scope.selctSupplier = function(id){
            $scope.supplierObj.id =id;
            var supp = _.findWhere($scope.suppliers,{value:id});
            $scope.name = supp.label;
            if($scope.supplierObj.hasOwnProperty('id') && $scope.supplierObj.id){
                supplierId = angular.copy($scope.supplierObj.id);
                $scope.enableSaveBtn        = true;
                $scope.enableFeasibilityEst = false;
                $scope.countryNotSelected   = true;
                $scope.langNotSelected      = true;

                /* Loads the Value from Database on the basis of supplier Id */

                feasibilityService.getFeasibilityById($scope.supplierObj.id).success(function(feasibility) {
                    $scope.feasibilityObj = {};
                    if(feasibility.data.length > 0){
                      $scope.feasibilityObj = {};
                        feasibilityPayload = feasibility;
                        $scope.feasData = angular.copy(feasibility.data[0]);
                        $scope.feasibilityObj =  $scope.feasData;
                        
                        if(feasibility.data[0].genpopMode !== 0){
                          $scope.isGenipopMode  = true;
                        }else{
                          $scope.isGenipopMode  = false;
                        }
                          $scope.enableSaveBtn  = true;
                    }else{
                        $scope.isGenipopMode = false;
                        $scope.enableSaveBtn = false;
                    }
                         // PD-1372
                    if($scope.feasibilityObj.surveyLocalization && $scope.feasibilityObj.surveyLocalization.hasOwnProperty('feasLng') &&  $scope.feasibilityObj.surveyLocalization.feasLng && $scope.feasibilityObj.surveyLocalization.hasOwnProperty('feasCountry') && $scope.feasibilityObj.surveyLocalization.feasCountry){
                       $scope.countryNotSelected   = false;
                       $scope.langNotSelected      = false; 
                    }

                }).error(function(err) {
                    notify({ message: err.msg, classes: 'alert-danger', duration: 3000 });
                });
            }
        };
                    
        /**
         *  Enable `Save` Button if `feasCountry` conatains any Country
         */

        $scope.selectCountry = function(country){
           clearFeasData();
           $scope.langNotSelected=true;
            if($scope.feasibilityObj.surveyLocalization && $scope.feasibilityObj.surveyLocalization.hasOwnProperty('feasCountry') && $scope.feasibilityObj.surveyLocalization.feasCountry){
                $scope.enableSaveBtn    = true;
                
                $scope.feasLngByCountry = []; /* Remove the Older Entry*/
                _.each($scope.surveyLocalization,function(localRecord){
                    _.filter(localRecord.lang,function(lngData){
                        if(localRecord.short_Code === $scope.feasibilityObj.surveyLocalization.feasCountry){
                            $scope.feasLngByCountry.push({
                                label : lngData.name,
                                value : lngData.short_code
                            });
                            $scope.countryNotSelected = false;
                            
                        }
                    });
                    
                });

               if($scope.feasibilityObj.hasOwnProperty('surveyLocalization') && $scope.feasibilityObj.surveyLocalization.hasOwnProperty('feasLng') && $scope.feasibilityObj.surveyLocalization.feasLng){
                      $scope.isGenipopMode = false;
                      $scope.enableSaveBtn = false;
                    _.each(feasibilityPayload.data,function(payloadRecord){
                       if(payloadRecord.hasOwnProperty('surveyLocalization') && payloadRecord.surveyLocalization.hasOwnProperty('feasCountry') && payloadRecord.surveyLocalization.hasOwnProperty('feasLng') && payloadRecord.surveyLocalization.feasLng === $scope.feasibilityObj.surveyLocalization.feasLng && payloadRecord.hasOwnProperty('s_id') && payloadRecord.s_id === supplierId && payloadRecord.surveyLocalization.feasCountry === $scope.feasibilityObj.surveyLocalization.feasCountry){
                          $scope.payload = angular.copy(payloadRecord);
                          $scope.feasibilityObj=$scope.payload;
                          if(payloadRecord.hasOwnProperty('genpopMode') && payloadRecord.genpopMode !== 0){
                             $scope.isGenipopMode  = true;
                             $scope.langNotSelected=false;
                             $scope.detectedEmptyFld = false;
                            }else{
                              $scope.isGenipopMode  = false;
                              $scope.detectedEmptyFld = false;
                            }
                              $scope.enableSaveBtn = true;
                        }
                    })   
                               
                }
               
            }
            // PD-1372
            if($scope.feasibilityObj.surveyLocalization && $scope.feasibilityObj.surveyLocalization.hasOwnProperty('feasLng') &&  $scope.feasibilityObj.surveyLocalization.feasLng == $scope.feasLngByCountry[0].value){
                     $scope.langNotSelected=false;
            }
            if($scope.feasibilityObj && $scope.feasibilityObj.hasOwnProperty('genpopMode')){
               if($scope.feasibilityObj.genpopMode === 1){
                    $scope.isGenipopMode=true;
                }
            }
        }

        /**
         *  save pricing data in API
         */

        $scope.savePricingMargin = function(){
            if($scope.margin != undefined){
                var marginObj = new Object();
                marginObj.buyer_id = $scope.selectedBuyer.id;
                marginObj.supplier_id = $scope.selectedSupplier.value;
                marginObj.margin = $scope.margin;
                //Start loader
                $scope.loader.show = true;
                //post margin here
                feasibilityService.savePricingMargin(marginObj).success(function(res) {
                    $scope.loader.show = false;
                    notify({ message: 'Pricing Saved !', classes: 'alert-success', duration: 2000 });
                }).error(function(err) {
                    $scope.loader.show = false;
                    notify({ message: err.msg, classes: 'alert-danger', duration: 3000 });
                });
            }else {
                notify({
                    message: 'Margin is not valid',
                    classes: 'alert-warning',
                    duration: 2000
                });
            }
        }

        /**
         *  get pricing data from API
         */

        $scope.getPricingMargin = function(buyer_id, supplier_id){
            //Start loader
            $scope.loader.show = true;
            //get margin here
            feasibilityService.getPricingMargin(buyer_id, supplier_id).success(function(res) {
                $scope.loader.show = false;
                $scope.margin = res.hasOwnProperty('margin') ? res.margin : null;
            }).error(function(err) {
                $scope.loader.show = false;
                notify({ message: err.msg, classes: 'alert-danger', duration: 3000 });
            });
        }



         // PD-1372
         /**
           *  on langage change fetch feas data for supplier.  
          */
        $scope.selectLanguage=function(){
            clearFeasData();
            $scope.langNotSelected = false;
            $scope.enableSaveBtn   = true;
           
            $scope.isGenipopMode = false;
            if($scope.feasibilityObj && $scope.feasibilityObj.hasOwnProperty('genpopMode')){
               if($scope.feasibilityObj.genpopMode === 1){
                    $scope.isGenipopMode=true;
                }
            }
           if($scope.feasibilityObj.hasOwnProperty('surveyLocalization') &&  $scope.feasibilityObj.surveyLocalization && $scope.feasibilityObj.surveyLocalization.hasOwnProperty('feasLng') && $scope.feasLngByCountry[0].label && $scope.feasibilityObj.surveyLocalization.feasLng && $scope.feasibilityObj.surveyLocalization.hasOwnProperty('feasCountry')){
                _.each(feasibilityPayload.data, function(payloadRecord){
                    
                    if(payloadRecord.hasOwnProperty('surveyLocalization') && payloadRecord.surveyLocalization.hasOwnProperty('feasLng') && payloadRecord.surveyLocalization.hasOwnProperty('feasCountry') && payloadRecord.hasOwnProperty('s_id') && payloadRecord.surveyLocalization.feasLng === $scope.feasibilityObj.surveyLocalization.feasLng && payloadRecord.s_id === supplierId && payloadRecord.surveyLocalization.feasCountry === $scope.feasibilityObj.surveyLocalization.feasCountry){
                      $scope.record = angular.copy(payloadRecord);
                      $scope.feasibilityObj=$scope.record;
                       if(payloadRecord.hasOwnProperty('genpopMode') && payloadRecord.genpopMode !== 0){
                         $scope.isGenipopMode  = true;
                         
                       }else{
                         $scope.isGenipopMode  = false;
                        }
                    }
                })
            }
        }


        //PD-1393 Function to update supplier Type public/private
        $scope.updateSupplierType = function(supplierStatus) {
            $scope.loader.show = true;
            var updateJson = {
               "supplier_type": (supplierStatus.supplerType ? "private": "public"),
               "cmp": parseInt(supplierStatus.value)
            }
            settingService.updateSetting(parseInt(supplierStatus.value),updateJson).success(function(res) {
                $scope.loader.show = false;
            }).error(function(err) {
                $scope.loader.show = false;
                notify({ message: err.msg, classes: 'alert-danger', duration: 3000 });
            })
        }

        function clearFeasData(){
            if($scope.feasibilityObj.hasOwnProperty('desktopMonthlyActUsr')){
               $scope.feasibilityObj.desktopMonthlyActUsr="";
                
              }if($scope.feasibilityObj.hasOwnProperty('mobileMonthlyActUsr')){
               $scope.feasibilityObj.mobileMonthlyActUsr="";
                
            }if($scope.feasibilityObj.hasOwnProperty('patnrDelvryMulplr')){
               $scope.feasibilityObj.patnrDelvryMulplr="";
            }
        }

        $scope.saveCurrency = function () {
            if (!$scope.selectedCurrency.currencyShortCode) {
                return notify({
                    message: 'Please select the currency',
                    classes: 'alert-warning',
                    duration: 2000
                });
            }

            if ($scope.selectedCurrency.fx === undefined || $scope.selectedCurrency.fx === '' || $scope.selectedCurrency.fx === 0 ||  $scope.selectedCurrency.fx === null
            || $scope.selectedCurrency.CRRate === undefined || $scope.selectedCurrency.CRRate === '' || $scope.selectedCurrency.CRRate === 0 || $scope.selectedCurrency.CRRate === null
            || $scope.selectedCurrency.symbol === undefined || $scope.selectedCurrency.symbol === '' || $scope.selectedCurrency.symbol === 0 || $scope.selectedCurrency.symbol === null) {
                return notify({
                    message: 'Currency code, CR Rate or symbol is not valid',
                    classes: 'alert-warning',
                    duration: 2000
                });
            }

            $scope.loader.show = true;

            currencyService.updateCurrencyDetails($scope.selectedCurrency).success(function (res) {
                $scope.loader.show = false;
                notify({message: 'Currency Saved !', classes: 'alert-success', duration: 2000});
                fetchAllCurrencies();
            }).error(function(err) {
                $scope.loader.show = false;
                notify({message: err.msg, classes: 'alert-danger', duration: 3000});
            });
        };
    }
]);


/**
 * Created by Parveen on 3/9/2016.
 */

angular.module('pureSpectrumApp')

    .controller('priceCardCtrl',['$scope','$http','$state','$cookies','$window','config','localStorageService','pricingService','notify','commonApi' ,'ngProgressLite', '$parse','$rootScope','user',function($scope, $http, $state, $cookies, $window, config, localStorageService, pricingService, notify, commonApi, ngProgressLite, $parse,$rootScope,user){

        $scope.priceCardObj={};
        $scope.dataAll={};
        var cntId = config.countryDefault;
        var lngId = config.languageDefault;
        $scope.deactivateObj = {};
        
        var userInfo= localStorageService.get('logedInUser');
          $rootScope.userEmail=userInfo.eml;
        $scope.priceCardObj.usr_id=userInfo.id;
        $scope.buyerCombo=[
            {
                name: "All",
                id: 0
            }
        ];
        setCountry();
       
        $scope.cntryMaster=[];
        setBuyerCounterParty();
        $scope.lng = 'English';
        $scope.cntry='United States';
        $scope.byrOp='All';
        showLanguagesInCombo();
        $scope.tab = 2;

        $scope.dataAll.country = cntId;
        $scope.dataAll.language = lngId;
        $scope.dataAll.buyerCounterParty = 0;
        getSupplierInfo($scope.dataAll.language, $scope.dataAll.country, $scope.dataAll.buyerCounterParty);


        $scope.getCountry = function(data){
            $scope.dataAll.country=data.id;
            $scope.cntry = data.name;
            getSupplierInfo($scope.dataAll.language, $scope.dataAll.country, 0);
            commonApi.getLanguageByCountry(data.id).success(function (data) {
                $scope.lngMaster=[];
                if(data.languages!=null) {
                    $scope.lngMaster = data.languages;
                    $scope.lng = data.languages[0].name;
                }
            }).error(function (err) {
                notify({message:err.msg,classes:'alert-danger',duration:2000} );
            })
        }

        $scope.getLanguage = function(data){
            $scope.dataAll.language=data.id;
            $scope.lng = data.name;
            getSupplierInfo($scope.dataAll.language, $scope.dataAll.country, $scope.dataAll.buyerCounterParty);
        }

        $scope.getBuyerCounterparty = function(data){
            $scope.dataAll.buyerCounterParty=data.id;
            $scope.byrOp = data.name;
            //getCombinationPriceCard();
            getSupplierInfo($scope.dataAll.language, $scope.dataAll.country, $scope.dataAll.buyerCounterParty);
        }


        function setCountry(){
            ngProgressLite.start();
            commonApi.countries().success(function (data) {
                ngProgressLite.done();
                if(data.countries!=null) {
                    $scope.cntryMaster = data.countries.values;
                }
            }).error(function (err) {
                notify({message:err.msg,classes:'alert-danger',duration:2000} );
            })
        }

        function setBuyerCounterParty(){
            ngProgressLite.start();
            commonApi.getBuyerCounterParty().success(function (data) {
                ngProgressLite.done();
                //$scope.buyerCombo=data.company;
                for (var i = 0; i < data.company.length; i++) {
                    $scope.buyerCombo.push(data.company[i]);
                };
            }).error(function (err) {
                notify({message:err.msg,classes:'alert-danger',duration:2000} );
            })
        }

        $scope.savePricingCardData = function(){
            ngProgressLite.start();

            if(! $scope.dataAll.language ){
                $scope.priceCardObj.language= lngId;
            }
            else{
                $scope.priceCardObj.language=$scope.dataAll.language;
            }
            if(! $scope.dataAll.country){
                $scope.priceCardObj.country= cntId;
            }
            else{
                $scope.priceCardObj.country=$scope.dataAll.country;
            }
            if(! $scope.dataAll.buyerCounterParty){
                $scope.priceCardObj.buyerCounterParty=0;
            }
            else{
                $scope.priceCardObj.buyerCounterParty=$scope.dataAll.buyerCounterParty;
            }
            $scope.priceCardObj.company=userInfo.cmp;
            $scope.priceCardObj.userId=userInfo.id;

            pricingService.addPriceCard($scope.priceCardObj).success(function(data){
                ngProgressLite.done();
                notify({message:'Price card information has been saved successfully',classes:'alert-success',duration:2000} );
                getSupplierInfo($scope.priceCardObj.language, $scope.priceCardObj.country, $scope.priceCardObj.buyerCounterParty);
            }).error(function(err){
                notify({message:'Please provide all required information',classes:'alert-danger',duration:2000} );
            })
        }

        $scope.deactivatePriceCard=function(){
            $scope.priceCardObj.isActive = false;
            //if($scope.deactivateObj && $scope.deactivateObj.supplier && $scope.deactivateObj.supplier.length > 0) {
                ngProgressLite.start();
                pricingService.deactivateSupplier($scope.dataAll).success(function (data) {
                    ngProgressLite.done();
                    $scope.dctEnable = 'false';
                    notify({
                        message: 'Your request has been saved successfully',
                        classes: 'alert-success',
                        duration: 2000
                    });
                    $scope.priceCardObj = '';
                }).error(function (err) {
                    notify({message: err.msg, classes: 'alert-danger', duration: 2000});
                })
            //} else {
            //    console.log("no supplier exist");
            //}
        }

        $scope.cancelSupplier=function(){
            if(! $scope.dataAll.buyerCounterParty){
                $scope.dataAll.buyerCounterParty=0;
            }
            if(! $scope.dataAll.language){
                $scope.dataAll.language=lngId;
            }
            if(! $scope.dataAll.country){
                $scope.dataAll.country=cntId;
            }
            getSupplierInfo($scope.dataAll.language, $scope.dataAll.country, $scope.dataAll.buyerCounterParty);

        }


        function getSupplierInfo(lng, cntry, byr){
            $scope.dctEnable='false';
        
            $scope.pricingMethod='';
            ngProgressLite.start();
            pricingService.getSupplier(lng,cntry, byr).success(function (data) {
                ngProgressLite.done();
                if(data.apiStatus){
                    if(data.supplier.length > 0){
                        $scope.priceCardObj = data.supplier[0];
                        $scope.deactivateObj = data;
                        //$scope.dctEnable='true';
                    }else{
                        //$scope.dctEnable='false';
                    }

                  $scope.pricingMethod =data.pricingMethod; // either formula or manual_price_card
                    if($scope.pricingMethod ==  'formula') {
                        //formula
                        $scope.tab = 2;
                        $scope.dctEnable='true';
                    } else if($scope.pricingMethod ==  'manual_price_card'){
                        //manual_price_card
                        $scope.tab = 3;
                        $scope.dctEnable='true';
                    } else {
                        // 
                        $scope.dctEnable='false'
                        $scope.priceCardObj = '';
                        $scope.tab = 2;
                    }
                }
                else{
                    $scope.priceCardObj='';
                }
            }).error(function (err) {
                notify({message:err.msg,classes:'alert-danger',duration:2000} );
            })
        }

        function getCombinationPriceCard(){
            if(!$scope.dataAll.language){
                $scope.dataAll.language=lngId;
            }
            if(!$scope.dataAll.country){
                $scope.dataAll.country=cntId;
            }
            getSupplierInfo($scope.dataAll.language, $scope.dataAll.country, $scope.dataAll.buyerCounterParty)
        }

        function showLanguagesInCombo() {
            commonApi.getLanguageByCountry(cntId).success(function (data) {
                if (data.languages != null) {
                    $scope.lngMaster = data.languages;
                }
            }).error(function (err) {
                notify({message: err.msg, classes: 'alert-danger', duration: 2000});
            })
        }

        //logout function and reset pssword function
        /*$rootScope.logout = function(){
            console.log("here");
            console.log(JSON.stringify(userInfo)+"  userInfo");
            user.logoutUser(userInfo.id).success(function (data) {
                console.log(data+'  data');
                localStorageService.clearAll();
                sessionStorage.removeItem("token");
                console.log("for logout");
                $state.go('login',{reload : true});
                $state.reload();
            }).error(function (err) {
                notify({message:'Error in logout',classes:'alert-danger',duration:2000} );
            })

        };*/
            
        $rootScope.resetPassword = function() {
            $state.go('resetPassword');
        };

        //PD-557
        $scope.setTab = function(newTab){
          $scope.tab = newTab;
        };

        $scope.isSet = function(tabNum){
          return $scope.tab === tabNum;
        };


        $scope.csv = {
            content: null,
            header: false,
            headerVisible: true,
            separator: ',',
            separatorVisible: true,
            result: null,
            encoding: 'ISO-8859-1',
            encodingVisible: true,
            uploadButtonLabel: "upload a csv file"
        };

        /**
         * Delete all null (or undefined) properties from an object.
         */
        function delete_null_properties(test) {
            for (var i in test) {
                if (test[i] == null ||  isNaN(test[i]) || test[i] == '') {
                    delete test[i];
                }
            }
            return test;
        }



        $scope.saveUploadCSV = function (uploadJson) {
            var json = angular.copy(uploadJson);
            if(json == undefined || json == null || json == '' ) {
                notify({
                    message: "Please upload CSV file",
                    classes: 'alert-danger',
                    duration: 5000
                });
                return;
            }
            delete json.filename
            var header_length = json[0];
            if(header_length) {
                for(var j = 0 ; j <= 100 ; j++) {
                    if(header_length[j] === "" && j === 0) {

                    }
                    else if(header_length[j] !== "") {

                    }
                    else {
                        notify({
                            message: "Uploaded CSV file is invalid",
                            classes: 'alert-danger',
                            duration: 5000
                        });
                        return;
                    }
                }
            }
            delete json[0];
            for(var k in json) {
               if(k == 100) {
                if(json[k][0] == "100%") {

                }
                else {
                    notify({
                        message: "Uploaded CSV file is invalid",
                        classes: 'alert-danger',
                        duration: 5000
                    });
                    return;
                }
               }
            }

            var isCsvCorroup = false;
            var rowCount = 0;
            var columnCount = 0;
            var obj = {};
            var arrObj = [];
            for(var i in json) {
                for(var j in json[i]) {
                    
                    var isCorrect = true;;
                    if(json[i][j].substr(-1) == "%") { // it represent first column (IR)
                        isCorrect = false;  // we are deleting it bcz not going to push it into db
                        delete json[i][j];
                    }

                    if(isCorrect && json[i][j] !== "" && isNaN(parseFloat(json[i][j].trim().slice(1)))) { // if any  column value is not number than will be promp an error
                        console.log("error in this, i=>"+i+' j =>'+j+' value --->'+json[i][j]);
                        isCsvCorroup = true;
                    } else if(isCorrect && (i <= 100 && j <= 100 ) ){
                        // if everthing is correct going to push it into final object array
                        var modVal = json[i][j].trim().slice(1);
                        json[i][j] = parseFloat(modVal);
                        rowCount++;
                        columnCount++;

                    } else {
                        //console.log("else , i=>"+i+' j =>'+j+' value --->'+json[i][j]);
                    }
                }
                       
            }
            if((rowCount < 10000 || columnCount < 10000) && !isCsvCorroup) {

                notify({
                    message: "Error: Upload failed, you must define all 100%IR by 100min loi combinations.",
                    classes: 'alert-danger',
                    duration: 5000
                });
                return;
            }

            if(isCsvCorroup) {
     
                notify({
                    message: "Error: Unexpected characters present in file.  Please check your upload",
                    classes: 'alert-danger',
                    duration: 5000
                });
                return;
            }

            for(var k in json) {
                if (k <= 100) {
                    obj[k] = delete_null_properties(json[k]);
                }
                
            }

            arrObj.push(obj);

            $scope.manualPriceCard = {
                supplier_id: userInfo.cmp,
                user_id: userInfo.id,
                price_card : arrObj
            }
            $scope.manualPriceCard.buyerCounterParty= $scope.dataAll.buyerCounterParty ? $scope.dataAll.buyerCounterParty : 0;

            pricingService.supplierFileUpload( $scope.dataAll.language,  $scope.dataAll.country, $scope.manualPriceCard).then(
                function(response) {
                    notify({
                        message: " Manual Price card csv file successfully uploaded.",
                        classes: 'alert-success',
                        duration: 5000
                    });
                },
                function(error) {
      
                    notify({
                        message: error,
                        classes: 'alert-danger',
                        duration: 5000
                    });
                }
            );
            //}
            /*else {
                notify({message:"First Select the file from browse option",classes:'alert-danger',duration:3000} );
            }*/
                
        };


        $scope.viewLatestUpload = function() {
           $scope.loader = {show: true};
           $scope.arrayForCpiValuesColumnWise = [];

           pricingService.getSupplierManualRateCard($scope.dataAll.language, $scope.dataAll.country, $scope.dataAll.buyerCounterParty).then(function(response) {
            
            $scope.supplierManualCard = response['data']['priceCard'][0];
            $scope.irKeys = Object.keys($scope.supplierManualCard);
            angular.forEach($scope.supplierManualCard, function(manualCards, manualCardsIndex){
                var arrayForCpiValues =[]
              angular.forEach(manualCards, function(card, cardIndex){
                arrayForCpiValues.push(card);
              })
                $scope.arrayForCpiValuesColumnWise.push({
                    index:manualCardsIndex,
                    value:arrayForCpiValues
                });
            });

            $scope.loader.show = false;



           }, function(error) {
            console.log("error : ", error);
           })

        }

        $scope.downloadLatestUpload = function() {
            
            pricingService.downloadSupplierManualCard($scope.dataAll.language, $scope.dataAll.country, $scope.dataAll.buyerCounterParty).then(function(response) {

                response['data'] = response['data'].replace(response['data'].charAt(0), ' ');
                var fileName = 'ManulaPriceCard_'+$scope.dataAll.language+'_'+$scope.dataAll.country+'_'+userInfo.cmp;

                var anchor = angular.element('<a/>');
                anchor.css({display: 'none'}); 
                angular.element(document.body).append(anchor);

                anchor.attr({
                    href: 'data:attachment/csv;charset=utf-8,' + encodeURI(response['data']),
                    target: '_blank',
                    download: fileName+'.csv'
                })[0].click();

                anchor.remove();

            });


        }

    }]);



angular.module('pureSpectrumApp')
.controller('reconcileCtrl',['$scope','$http','$state', '$timeout','localStorageService','user','notify', 'createSurvey', function($scope, $http, $state, $timeout, localStorageService, user, notify, createSurvey){

	//var userData = localStorageService.get('logedInUser');
	//console.log('userData '+JSON.stringify(userData));
	$scope.inputBocClick = function() {
      angular.element('#fileModel').trigger('click');
    }
    $scope.loader = {show:false}; 
    $scope.uploadBuyerReconciliationFile = function() {
	    $scope.loader.show = true;
	    $scope.uploadFile = document.getElementById('fileModel').files[0];
	    var regex = new RegExp("(.*?)\.(csv|xlsx|xls)$");
	    if($scope.uploadFile) {
	        var fileName = $scope.uploadFile.name;
	        if ((regex.test(fileName))) {
	            createSurvey.uploadReconciliationFile($scope.uploadFile).success(function(res) {
	                    //$scope.tabs.makeDisable = false;
	                    $scope.loader.show = false;
	                    delete $scope.param.file;
	                    $scope.totalFileTrans = res.msg.totalFileTrans;
	                    $scope.changeToComplt = res.msg.changeToCompltTrans;
	                    $scope.rejectTrans = res.msg.rejectedTrans;
	                    $scope.transStatusComplt = res.msg.statusComplt;
	                    angular.element("input[type='file']").val(null);
	                    angular.element("input[type='text']").val(null);
	                    //console.log("res-------", res, res.msg, res.msg.totalFileTrans, res.msg.changeComplt, res.msg.rejectedTransactions)
	                    if (res.msg != "error") {
	                        $scope.openModel = angular.element('#reconcileModal');
	                    }
	                    if (res.msg == "error") {
	                        $scope.openModel = angular.element('#reconcileWarnModal');
	                    }

	                    $scope.openModel.modal('show');
	                })
	                .error(function(err) {
	                    delete $scope.param.file;
	                    $scope.loader.show = false;
	                    angular.element("input[type='file']").val(null);
	                    angular.element("input[type='text']").val(null);
	                    if (err.msg == "error") {
	                        $scope.openModel = angular.element('#reconcileWarnModal');
	                        $scope.openModel.modal('show');
	                    } else {
	                        $scope.loader.show = false;
	                        notify({
	                            message: "Something went wrong",
	                            classes: 'alert-danger',
	                            duration: 2000
	                        });
	                    }
	                })
	        } else {
	            delete $scope.param.file;
	            $scope.loader.show = false;
	            notify({
	                message: "Please select .csv/.xls/.xlsx file to upload",
	                classes: 'alert-danger',
	                duration: 2000
	            });
	        }
	    } else {
	        $scope.loader.show = false;
	        notify({
	            message: "First select the file to upload",
	            classes: 'alert-danger',
	            duration: 2000
	        });
	    }
	}

	/*
   *@ update STC by upload reconcile file trans IDs
   */
    $scope.confirmReconciliation = function() {
    	$scope.loader.show = true;
        createSurvey.confirmForReconcile().then(
            function(success) {
                $scope.loader.show = false;
                notify({message: "File upload Reconciliation done successfully", classes:'alert-success', duration:2000} );
            },
            function(error) {
                $scope.loader.show = false;
                notify({message : error , classes:'alert-danger', duration:2000} );
            }
      );
    }

    /*
     *@ decline reconciliation
     */
    $scope.declineReconciliation = function(){
       $scope.loader.show = true;
       createSurvey.declineReconciliationProcess().then(
           function(success){
               notify({message: "You decline the reconciliation process", classes:'alert-success', duration:2000} );
               $scope.loader.show = false;
           },
           function(error){
               notify({message : error , classes:'alert-danger', duration:2000} );
               $scope.loader.show = false;
           }
        )
   }

    
    /*Show Date for Reconcile Approve content*/
    getReconcileDate();

    function getReconcileDate() {
        $scope.monthNames = [
          "January", "February", "March",
          "April", "May", "June", "July",
          "August", "September", "October",
          "November", "December"
        ];
        /*********************Current month setting*******************************/ 
        $scope.modDate = new Date();
        $scope.date = $scope.prevDate = new Date($scope.modDate.setMonth($scope.modDate.getMonth() + 1));
        $scope.monthIndex = $scope.date.getMonth();
        $scope.year = $scope.date.getFullYear();
        $scope.leapYear = leapYear($scope.year); 
        if($scope.leapYear) {
          $scope.day = ["31", "29", "31", "30", "31", "30", "31", "31", "30", "31", "30", "31" ]
        }
        $scope.day = ["31", "28", "31", "30", "31", "30", "31", "31", "30", "31", "30", "31" ]

        $scope.currentMonth = $scope.monthNames[$scope.monthIndex] + ' ' + $scope.day[$scope.monthIndex] + ' ' + $scope.year;

        /*********************Previous month setting*******************************/ 
        $scope.prvMOnthObj = new Date();
        $scope.prevDate = new Date($scope.prvMOnthObj.setMonth($scope.prvMOnthObj.getMonth()));
        $scope.prvMonthIndex = $scope.prevDate.getMonth();
        $scope.prvYear = $scope.prevDate.getFullYear();
        $scope.prevMonth = $scope.monthNames[$scope.prvMonthIndex] + ' ' + $scope.day[$scope.prvMonthIndex] + ' ' + $scope.prvYear;
    }

    /*
    * Function to check leap year
    */
    function leapYear(year){
      return ((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0);
    }


}]);
angular.module('pureSpectrumApp')
.controller('reportCntrl' ,['$scope', '$state', 'ngProgressLite', 'notify', 'localStorageService', 'config', 'reportService', function($scope, $state, ngProgressLite, notify, localStorageService, config, reportService){
    var userInfo= localStorageService.get('logedInUser');
    $scope.loader = {show: false};
    $scope.isOperatorUser = (userInfo.operatorAcssLvls !== undefined && userInfo.operatorAcssLvls !== 'none') ? true : false
    $scope.report = {};
    $scope.report.date = {startDate: null, endDate: null};
    $scope.downloadReport = function(){
        var daterange = $scope.report.date;
        $scope.loader.show = true;
        if(daterange.startDate == "" || daterange.startDate == null || daterange.endDate == null ||daterange.endDate == "") {
            notify({
                message: 'Please Enter Start & End Date ',
                classes: 'alert-danger',
                duration: 3000
            });
            $scope.loader.show = false;
            return false;
        }
        var stDt = moment($scope.report.date.startDate).format("YYYY-MM-DD");
        var endDt = moment($scope.report.date.endDate).format("YYYY-MM-DD");
	
	// st is used to send the toggle status 
        var st = 'All';
        if($scope.switchStatus){
            st = 'Complete';
        }
       
        reportService.downloadReport(userInfo.id, userInfo.cmp, stDt, endDt, st).success(function (response) {
            //console.log("response ",JSON.stringify(response));
            var fileName = response.fileName;
            window.location.assign(reportService.downloadFile(fileName));
            $scope.loader.show = false;
        }).error(function (err) {
            notify({message: err.msg, classes: 'alert-danger', duration: 2000});
            $scope.loader.show = false;
        });
    }

    $scope.downloadLoginReport = function(){
        $scope.loader.show = true;
        var date = moment().format("YYYY-MM-DD");
        var anchor = angular.element('<a/>');
        reportService.downloadLoginReport().success(function (response) {
            //downloadCSV(data, 'user-login-report');
            //console.log("response ",JSON.stringify(response));
            var fileName = response.fileName;
            window.location.assign(reportService.downloadFile(fileName));
            $scope.loader.show = false;
        }).error(function (err) {
            notify({message: err.msg, classes: 'alert-danger', duration: 2000});
            $scope.loader.show = false;
        });
    }
    $scope.bckDashboard = function() {
        $state.go('home');
    };

    function downloadCSV(data, fileName){
        var date = moment().format("YYYY-MM-DD");
        var anchor = angular.element('<a/>');
        anchor.attr({
            href: 'data:attachment/csv,' + encodeURI(data),
            target: '_blank',
            download: fileName + '-' + date + '.csv'
        })[0].click();
    }        
}]);


psApp.controller('reportsDashboardCtrl', ['$scope','localStorageService','$http','$state','user','authenticationService','notify', 'createSurvey','DTOptionsBuilder', 'DTColumnDefBuilder', 'commonApi', 'companyService', 'reportService', 'config', function($scope, localStorageService, $http, $state, user, authenticationService, notify, createSurvey,DTOptionsBuilder, DTColumnDefBuilder, commonApi, companyService, reportService, config){

	$scope.active = {reportTab: 'performance'};
	$scope.loader = {show: false};
	$scope.countries = [];
	$scope.languageCnt = [];
	$scope.selectedLanguage = [];
	$scope.suppliers = [];
	$scope.buyersArr = [];
	$scope.psidReportArr = [];
	$scope.profileDataReporrt = [];
	$scope.supplierHistoryData = [];
	$scope.surveyTrafficRecord = [];
	$scope.selectedBuyersArr = [];
	$scope.selectedSuppliersArr = [];
	$scope.transactionStatusArr = [];
	$scope.totalTransStatus = {};
	$scope.selectedCountry = {
		contryName : 'All',
		short_code: ''
	};

	$scope.selectedContries = [];
	$scope.mainSettings = {
        scrollableHeight: '200px',
        scrollable: true,
        enableSearch: true
    };

	$scope.selectedSupplier = {
		name: 'All',
		id: 0
	}

	$scope.selectedBuyers = {
		name: 'All',
		id: 0
	}

	$scope.psidTransObject = {
		psid: "",
		transaction_id: "",
		resp_id: "",
		session_id: ""
	};

	$scope.inputBoxStatus = {
		psid_input: false,
		transaction_input : false,
		respondent_input: false,
		session_input: false
	}

	$scope.psidCheckModels = {
		reportType: "survey_data"
	};
	
	$scope.selectedTransStatus = [];
	if(_.has(config, "transStatus")) {
		$scope.transactionStatus = config.transStatus;
		_.each(config.transStatus, function(snglTrans) {
			$scope.selectedTransStatus.push({id: snglTrans.id});
		})
	}

	$scope.setReportTab = function(newTab){
      $scope.operatorReportData = {};
      $scope.active.reportTab = newTab;
       $scope.psidTransObject = {
			psid: "",
			transaction_id: "",
			resp_id: "",
			session_id: ""
		};
      $scope.checkInputBoxStatus();
    };
    $scope.isReportSet = function(tabNum){
        return $scope.active.reportTab === tabNum;
    };
    var statusCodeArr = [16,17,18,19,20,21,30,31,33];
    getCountries();
    getAllSuppliesr();
    getAllBuyers();

    function getCountries() {
        $scope.loader.show = true;
        $scope.country = new Array();
        commonApi.countries().success(function(data) {
            if (data.countries != null) {
                $scope.countries = data.countries.values;
                _.each($scope.countries, function(cntVal) {
                	$scope.selectedContries.push({"name": cntVal.name, "id": cntVal.id});
                	 _.each(cntVal.lang, function(cntLang) {
                	 	var object = {
                	 		"cntArr" : [],
                	 		"name": cntLang.name,
                	 		"l_id": cntLang.id
                	 	}
                	 	var findLang = _.findWhere($scope.languageCnt, {"name": cntLang.name});
                	 	if(findLang) {
                	 		var findIndex = _.indexOf($scope.languageCnt, findLang);
                	 		if(findIndex > -1) {
                	 			$scope.languageCnt[findIndex].cntArr.push(cntVal.id);
                	 		}
                	 	}
                	 	else {	
                	 		object.cntArr.push(cntVal.id);
                	 	    $scope.languageCnt.push(object);
                	 	}

                	 	$scope.selectedLanguage.push({"name": cntLang.name, "l_id": cntLang.id});
                	 })
                })
                $scope.selectedLanguage = _.uniq($scope.selectedLanguage, "name");
                for(var i = 1; i <= $scope.selectedLanguage.length; i++) {
                	$scope.selectedLanguage[i-1]["id"] = i;
                	$scope.languageCnt[i-1]["id"] = i;
                }
            }
            $scope.loader.show = false;
        }).error(function(err) {
            $scope.loader.show = false;
            notify({
                message: err.msg,
                classes: 'alert-danger',
                duration: 2000
            });
        });
    }

    //get list of Suppliers
	function getAllSuppliesr() {
		$scope.loader.show = true;
		var bodyObjet = {
			"supplier_type": "public",
			"isBuyr" : false
		}
		companyService.getAllSuppliersData(bodyObjet).then(
			function(response) {
				if(response && response.data && response.data.companies && response.data.companies.length > 0) {
					$scope.suppliers = response.data.companies;
					_.each(response.data.companies, function(supplr) {
						$scope.selectedSuppliersArr.push({name: supplr.name, id: supplr.id});
					})
					$scope.loader.show = false;
				}else {
					$scope.loader.show = false;
					notify({message:"No Suppliers found",classes:'alert-warning',duration:3000} );
				}
			}, 
			function(error) {
				$scope.loader.show = false;
				notify({message:"Error getting Suppliers",classes:'alert-danger',duration:3000} );
			});
	};

	//get list of Buyers
	function getAllBuyers() {
		$scope.loader.show = true;
		var bodyObjet = {
			"isSpplr": false,
			"isBuyr" : true
		}
		companyService.getAllBuyersData(bodyObjet).then(
			function(response) {
				if(response && response.data && response.data.companies && response.data.companies.length > 0) {
					$scope.buyersArr = response.data.companies;
					_.each(response.data.companies, function(buyer) {
						$scope.selectedBuyersArr.push({name: buyer.name, id: buyer.id});
					})
					$scope.loader.show = false;
				}else {
					$scope.loader.show = false;
					notify({message:"No Buyers found",classes:'alert-warning',duration:3000} );
				}
			}, 
			function(error) {
				$scope.loader.show = false;
				notify({message:"Error getting Buyers",classes:'alert-danger',duration:3000} );
			});
	};

    //select country
	$scope.selectCountry = function(country) {
		if(country == 'all') {
			$scope.selectedCountry.contryName = 'All';
			$scope.selectedCountry.short_code = 'All';
		}else {
			$scope.selectedCountry.contryName = country.name;
			$scope.selectedCountry.short_code = country.short_Code;
		}
	};

	//select Suppliers
	$scope.selectSupplier = function(supplr) {
		if(supplr == 'all') {
			$scope.selectedSupplier.name = 'All';
			$scope.selectedSupplier.id = 0;
		}else {
			$scope.selectedSupplier.name = supplr.name;
			$scope.selectedSupplier.id = supplr.id;
		}
	};

	//select Buyers
	$scope.selectBuyers = function(supplr) {
		if(supplr == 'all') {
			$scope.selectedBuyers.name = 'All';
			$scope.selectedBuyers.id = 0;
		}else {
			$scope.selectedBuyers.name = supplr.name;
			$scope.selectedBuyers.id = supplr.id;
		}
	};

    $scope.getReport = function(dateRange, reportCategory){
      if(dateRange && dateRange.startDate && dateRange.endDate && reportCategory){
      	$scope.loader.show = true;
        dateRange.startDate = moment(dateRange.startDate).format("YYYY-MM-DD");
        dateRange.endDate = moment(dateRange.endDate).format("YYYY-MM-DD");
        console.log('dateRange ',JSON.stringify(dateRange));
        console.log('reportCategory ',reportCategory);

        if(reportCategory == 'performance'){
        	if($scope.selectedTransStatus.length > 0 && $scope.selectedBuyersArr.length > 0) {
        		var performanceObj = {
        			buyers: $scope.selectedBuyersArr,
        			status: $scope.selectedTransStatus
        		}
	        	createSurvey.getPerformanceReport(dateRange, $scope.selectedCountry.short_code, performanceObj).success(function(response){
	        		if(response && response.apiStatus == "success" && response.result.length > 0){
	        			//console.log('performance response ',JSON.stringify(response));
	        			/*Empty the other Table response*/
	        			$scope.statsData = [];
	        			$scope.transData = [];
	        			$scope.salesData = [];
	        			$scope.supplierData = [];
	        			$scope.psidReportArr = [];
	        			$scope.profileDataReporrt = [];
		                $scope.supplierHistoryData = [];
		                $scope.surveyTrafficRecord = [];
		                $scope.transactionStatusArr = [];
	        			/*Empty the other Table response*/

	        			$scope.performance = response.result;
	        			_.each($scope.performance, function(eachPer){
	        				var buyerRevenue = new Number(),
			                	supplierRevenue = new Number(),
			                 	completes = new Number(),
			                 	validClicks = new Number(),
			                 	buyerClicks = new Number(),
			                 	totalClicks = new Number(),
			                 	loi = new Number(),
			                 	countabc = new Number(),
			                 	surveyName = new String(),
			                 	bName = new String()

		                 	_.each(eachPer.Payload, function(eachPayload){ 
		                 		if(eachPayload.statusCode == 21){
		                 			buyerRevenue = eachPayload.buyerRevenue;
			                        supplierRevenue = eachPayload.supplierRevenue;
			                        completes = eachPayload.total;
			                        loi = eachPayload.resLoi;
			                	}
			                	if (eachPayload.statusCode == 21 || eachPayload.statusCode == 18 || eachPayload.statusCode == 17 || eachPayload.statusCode == 19 ) {
			                        validClicks += eachPayload.total;
			                    }
			                    if (eachPayload.statusCode  == 21 || eachPayload.statusCode  == 18 || eachPayload.statusCode  == 17 || eachPayload.statusCode  == 19 || eachPayload.statusCode  == 20 || eachPayload.statusCode  == 30) {
			                        buyerClicks += eachPayload.total;
			                    }

			                    totalClicks += eachPayload.total;
			                    surveyName = eachPayload.surveyName;
			                    bName = eachPayload.bName;
					    	});
					    	

					    	eachPer.surveyName = surveyName;
					    	eachPer.bName = bName;
					    	if(eachPer.surveyManagementData[0]) {
						    	if(_.has(eachPer.surveyManagementData[0], "cpi_current")) {
						    		eachPer.cpi = eachPer.surveyManagementData[0].cpi_current.toFixed(2);	
						    	}

						    	eachPer.buyerRevenue = (Math.round((buyerRevenue) * 100) / 100);
						    	eachPer.supplierRevenue = (Math.round((supplierRevenue) * 100) / 100);
						    	eachPer.margin = Math.round((eachPer.buyerRevenue - eachPer.supplierRevenue) * 100) / 100 ;
						    	eachPer.completesInTimeFrame = completes;
						    	eachPer.totalCompletes = eachPer.surveyManagementData[0].fielded;
						    	eachPer.completesRemaining = eachPer.surveyManagementData[0].goal - eachPer.surveyManagementData[0].fielded;
						    	eachPer.loi_launch = Math.round( eachPer.surveyManagementData[0].loi_launch );
						    	eachPer.incidence_launch = Math.round(eachPer.surveyManagementData[0].incidence_launch);
					    	}
					    	eachPer.loi = Math.round( loi  * 100) / 100;
					    	eachPer.incidence_current = Math.round(( validClicks / totalClicks ) * 100 * 100) / 100;
					    	eachPer.totalClicks = totalClicks;
					    	eachPer.buyerClicks = buyerClicks;
					    	eachPer.validClicks = validClicks;
					    	eachPer.totalEPC = Math.round((buyerRevenue / totalClicks) * 100) / 100;
					    	eachPer.buyerEPC = Math.round((buyerRevenue / buyerClicks) * 100) / 100;
					    	eachPer.validEPC = Math.round((buyerRevenue  / validClicks) * 100) / 100;
				        });
	        		}
	        		else {
	        			notify({message : "No Record Found For Performance Report With Selected Criteria" , classes:'alert-danger', duration:2000});
	        		}
	        		$scope.loader.show = false;
	        	}).error(function(err){
	        		$scope.loader.show = false;
	        		notify({message : err , classes:'alert-danger', duration:2000});
					console.log('err ',JSON.stringify(err));
	        	});
            }
            else {
	    		$scope.loader.show = false;
				notify({message:"Please Enter Date Range and Select Values From Drop Down",classes:'alert-danger',duration:3000} );
    	    }
        }else if(reportCategory == 'stats'){
        	createSurvey.getDailyStatsReport(dateRange, $scope.selectedCountry.short_code).success(function(response){
        		if(response && response.apiStatus == "success"){
        			/*Empty the other Table response*/
        			$scope.performance = [];
        			$scope.transData = [];
        			$scope.salesData = [];
        			$scope.supplierData = [];
        			$scope.psidReportArr = [];
        			$scope.profileDataReporrt = [];
	                $scope.supplierHistoryData = [];
	                $scope.surveyTrafficRecord = [];
	                $scope.transactionStatusArr = [];
        			/*Empty the other Table response*/
        			//console.log('statsData '+JSON.stringify($scope.statsData));
        			$scope.statsData = [];
        			var	buyerRevenue = new Number(),
			                supplierRevenue  = new Number(),
			                completes = new Number(),
			                totalClicks = new Number(),
			                validClicks  = new Number(),
			                buyerClicks = new Number();

        			_.each(response.result, function(eachStats){

		                /*console.log('eachSale '+JSON.stringify(eachSale));*/
		                _.each(eachStats.Payload, function(eachStatsPayload){
		                	//console.log('eachStatsPayload '+JSON.stringify(eachStatsPayload));
		                	if(eachStatsPayload.statusCode == 21){
	                        	buyerRevenue += eachStatsPayload.buyerRevenue;
		                        completes += eachStatsPayload.total;
		                        supplierRevenue += eachStatsPayload.supplierRevenue;
		                	}
		                	if(eachStatsPayload.statusCode == 21 || eachStatsPayload.statusCode == 18 || eachStatsPayload.statusCode == 17 || eachStatsPayload.statusCode == 19) {
		                        validClicks += eachStatsPayload.total;
		                    }
		                    if (eachStatsPayload.statusCode == 21 || eachStatsPayload.statusCode == 18 || eachStatsPayload.statusCode == 17 || eachStatsPayload.statusCode == 19 || eachStatsPayload.statusCode == 20 || eachStatsPayload.statusCode == 30) {
		                    	buyerClicks +=  eachStatsPayload.total;
		                    }
		                    
		                    totalClicks += eachStatsPayload.total;
		                    
		                });

	                });
	                var tempStatsObj = {
	                	buyerRevenue: (Math.round(buyerRevenue * 100) / 100),
	                	overallCpi: (Math.round((buyerRevenue/completes) * 100) / 100),
	                	supplierRevenue: (Math.round(supplierRevenue * 100) / 100),
	                	margin : (Math.round((buyerRevenue - supplierRevenue) * 100) / 100),
	                	completes: completes,
	                	marginPerComplete: (Math.round(((buyerRevenue - supplierRevenue) / completes) * 100) / 100),
	                	totalClicks: totalClicks,
	                	buyerClicks: buyerClicks,
	                	validClicks: validClicks
	                };
	                $scope.statsData.push(tempStatsObj);
        		}
        		//console.log('$scope.statsData ',JSON.stringify($scope.statsData));
        		$scope.loader.show = false;
        	}).error(function(err){
        		$scope.loader.show = false;
        		notify({message : err , classes:'alert-danger', duration:2000});
            	console.log(err);
        	})

        }else if(reportCategory == 'trans'){
        	createSurvey.getSurveyTransReport(dateRange, $scope.selectedCountry.short_code).success(function(response){
        		if(response && response.apiStatus == "success"){
        			/*Empty the other Table response*/
        			$scope.performance = [];
        			$scope.statsData = [];
        			$scope.salesData = [];
        			$scope.supplierData = [];
        			$scope.psidReportArr = [];
        			$scope.profileDataReporrt = [];
	                $scope.supplierHistoryData = [];
	                $scope.surveyTrafficRecord = [];
	                $scope.transactionStatusArr = [];
        			/*Empty the other Table response*/
        			$scope.transData = response.result;
        			
        			var	buyerRevenue = new Number(),
		                supplierRevenue  = new Number(),
		                validClicks  = new Number(),
		                completes = new Number(),
		                buyerClicks = new Number(),
		                totalClicks = new Number();

        			_.each($scope.transData, function(eachTrans){
        				var surveyName = new String(),
	                		buyerRevenue = new Number(),
			                supplierRevenue  = new Number(),
			                validClicks  = new Number(),
			                completes = new Number(),
			                buyerClicks = new Number(),
			                totalClicks = new Number();


		                /*console.log('eachSale '+JSON.stringify(eachSale));*/
		                _.each(eachTrans.Payload, function(eachTransPayload){
		                	//console.log('eachTransPayload '+JSON.stringify(eachTransPayload));
		                	if(eachTransPayload.statusCode == 21){
	                        	buyerRevenue = eachTransPayload.buyerRevenue;
		                        supplierRevenue = eachTransPayload.supplierRevenue;
		                        completes = eachTransPayload.total;
		                	}
		                	if(eachTransPayload.statusCode == 21 || eachTransPayload.statusCode == 18 || eachTransPayload.statusCode == 17 || eachTransPayload.statusCode == 19) {
		                        validClicks += eachTransPayload.total;
		                    }
		                    if (eachTransPayload.statusCode == 21 || eachTransPayload.statusCode == 18 || eachTransPayload.statusCode == 17 || eachTransPayload.statusCode == 19 || eachTransPayload.statusCode == 20 || eachTransPayload.statusCode == 30) {
		                    	buyerClicks +=  eachTransPayload.total;
		                    }
		                    
		                    totalClicks += eachTransPayload.total;
		                    surveyName = eachTransPayload.surveyName;
		                    
		                });
		                eachTrans.surveyName = surveyName;
		                eachTrans.buyerRevenue = (Math.round((buyerRevenue) * 100) / 100);
		                eachTrans.supplierRevenue = (Math.round((supplierRevenue) * 100) / 100);
		                eachTrans.margin = Math.round((eachTrans.buyerRevenue - eachTrans.supplierRevenue) * 100) / 100;
		                eachTrans.completes = completes;
		                eachTrans.totalClicks = totalClicks;
		                eachTrans.buyerClicks = buyerClicks;
		                eachTrans.validClicks = validClicks;
		                eachTrans.totalEpc = (Math.round((buyerRevenue / totalClicks) * 100) / 100);
		                eachTrans.buyerEpc = (Math.round((buyerRevenue / buyerClicks) * 100) / 100);
		                eachTrans.validEpc = (Math.round((buyerRevenue / validClicks) * 100) / 100)
	                });
        		}
        		$scope.loader.show = false;
        	}).error(function(err){
        		$scope.loader.show = false;
        		notify({message : err , classes:'alert-danger', duration:2000});
            	console.log(err);
        	})
        }else if(reportCategory == 'sales'){
          	createSurvey.getBuyerSalesReport(dateRange, $scope.selectedCountry.short_code, $scope.selectedSupplier.id).success(function(response){
	            //console.log('response ',JSON.stringify(response));
	            if(response && response.apiStatus == "success"){
	            	/*Empty the other Table response*/
        			$scope.performance = [];
        			$scope.statsData = [];
        			$scope.transData = [];
        			$scope.supplierData = [];
        			$scope.psidReportArr = [];
        			$scope.profileDataReporrt = [];
	                $scope.supplierHistoryData = [];
	                $scope.surveyTrafficRecord = [];
	                $scope.transactionStatusArr = [];
        			/*Empty the other Table response*/
	            	$scope.salesData = response.result;
	            	// For Total of the Data
	            	$scope.grandTotal = {
		            	buyerRevenue : new Number(),
			            completes : new Number(),
			            validClicks : new Number(),
			            totalClicks : new Number(),
			            epc : new Number(),
			            totalEpc : new Number()
			        }

	                _.each($scope.salesData, function(eachSale){
	                	var buyerRevenue = new Number();
		                var completes = new Number();
		                var totalClicks = new Number();
		                var validClicks = new Number();
		                var buyerName = new String();
		                var epc = new Number();

		                /*console.log('eachSale '+JSON.stringify(eachSale));*/
		                _.each(eachSale.Payload, function(eachSaleTrans){
		                	//console.log('eachSaleTrans '+JSON.stringify(eachSaleTrans));
		                	if(eachSaleTrans.statusCode == 21){
		                		buyerRevenue = eachSaleTrans.buyerRevenue;
	                        	completes = eachSaleTrans.total;
		                	}
		                	if (eachSaleTrans.statusCode == 21 || eachSaleTrans.statusCode == 18 || eachSaleTrans.statusCode == 17 || eachSaleTrans.statusCode == 19) {
		                        validClicks += eachSaleTrans.total;
		                    }
		                    buyerName = eachSaleTrans.buyerName;
		                    if(_.contains(statusCodeArr, eachSaleTrans.statusCode)) {
		                    	totalClicks += eachSaleTrans.total;
		                    }
		                    epc = (Math.round((buyerRevenue / validClicks) * 100) / 100);
		                });

		                eachSale.buyerName = buyerName;
		                eachSale.buyerRevenue = Math.round(buyerRevenue * 100) /100;
		                eachSale.completes = completes;
		                eachSale.validClicks = validClicks;
		                eachSale.totalClicks = totalClicks;
		                eachSale.epc = epc;
		                eachSale.totalEpc = (Math.round((buyerRevenue / totalClicks) * 100) / 100);

		                $scope.grandTotal.buyerRevenue += (Math.round(buyerRevenue * 100) / 100);
		                $scope.grandTotal.completes += completes;
	                	$scope.grandTotal.validClicks += validClicks;
	                	$scope.grandTotal.totalClicks += totalClicks;
	                });
	                $scope.grandTotal.epc += (Math.round(($scope.grandTotal.buyerRevenue / $scope.grandTotal.validClicks) * 100) / 100);
	                $scope.grandTotal.totalEpc += (Math.round(($scope.grandTotal.buyerRevenue / $scope.grandTotal.totalClicks) * 100) / 100);
	                $scope.grandTotal.buyerRevenue = $scope.grandTotal.buyerRevenue.toFixed(2);
	                //console.log('$scope.salesData ', JSON.stringify($scope.salesData));
	            }
	            $scope.loader.show = false;
          	}).error(function(err){
          		$scope.loader.show = false;
          		notify({message : err , classes:'alert-danger', duration:2000});
            	console.log(err);
          	});
        }
        else if(reportCategory == 'suplr_report') {
        	createSurvey.getSuppliersReport(dateRange, $scope.selectedCountry.short_code,$scope.selectedBuyers.id).success(function(response){
	            //console.log('response ',JSON.stringify(response));
	            if(response && response.apiStatus == "success"){
	            	/*Empty the other Table response*/
        			$scope.performance = [];
        			$scope.statsData = [];
        			$scope.transData = [];
        			$scope.salesData = [];
        			$scope.psidReportArr = [];
        			$scope.profileDataReporrt = [];
	                $scope.supplierHistoryData = [];
	                $scope.surveyTrafficRecord = [];
	                $scope.transactionStatusArr = [];
        			$scope.supplierData = response.result;
        			// For Total of the Data
	            	$scope.grandTotal = {
		            	supplierRevenue : new Number(),
			            completes : new Number(),
			            validClicks : new Number(),
			            totalClicks : new Number(),
			            epc : new Number(),
			            totalEpc : new Number()
			        }
        			/*Empty the other Table response*/

        			_.each($scope.supplierData, function(eachSuplr){
		                var completes = new Number();
		                var totalClicks = new Number();
		                var validClicks = new Number();
		                var epc = new Number();
		                var totalEpc = new Number();
	                	var supplierRevenue = new Number();
		                var supplierName = new String();

		                /******************************/
		                _.each(eachSuplr.Payload, function(eachSupTrans){
		                	if(eachSupTrans.statusCode == 21) {
		                		supplierRevenue = eachSupTrans.supplierRevenue;
	                            completes = eachSupTrans.total;
		                	}
		                	if (eachSupTrans.statusCode == 21 || eachSupTrans.statusCode == 18 || eachSupTrans.statusCode == 17 || eachSupTrans.statusCode == 19 || eachSupTrans.statusCode == 16) {
		                		validClicks += eachSupTrans.total;
		                	}
		     
	                        
		                    supplierName = eachSupTrans.Supplier_name;
		                    totalClicks += eachSupTrans.total;
		                    /*if(_.contains(statusCodeArr, eachSupTrans.statusCode)) {
		                    }*/
		                    epc = (Math.round((supplierRevenue / validClicks) * 100) / 100);
		                });
		                /******************************/

		                eachSuplr.supplierName = supplierName;
		                eachSuplr.supplierRevenue = Math.round(supplierRevenue * 100) / 100;
		                eachSuplr.completes = completes;
		                eachSuplr.validClicks = validClicks;
		                eachSuplr.totalClicks = totalClicks;
		                eachSuplr.epc = epc;
		                eachSuplr.totalEpc = (Math.round((supplierRevenue / totalClicks) * 100) / 100);

		                $scope.grandTotal.supplierRevenue += (Math.round(supplierRevenue * 100) / 100);
		                $scope.grandTotal.completes += completes;
	                	$scope.grandTotal.validClicks += validClicks;
	                	$scope.grandTotal.totalClicks += totalClicks;
	                });

	                $scope.grandTotal.epc += (Math.round(($scope.grandTotal.supplierRevenue / $scope.grandTotal.validClicks) * 100) / 100);
	                $scope.grandTotal.totalEpc += (Math.round(($scope.grandTotal.supplierRevenue / $scope.grandTotal.totalClicks) * 100) / 100);
	                $scope.grandTotal.supplierRevenue = $scope.grandTotal.supplierRevenue.toFixed(2);
	            	
	            }
	            $scope.loader.show = false;
          	}).error(function(err){
          		$scope.loader.show = false;
          		notify({message : err , classes:'alert-danger', duration:2000});
            	console.log(err);
          	});
        }
        else {
        	 notify({message : "Unrecognized category" , classes:'alert-danger', duration:2000});
        }
      }else{
        notify({message : "Please select the date range" , classes:'alert-danger', duration:2000});
      }
    }

  //Function to check the value of Input Box and make rest disabled PD-1509
    $scope.checkInputBoxStatus = function() {
    	if($scope.psidTransObject.psid != "") {
    		$scope.inputBoxStatus.psid_input = false;
    		$scope.inputBoxStatus.transaction_input = true;
    		$scope.inputBoxStatus.respondent_input = true;
    		$scope.inputBoxStatus.session_input = true;
    	}
    	else if($scope.psidTransObject.transaction_id != "") {
    		$scope.inputBoxStatus.psid_input = true;
    		$scope.inputBoxStatus.transaction_input = false;
    		$scope.inputBoxStatus.respondent_input = true;
    		$scope.inputBoxStatus.session_input = true;
    	}
    	else if($scope.psidTransObject.resp_id != "") {
    		$scope.inputBoxStatus.psid_input = true;
    		$scope.inputBoxStatus.transaction_input = true;
    		$scope.inputBoxStatus.respondent_input = false;
    		$scope.inputBoxStatus.session_input = true;
    	}
    	else if($scope.psidTransObject.session_id != "") {
    		$scope.inputBoxStatus.psid_input = true;
    		$scope.inputBoxStatus.transaction_input = true;
    		$scope.inputBoxStatus.respondent_input = true;
    		$scope.inputBoxStatus.session_input = false;
    	}
    	else {
    		$scope.inputBoxStatus.psid_input = false;
    		$scope.inputBoxStatus.transaction_input = false;
    		$scope.inputBoxStatus.respondent_input = false;
    		$scope.inputBoxStatus.session_input = false;
    	}
    }
    
    //Function to Fetch report Data PD-1509
    $scope.psidTransactionReport = function() {
    	$scope.loader.show = true;
    	$scope.performance = [];
		$scope.statsData = [];
		$scope.transData = [];
		$scope.salesData = [];
		$scope.profileDataReporrt = [];
	    $scope.supplierHistoryData = [];
	    $scope.psidReportArr = [];
		$scope.supplierData = [];
		$scope.surveyTrafficRecord = [];
		$scope.transactionStatusArr = [];
        if(_.has($scope.psidCheckModels, "reportType") && $scope.psidCheckModels.reportType != "") {
 
        	if($scope.psidTransObject.psid != "" || $scope.psidTransObject.transaction_id != ""|| $scope.psidTransObject.resp_id != "" || $scope.psidTransObject.session_id != ""){
			  reportService.getPsidTransIdreport($scope.psidCheckModels.reportType, $scope.psidTransObject).then(
			  	 function(res) {
			  	 	if($scope.psidCheckModels.reportType == "survey_data") {
			  	 		if(res.data.result.length > 0) {
			  	 	     $scope.psidReportArr = res.data.result;
			  	 		}
			  	 		else {
			  	 			notify({message:"No Record Found", classes:'alert-danger',duration:3000} );
			  	 		}
			  	 	} 
			  	 	if($scope.psidCheckModels.reportType == "profile") {
			  	 		if(res.data.result.length > 0){
			  	 	     $scope.profileDataReporrt = res.data.result;
			  	 		}
			  	 		else {
			  	 			notify({message:"No Record Found", classes:'alert-danger',duration:3000} );
			  	 		}
			  	 	} 
			  	 	if($scope.psidCheckModels.reportType == "supplier_data") {
			  	 		if(res.data.result.length > 0){
			  	 	     $scope.supplierHistoryData = res.data.result;
			  	 	     _.each($scope.supplierHistoryData, function(sngldata) {
			  	 	     	if(_.has(sngldata, "cpi_total")) {
			  	 	     		sngldata.cpi_total = sngldata.cpi_total.toFixed(2);
			  	 	     	}
			  	 	     })
			  	 		}
			  	 		else {
			  	 			notify({message:"No Record Found", classes:'alert-danger',duration:3000} );
			  	 		}
			  	 	} 
			  	 	$scope.loader.show = false;
			  	 },
			  	 function(error) {
			  	 	$scope.loader.show = false;
			  	 	notify({message:error.data.msg,classes:'alert-danger',duration:3000} );
			  	 }
			  )
			}
			else {
				$scope.loader.show = false;
				notify({message:"Please Enter values",classes:'alert-danger',duration:3000} );
			}
        }
        else {
        	$scope.loader.show = false;
        	notify({message:"Please Select Atleast one Report Type",classes:'alert-danger',duration:3000} );
        }
    }
/*Function to show Survey Traffic Record PD-1508
*/
    $scope.surveyTrafficReport = function() {
    	$scope.loader.show = true;
    	$scope.loader.show = true;
    	$scope.performance = [];
		$scope.statsData = [];
		$scope.transData = [];
		$scope.salesData = [];
		$scope.profileDataReporrt = [];
	    $scope.supplierHistoryData = [];
	    $scope.psidReportArr = [];
		$scope.supplierData = [];
		$scope.transactionStatusArr = [];
		$scope.surveyTrafficRecord = [];
    	if($scope.psidTransObject.psid != "" || $scope.psidTransObject.transaction_id != ""|| $scope.psidTransObject.resp_id != "" || $scope.psidTransObject.session_id != "") {
    		reportService.getSurveyTransReport($scope.psidTransObject).then(
	    		function(res) {
	    			if(res.data.result.length > 0) {
		  	 	         $scope.surveyTrafficRecord = res.data.result;
		  	 		}
		  	 		else {
		  	 			notify({message:"No Record Found", classes:'alert-danger',duration:3000} );
		  	 		}
	    			$scope.loader.show = false;
	    		},
	    		function(err) {
	    			$scope.loader.show = false;
	    			notify({message:err.data.msg,classes:'alert-danger',duration:3000} );
	    		}
	    	);
    	}
    	else {
			$scope.loader.show = false;
			notify({message:"Please Enter values",classes:'alert-danger',duration:3000} );
		}
    }
/*Function to Generate Transaction Status Report
*/
    $scope.transactionStatusReport = function(dateRange) {
    	$scope.statsData = [];
		$scope.transData = [];
		$scope.salesData = [];
		$scope.supplierData = [];
		$scope.psidReportArr = [];
		$scope.profileDataReporrt = [];
	    $scope.supplierHistoryData = [];
	    $scope.surveyTrafficRecord = [];
    	$scope.transactionStatusArr = [];
    	
      	$scope.loader.show = true;
    	if($scope.selectedContries.length > 0 && $scope.selectedLanguage.length > 0 && $scope.selectedTransStatus.length > 0 && $scope.selectedBuyersArr.length > 0 && $scope.selectedSuppliersArr.length > 0 && dateRange && dateRange.startDate && dateRange.endDate) {
    		/*PD-1656*/
    		var langIds = _.pluck($scope.selectedLanguage, "l_id");
    		var selctedLngNm = [];
    		_.each($scope.selectedLanguage, function(langCd) {
    			var findLng = _.where($scope.languageCnt, {"l_id": langCd.l_id, "name": langCd.name});
    			if(findLng.length > 0) {
    				selctedLngNm = _.union(selctedLngNm, _.pluck(findLng, "name"))
    			}
    		})
    		var matchLangFlg = false;
    		_.each($scope.selectedContries, function(snglcnt) {
    			var matchCntLang = _.findWhere($scope.countries, {"id": snglcnt.id});
    			
    			if(matchCntLang) {
    				var langShortCd = _.pluck(matchCntLang.lang, "name")
    				var checkExistLang = _.intersection(selctedLngNm, langShortCd);
    				if(!checkExistLang.length) {
    					matchLangFlg = true;
    				}
    			}
    		})

    		if(matchLangFlg) {
    		    notify({message:"Language Not supported For Selected Country",classes:'alert-danger',duration:3000} );
    		    $scope.loader.show = false;
    		    return;
    		}

    		dateRange.startDate = moment(dateRange.startDate).format("YYYY-MM-DD");
            dateRange.endDate = moment(dateRange.endDate).format("YYYY-MM-DD");
            var PayloadObj = {
            	dateRange: dateRange,
            	country: $scope.selectedContries,
            	language: $scope.selectedLanguage,
            	tranStatue: $scope.selectedTransStatus,
            	buyers: $scope.selectedBuyersArr,
            	suppliers: $scope.selectedSuppliersArr
            }
            reportService.getTransactionStatusReport(PayloadObj).then(
            	function(resp) {
            		if(resp.data.result.length > 0) {
            			$scope.transactionStatusArr = resp.data.result;
            			$scope.totalTransStatus["grandTotal"] = $scope.transactionStatusArr[0].total;
            		}
            		else {
            			notify({message:"No Record Found For Transaction Status", classes:'alert-danger',duration:3000});
            		}
            		$scope.loader.show = false;
            	},
            	function(err) {
            		notify({message:err.data.msg, classes:'alert-danger',duration:3000} );
            		$scope.loader.show = false;
            	}
            );
    	}
    	else {
    		$scope.loader.show = false;
			notify({message:"Please Enter Date Range and Select Values From Drop Down",classes:'alert-danger',duration:3000} );
    	}
    }

    /*------------For Datatable---------*/
   $scope.dtOption = DTOptionsBuilder.newOptions().withOption('bLengthChange', false).withOption('paging', false).withOption('aaSorting', [1, 'desc']).withOption('bFilter', false);
    $scope.dtColumnDef = [];

    $scope.avoidClick = function( e ) { 
       e.stopPropagation();
    }

}]);
angular.module('pureSpectrumApp')
    .controller('resetForgetPassword',['$scope','$state', '$timeout','user','notify','ngProgressLite', 'localStorageService', '$stateParams', function($scope, $state, $timeout, user, notify, ngProgressLite, localStorageService, $stateParams){
	
	$scope.userobj = {
		newpass: "",
		cpass: ""
	};
	$scope.hideResetPass = true;
	var token = $stateParams.token;
	console.log("token is:::", token);

	checkResetUrlValidity();
	function checkResetUrlValidity() {
		
		user.getUserDateFromToken(token).then(
			function(response) {
				console.log("response is:::", response);
				$scope.resetUserData = response.data.result;
				if($scope.resetUserData.reset_link_valid === 1 && $scope.resetUserData.password_reset === 1) {
					if($scope.resetUserData.lockout_attempt > 3) {
						$state.go('invalidpasswordlink', {locked: "lock"});
					}
					else {
						$scope.hideResetPass = true;
					}
				}
				else {
					$state.go('invalidpasswordlink', {locked: "expirelink"});
				}
			},
			function(error) {
				$scope.hideResetPass = false;
				notify({message:"error to get token from DB",classes:'alert-danger',duration:2000} );
			}
		);
	}
	

    $scope.backLoginPage = function() {
            $state.go('login');
    }

	$scope.updatePassword = function() {
		if($scope.userobj.newpass == '' || $scope.userobj.cpass == ''){
			notify({message:"Please don't left password field blank!!", classes:'alert-danger', duration:2000} );
			return false;

		} else if($scope.userobj.newpass != $scope.userobj.cpass) {
			notify({message:"password not match!!",classes:'alert-danger',duration:2000} );
			return false;
		}
		
		user.updateResetPassword(token, $scope.userobj).then(
			function(response){
				if(response.data.apiStatus == 'success') {
					notify({message:'Password is successfully updated',classes:'alert-success',duration:2000} );
					$state.go('login');
				}
			},
			function(error) {
				notify({message:"error",classes:'alert-danger',duration:2000} );
			}
		);
	};
		
	}]);

	//PD-344
angular.module('pureSpectrumApp')
    .controller('resetPassword',['$scope','$state', '$timeout','user','notify','ngProgressLite', 'localStorageService', function($scope, $state, $timeout, user, notify, ngProgressLite, localStorageService){
	
	$scope.userobj = {
		newpass: "",
		cpass: ""
	};
	
	var userdata = localStorageService.get('logedInUser');
	
	$scope.updatePassword = function() {
		if($scope.userobj.newpass == '' || $scope.userobj.cpass == ''){
			notify({message:"Please don't left password field blank!!", classes:'alert-danger', duration:2000} );
			return false;

		} else if($scope.userobj.newpass != $scope.userobj.cpass) {
			notify({message:"password not match!!",classes:'alert-danger',duration:2000} );
			return false;
		}
		
		user.updatePasswords(userdata.id, $scope.userobj).then(
			function(response){
				if(response.data.apiStatus == 'success') {
					notify({message:'Password is successfully updated',classes:'alert-success',duration:2000} );
				}
			},
			function(error) {
				notify({message:"error",classes:'alert-danger',duration:2000} );
			}
		);
	};
		
	}]);
/**
 * Created by Vikas on 7/12/2016.
 */

angular.module('pureSpectrumApp')

    .controller('suppSettingCtrl',['$scope','$http','$state','$cookies','$window','config','localStorageService','settingService','notify','commonApi' ,'ngProgressLite',function($scope, $http, $state, $cookies, $window, config, localStorageService, settingService, notify, commonApi, ngProgressLite){
        $scope.suppSetObj= new Object();
        $scope.suppSetObj["isRecontact"] = "0";
        $scope.suppSetObj["isPostalCode"] = "0";
        $scope.dataAll={};
        //req_types dropdown for augument survey
        $scope.req_types = [
            {
                "key" : "no_auth",
                "value" : "No Auth"
            },
            {
                "key" : "access_token",
                "value" : "Access Token"
            },
            {
                "key" : "sha1_hash",
                "value" : "SHA1 Hash"
            },
            {
                "key" : "adv_auth_supp_script",
                "value" : "Advanced Auth - Supplier Script"
            }
        ]
        //augument survey variable
        $scope.compReqObj = new Object();
        $scope.compReqObj["enable"] = "0";
        $scope.compReqObj["url"] = "";
        $scope.sessReqObj = new Object();
        $scope.sessReqObj["enable"] = "0";
        $scope.sessReqObj["url"] = "";
        $scope.reqAuthObj = new Object();
        $scope.reqAuthObj["type"] = "no_auth";
        $scope.reqAuthObj["value"] = "";

        var userInfo= localStorageService.get('logedInUser');

        $scope.suppSetObj.usr_id=userInfo.id;
        $scope.suppSetObj.cmp=userInfo.cmp;
        
        getSupplierInfo($scope.suppSetObj.cmp);
        $scope.cntryMaster=[];

        $scope.saveSettingData = function(){
            var variable_mapping = [];
            
            
            if($scope.uniquesessionid_in.defaultval && $scope.uniquesessionid_out.defaultval) {
                if(Object.keys($scope.uniquesessionid_in.defaultval).length != 0 && Object.keys($scope.uniquesessionid_out.defaultval).length != 0) {
                    variable_mapping.push(
                        {
                            ps_supplier_sid : {
                                incoming : $scope.uniquesessionid_in.defaultval,
                                outgoing : $scope.uniquesessionid_out.defaultval 
                            }
                        });
                }
                
            }
            if($scope.uniquesessionid_in.defaultval && !$scope.uniquesessionid_out.defaultval) {
                if(Object.keys($scope.uniquesessionid_in.defaultval.defaultval).length != 0) {
                    variable_mapping.push(
                        {
                            ps_supplier_sid : {
                                incoming : $scope.uniquesessionid_in.defaultval,
                                outgoing : $scope.uniquesessionid_in.defaultval 
                            }
                        });
                }
            }
            
            
            if($scope.uniquemember_in.defaultval && $scope.uniquemember_out.defaultval) {
                if(Object.keys($scope.uniquemember_in.defaultval).length != 0  && Object.keys($scope.uniquemember_out.defaultval).length != 0 ) {
                    variable_mapping.push(
                        {
                            ps_supplier_respondent_id : {
                                incoming : $scope.uniquemember_in.defaultval,
                                outgoing : $scope.uniquemember_out.defaultval 
                            }
                        });
                }
                
            }
            if($scope.uniquemember_in.defaultval && !$scope.uniquemember_out.defaultval) {
                if(Object.keys($scope.uniquemember_in.defaultval).length != 0) {
                    variable_mapping.push(
                        {
                            ps_supplier_respondent_id : {
                                incoming : $scope.uniquemember_in.defaultval,
                                outgoing : $scope.uniquemember_in.defaultval 
                            }
                        });
                }
            }
            if($scope.customevar1_in.defaultval && $scope.customevar1_out.defaultval) {
                if(Object.keys($scope.customevar1_in.defaultval).length != 0  && Object.keys($scope.customevar1_out.defaultval).length != 0 ) {
                    variable_mapping.push(
                        {
                            ps_custom_svar1 : {
                                incoming : $scope.customevar1_in.defaultval,
                                outgoing : $scope.customevar1_out.defaultval 
                            }
                        });
                }
                
            }
            if($scope.customevar1_in.defaultval && !$scope.customevar1_out.defaultval) {
                if(Object.keys($scope.customevar1_in.defaultval).length != 0) {
                    variable_mapping.push(
                        {
                            ps_custom_svar1 : {
                                incoming : $scope.customevar1_in.defaultval,
                                outgoing : $scope.customevar1_in.defaultval 
                            }
                        });
                }
                
            }
            if($scope.customevar2_in.defaultval && $scope.customevar2_out.defaultval) {
                if(Object.keys($scope.customevar2_in.defaultval).length != 0  && Object.keys($scope.customevar2_out.defaultval).length != 0 ) {
                    variable_mapping.push(
                        {
                            ps_custom_svar2 : {
                                incoming : $scope.customevar2_in.defaultval,
                                outgoing : $scope.customevar2_out.defaultval 
                            }
                        });
                }
                
            }
            if($scope.customevar2_in.defaultval && !$scope.customevar2_out.defaultval) {
                if(Object.keys($scope.customevar2_in.defaultval).length != 0) {
                    variable_mapping.push(
                        {
                            ps_custom_svar2 : {
                                incoming : $scope.customevar2_in.defaultval,
                                outgoing : $scope.customevar2_in.defaultval 
                            }
                        });
                }
            }

            if($scope.ps_oqid.defaultval) {
                    variable_mapping.push(
                        {
                            "ps_oqid" : {
                                "incoming" : "",
                                "outgoing" : $scope.ps_oqid.defaultval
                            }
                        }
                    );
            }

            if($scope.suppSetObj.isNotify == '1') {
                $scope.suppSetObj.isNotify = true
            }
            else{
                $scope.suppSetObj.isNotify = false;
            }

            if($scope.suppSetObj.isRecontact == '1') {
                $scope.suppSetObj.isRecontact = true;
            }
            else {
                $scope.suppSetObj.isRecontact = false;
            }

            if($scope.suppSetObj.isPostalCode == '1') {
                $scope.suppSetObj.isPostalCode = true;
            }
            else {
                $scope.suppSetObj.isPostalCode = false;
            }

            // Added Hashing Params
            if($scope.suppSetObj.isHashing == '1') {
                $scope.suppSetObj.isHashing = true;
            }else {
                $scope.suppSetObj.isHashing = false;
            }

            if($scope.compReqObj["enable"] == '1'){
                $scope.suppSetObj.complete_request = new Object();
                $scope.suppSetObj.complete_request["enable"] = true;
                $scope.suppSetObj.complete_request["url"] = $scope.compReqObj["url"];
            }else{
                $scope.suppSetObj.complete_request = new Object();
                $scope.suppSetObj.complete_request["enable"] = false;
                $scope.suppSetObj.complete_request["url"] = "";
            }
            if($scope.sessReqObj["enable"] == '1'){
                $scope.suppSetObj.sessionid_request = new Object();
                $scope.suppSetObj.sessionid_request["enable"] = true;
                $scope.suppSetObj.sessionid_request["url"] = $scope.sessReqObj["url"];
            }else{
                $scope.suppSetObj.sessionid_request = new Object();
                $scope.suppSetObj.sessionid_request["enable"] = false;
                $scope.suppSetObj.sessionid_request["url"] = "";
            }
            if($scope.reqAuthObj["type"] == 'access_token'){
                $scope.suppSetObj.req_auth = new Object();
                $scope.suppSetObj.req_auth["type"] = "access_token";
                $scope.suppSetObj.req_auth["value"] = $scope.reqAuthObj["value"];
            }else{
                $scope.suppSetObj.req_auth = new Object();
                $scope.suppSetObj.req_auth["type"] = $scope.reqAuthObj["type"];
                $scope.suppSetObj.req_auth["value"] = "";
            }
           
            if(variable_mapping.length != 0) {
                
                $scope.suppSetObj.variable_mapping = variable_mapping;
            }
            

            ngProgressLite.start();
           if($scope.suppSetObj.cmp != undefined)
           {
                if ($scope.suppSetObj.isHashing && $scope.suppSetObj.private_key == ''){
                    notify({message:'Please provide key information',classes:'alert-danger',duration:2000} );
                    return (false);
                }
                settingService.updateSetting($scope.suppSetObj.cmp, $scope.suppSetObj).success(function(data){
                ngProgressLite.done();
                notify({message:'Supplier Setting information has been Updated successfully',classes:'alert-success',duration:2000} );
                getSupplierInfo($scope.suppSetObj.cmp);
            }).error(function(err){
                notify({message:'Please provide all required information',classes:'alert-danger',duration:2000} );
             })
           }
           else
           {
                if ($scope.suppSetObj.isHashing && $scope.suppSetObj.private_key == ''){
                    notify({message:'Please provide key information',classes:'alert-danger',duration:2000} );
                    return (false);
                }
                $scope.suppSetObj.cmp=userInfo.cmp;
                settingService.addSetting($scope.suppSetObj).success(function(data){
                ngProgressLite.done();
                notify({message:'Supplier Setting information has been saved successfully',classes:'alert-success',duration:2000} );
                getSupplierInfo($scope.suppSetObj.cmp);
            }).error(function(err){
                notify({message:'Please provide all required information',classes:'alert-danger',duration:2000} );
            })
           }
        }


        $scope.cancelSupplier=function(){
            
            getSupplierInfo($scope.suppSetObj.cmp);

        }


        function getSupplierInfo(id){
            $scope.ps_oqid = {};
            $scope.dctEnable='false';
            ngProgressLite.start();
            settingService.getSetting(id).success(function (data) {
                ngProgressLite.done();

                if(data.apiStatus){
                    if(data.supplier[0].variable_mapping){
                        for(var i = 0; i < data.supplier[0].variable_mapping.length; i++) {
                            for(var j in data.supplier[0].variable_mapping[i]) {
                                if(j == "ps_supplier_sid") {
                                    $scope.uniquesessionid_in.defaultval = data.supplier[0].variable_mapping[i][j].incoming;
                                    $scope.uniquesessionid_out.defaultval = data.supplier[0].variable_mapping[i][j].outgoing;
                                }
                                if(j == "ps_supplier_respondent_id") {
                                    $scope.uniquemember_in.defaultval = data.supplier[0].variable_mapping[i][j].incoming;
                                    $scope.uniquemember_out.defaultval = data.supplier[0].variable_mapping[i][j].outgoing;
                                }
                                if(j == "ps_custom_svar1") {
                                   $scope.customevar1_in.defaultval = data.supplier[0].variable_mapping[i][j].incoming;
                                    $scope.customevar1_out.defaultval = data.supplier[0].variable_mapping[i][j].outgoing;
                                }
                                if(j == "ps_custom_svar2") {
                                    $scope.customevar2_in.defaultval = data.supplier[0].variable_mapping[i][j].incoming;
                                    $scope.customevar2_out.defaultval = data.supplier[0].variable_mapping[i][j].outgoing;
                                }
                                if(j == "ps_oqid") {
                                    $scope.ps_oqid.defaultval = data.supplier[0].variable_mapping[i][j].outgoing;
                                }
                            }
                        }
                    }
                    //setting default value for augument survey variables
                    if(data.supplier[0].complete_request){
                        $scope.compReqObj["enable"] = data.supplier[0].complete_request.enable;
                        $scope.compReqObj["url"] = data.supplier[0].complete_request.url;;
                    }
                    if(data.supplier[0].sessionid_request){
                        $scope.sessReqObj["enable"] = data.supplier[0].sessionid_request.enable;
                        $scope.sessReqObj["url"] = data.supplier[0].sessionid_request.url;;
                    }
                    if(data.supplier[0].req_auth){
                        $scope.reqAuthObj["type"] = data.supplier[0].req_auth.type;
                        $scope.reqAuthObj["value"] = data.supplier[0].req_auth.value;;
                    }

                    if(!_.has(data.supplier[0], "isRecontact") && !_.has(data.supplier[0], "isPostalCode") && _.has($scope.suppSetObj, "isRecontact") && _.has($scope.suppSetObj, "isPostalCode")) {
                        data.supplier[0]["isRecontact"] = "0";
                        data.supplier[0]["isPostalCode"] = "0";
                    }

                    $scope.suppSetObj = data.supplier[0];
                    $scope.dctEnable='true';
                }
                else{
                    $scope.suppSetObj= new Object();
                    $scope.suppSetObj["isRecontact"] = "0";
                    $scope.suppSetObj["isPostalCode"] = "0";
                }
            }).error(function (err) {
                notify({message:err.msg,classes:'alert-danger',duration:2000} );
            })
        }


        $scope.tab = 1;
        $scope.setTab = function(newTab){
          $scope.tab = newTab;
        };

        $scope.isSet = function(tabNum){
          return $scope.tab === tabNum;
        };

        //Excluding Countries and locations dropdown
        

        $scope.exlang =[
              'US English',
              'Spanish',
              'Canada English',
              'French',
              'UK English'
           ];

        $scope.geoExclusion = [
            'CSA',
            'MSA',
            'DMA',
            'Country',
            'Provinces'
        ];


    }]);

angular.module('pureSpectrumApp').controller('surveysuccess', ['$scope', function($scope){
   $scope.displayRes = $scope.app.surveySuccess;
}]); 
	

angular.module('pureSpectrumApp')

.directive('addAdvAnswer', ['$document', '$compile', '$parse', 'notify',

    function ($document, $compile, $parse, notify) {

        return {
            restrict: 'AE',
            scope: {
                advQuestionArr: '=',
                countries: '=',
                localeQues : '=',
                rangeMode : '='
            },
            template:   '<div class="countries-inner coutry-box-outer">'+
                            '<div class="form-group col-md-6">'+
                                '<label for="units">Placeholder<span>*</span></label>'+
                                '<input type="placeholder" class="form-control" id="placeholder" placeholder="Placeholder" ng-model="tempOptions.placeholder">'+
                            '</div>'+
                            '<div class="form-group col-md-6">'+
                                '<label for="quesType">Country<span>*</span>'+
                                '</label>'+
                                '<select class="form-control" id="country" ng-change="tempOptions.language = ((countries | filter:{\'short_Code\':tempOptions.country})[0].lang[0].short_code)" ng-model="tempOptions.country" ng-options="country.short_Code  as country.name for country in countries"> '+
                                '</select>'+
                            '</div>'+
                            '<div class="form-group col-md-6">'+
                                '<label for="quesType">Language<span>*</span>'+
                                '</label>'+
                                '<select class="form-control" ng-init="tempOptions.language = countries[0].short_Code" ng-model="tempOptions.language" ng-options="language.short_code as language.name for language in ((countries | filter:{\'short_Code\':tempOptions.country})[0].lang)">'+
                                '</select>'+
                            '</div>'+
                            '<div class="form-group col-md-6">'+
                                '<label for="screener_text">Question Screener Text<span>*</span><p>Qualification Format : "%%respId%%"</p></label>'+
                                '<input type="text" class="form-control" id="screener_text" placeholder="Screener Text" ng-model="tempOptions.screener_text">'+
                            '</div>'+
                            '<div class="add-multi-option-inner" ng-if ="!rangeMode">'+
                                '<input type="number" class="form-control" placeholder="id" ng-model="addOption.id">'+
                                '<input type="text" class="form-control" placeholder="text" ng-model="addOption.text">'+
                                '<input type="text" ng-if="tempOptions.language!= \'eng\'" class="form-control" placeholder="translation" ng-model="addOption.translation">'+
                                '<a class= "btn btn-default submit-btn ng-scope glyphicon glyphicon-plus add-option-btn " style="cursor:pointer;" ng-click="addOptionRow(addOption.id, addOption.text, addOption.translation)"></a>'+
                            '</div>'+
                            '<div class="add-multi-option-inner" ng-repeat="option in tempOptions.multiOptions" ng-if ="!rangeMode">'+
                                '<input type="number" class="form-control" placeholder="id" ng-model="option.id" ng-disabled = "true">'+
                                '<input type="text" class="form-control" placeholder="text" ng-model="option.text">'+
                                '<input type="text" ng-if="tempOptions.language!= \'eng\'" class="form-control" placeholder="translation" ng-model="option.translation">'+
                                '<a style="cursor:pointer;" ng-click="deleteOptionRow(option.id)">Delete</a>'+
                            '</div>'+
                            '<a class="btn btn-default submit-btn ng-scope" style="cursor:pointer;" ng-click="addLocaleQues(tempOptions)">Add More</a>'+

                            '<p>{{advQuestionArr.length}} added</p>'+
                            '<div class="clearfix"></div>'+
                        '</div>'+


                        '<div class="countries-inner coutry-box-outer" ng-repeat="question in advQuestionArr">'+
                            '<div class="form-group col-md-6">'+
                                '<label for="units">Placeholder<span>*</span></label>'+
                                '<input type="placeholder" class="form-control" id="placeholder" placeholder="Placeholder" ng-model="question.placeholder">'+
                            '</div>'+
                            '<div class="form-group col-md-6">'+
                                '<label for="quesType">Country<span>*</span>'+
                                '</label>'+
                                '<select class="form-control" id="country" ng-model="question.country" ng-options="country.short_Code  as country.name for country in countries"> '+
                                '</select>'+
                            '</div>'+
                            '<div class="form-group col-md-6">'+
                                '<label for="quesType">Language<span>*</span>'+
                                '</label>'+
                                '<select class="form-control" ng-model="question.language" ng-options="language.short_code as language.name for language in ((countries | filter:{\'short_Code\':question.country})[0].lang)">'+
                                '</select>'+
                            '</div>'+
                            '<div class="form-group col-md-6">'+
                                '<label for="screener_text">Question Screener Text<span>*</span><p>Qualification Format : "%%respId%%"</p></label>'+
                                '<input type="text" class="form-control" id="screener_text" placeholder="Screener Text" ng-model="question.screener_text">'+
                            '</div>'+
                            '<div class="add-multi-option-inner" ng-repeat="option in question.multiOptions" ng-if ="!rangeMode">'+
                                '<input type="number" class="form-control" placeholder="id" ng-model="option.id" ng-disabled = "true">'+
                                '<input type="text" class="form-control" placeholder="text" ng-model="option.text">'+
                                '<input type="text" ng-if="question.language!= \'eng\'" class="form-control" placeholder="translation" ng-model="option.translation">'+
                            '</div>'+
                            '<a class="btn btn-default ng-scope btn-danger" style="cursor:pointer;" ng-click="deleteLocaleQues($index)">Delete</a>'+
                            '<div class="clearfix"></div>'+
                        '</div>',
            link: function ($scope, $element, $attrs) {
                $scope.addOption = {
                    'id': '',
                    'text': '',
                    'translation': ''
                };
                $scope.tempOptions = {
                    'country': ($scope.countries && $scope.countries.length) ? $scope.countries[0].short_Code : "",
                    'language': ($scope.countries && $scope.countries.length) ? $scope.countries[0].lang[0].short_code : "",
                    'screener_text': "",
                    'placeholder': "",
                    'multiOptions': []
                };
                if(!$scope.advQuestionArr){
                    $scope.advQuestionArr = new Array()
                }
                //console.log('$scope.advQuestionArr '+JSON.stringify($scope.advQuestionArr));

                $scope.multiOptions = new Array();
                $scope.addOptionRow = function(id, text, translation){
                    if($scope.tempOptions.language && $scope.tempOptions.language != 'eng' && !translation){
                        return notify({
                            message: 'Add translation for text',
                            classes: 'alert-warning',
                            duration: 2000
                        });
                    }
                    if(id && text){
                        if(_.findIndex($scope.tempOptions.multiOptions, {'id':id}) == -1){
                            var multiOptObj = {'id': id, 'text': text};
                            if($scope.tempOptions.language != 'eng' && translation){
                                multiOptObj['translation'] = translation;
                            }
                            $scope.tempOptions.multiOptions.push(multiOptObj);
                            notify({
                                message: $scope.tempOptions.multiOptions.length+' options added',
                                classes: 'alert-success',
                                duration: 2000
                            });
                            //console.log(multiOptObj)
                            // Clearing the adding fields
                            $scope.addOption = {
                                'id': '',
                                'text': '',
                                'translation': ''
                            };
                        }else{
                            notify({
                                message: 'Option id already exist',
                                classes: 'alert-warning',
                                duration: 2000
                            }); 
                        }
                    }else{
                        notify({
                            message: 'Please enter option id and option text',
                            classes: 'alert-warning',
                            duration: 2000
                        });
                    }
                }

                $scope.addLocaleQues = function(tempOptions){

                    if(tempOptions.country && tempOptions.language && tempOptions.screener_text && tempOptions.placeholder && tempOptions.multiOptions){
                        if(_.findIndex($scope.advQuestionArr, {'country':tempOptions.country, 'language': tempOptions.language}) == -1){

                            var locale = tempOptions.language+'_'+tempOptions.country;
                            $scope.advQuestionArr.push({
                                'country': tempOptions.country,
                                'language': tempOptions.language,
                                'screener_text': tempOptions.screener_text,
                                'placeholder': tempOptions.placeholder,
                                'multiOptions': tempOptions.multiOptions
                            });

                            notify({
                                message: $scope.advQuestionArr.length+' Screener question added',
                                classes: 'alert-success',
                                duration: 2000
                            });
                            // Reset the adding fields
                            $scope.tempOptions = {
                                'country': ($scope.countries && $scope.countries.length) ? $scope.countries[0].short_Code : "",
                                'language': $($scope.countries && $scope.countries.length) ? $scope.countries[0].lang[0].short_code : "",
                                'screener_text': "",
                                'placeholder': "",
                                'multiOptions': []
                            };
                        }else{
                            notify({
                                message: 'Screener question already exist',
                                classes: 'alert-warning',
                                duration: 2000
                            }); 
                        }
                    }else{
                        notify({
                            message: 'Please enter all field',
                            classes: 'alert-warning',
                            duration: 2000
                        });
                    }
                }

                $scope.deleteOptionRow = function(id){
                    if(id){
                        var optionIndex = _.findIndex($scope.tempOptions.multiOptions, {'id':id});
                        if(optionIndex == -1){
                            notify({
                                message: "Option id doesn't exist",
                                classes: 'alert-warning',
                                duration: 2000
                            });
                        }else{
                            $scope.tempOptions.multiOptions.splice(optionIndex, 1);
                            notify({
                                message: "Option deleted",
                                classes: 'alert-warning',
                                duration: 2000
                            });
                        }
                    }
                }

                $scope.deleteLocaleQues = function(index){
                    if($scope.advQuestionArr.length && $scope.advQuestionArr[index]){
                        if(index == -1){
                            notify({
                                message: "Screener question doesn't exist",
                                classes: 'alert-warning',
                                duration: 2000
                            });
                        }else{
                            $scope.advQuestionArr.splice(index, 1);
                            notify({
                                message: "Screener question deleted",
                                classes: 'alert-warning',
                                duration: 2000
                            });
                        }
                    }
                }
            }
        };
    }]);



    

angular.module('pureSpectrumApp')

.directive('ngAdvanceButton', ['$filter', '$document', '$compile', '$parse', '$timeout',

    function ($filter, $document, $compile, $parse, $timeout) {

        return {
            restrict: 'AE',
            template: '<div class="adv-outer">'+
                            '<button id="item.respondent_question_id" data-toggle="modal" data-target="#advanceTargetingModal" class="btn btn-default" type="button" ng-click="openAdvTargetModal(item)">'+
                                '{{item.question_description}}'+
                            '</button>'+
                            '<a ng-click="deleteAdvTarget(item.respondent_question_id, item.qualification_id[0])"><i class="fa fa-window-close" aria-hidden="true"></i></a>'+
                            '</div>'+
                            '<button type="button" class="btn btn-primary btn-link btn-xs" ng-click="getAdvRemaning(item.selected[item.qualification_id[0]].answer_data, item.hasQuota)" ng-show="item.selected[item.qualification_id[0]].answer_data.length > 0" style="width:100%;text-align:left;"><span ng-show="!item.hasQuota" data-toggle="modal" data-target="#advTargetModal{{item.qualification_id[0]}}">Add Quotas</span> <span ng-show="item.hasQuota" data-toggle="modal" data-target="#advTargetModal{{item.qualification_id[0]}}">Edit Quota</span> <span ng-show="item.hasQuota" class="pull-right" ng-click="delAdvQuota(item.qualification_id[0], item)">Delete Quotas</span>'+
                            '</button>'+
                            '<div id="advTargetModal{{item.qualification_id[0]}}" class="modal animated bounceIn quotas-modal advTargetModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true" ng-if="properties.numberOfCompletes">'+

            '<div class="modal-dialog">'+
                '<div class="modal-content">'+
                    '<div class="modal-body">'+
                        '<div class="feasibility-header">'+
                            '<button id="ps-modal-close" class="btn btn-secondary" data-dismiss="modal" ng-click ="resetAdvModal(item)">'+
                                '<i class="fa fa-times" aria-hidden="true"></i>'+
                                '<span class="key_label">esc</span>'+
                            '</button>'+
                            '<div class="clearfix"></div>'+
                        '</div>'+
                        '<div class="row">'+
                            '<div class="col-xs-12 col-sm-6 col-md-6 col-md-offset-3  col-sm-offset-3">'+
                                '<h2 class="text-center">Quotas for {{item.question_description}}:</h2>'+
                            '</div>'+
                            '<div class="col-xs-12 col-md-6 col-sm-6 col-md-offset-3 col-sm-offset-3 text-center">'+
                                '<p>FLEXIBLE</p>'+
                                '<span><label class="status pull-middle quota-flex-btn"><input type="checkbox" checked id="{{item.qualification_id[0]}}"  ng-click ="setAdvFlex($event, item.selected[item.qualification_id[0]].answer_data, item.flxValue)" ng-init="item.flx = true" ng-model="item.flx"><div class="slider round genderr"></div></label>&nbsp; &nbsp; by &nbsp; &nbsp;<input type="text" class="text-line disabled-state" maxlength="2"  onkeypress="return validateQty(event);" ng-init="item.flxValue = 0" ng-model="item.flxValue" ng-keyup="quotaPercentageChange(item.selected[item.qualification_id[0]].answer_data, item.flxValue)" ng-readonly="!properties.numberOfCompletes || !item.flx"><span>%</span></span><br/><br/>'+

                                '<button class="btn btn-primary btn-md grupCondtion submit-btn" type="button" ng-click="AdvGrouping.check = !AdvGrouping.check; readyAdvGroupPayload(item)" ng-hide="AdvGrouping.check">Group Conditions</button>'+
                                '<button class="btn btn-primary btn-sm grupCondtion" type="button" ng-click="advanceGrouping(\'adavance\',item);AdvGrouping.check = !AdvGrouping.check" ng-show="AdvGrouping.check">Group</button>&nbsp; &nbsp;'+
                                '<button class="btn btn-primary btn-sm grupCondtion" type="button" ng-click="AdvGrouping.check = !AdvGrouping.check" ng-show="AdvGrouping.check">Cancel</button>'+
                            '</div>'+
                        '</div>'+
                        '<div class="col-xs-12 col-sm-8 col-md-8 col-md-offset-2">'+
                            '<div class="panel">'+
                                '<div class="panel-body">'+
                                    '<div class="table-responsive">'+
                                        '<table class="table" id="genderform">'+
                                            '<thead>'+
                                            '<tr >'+
                                                '<th></th>'+
                                                '<th ng-hide="AdvGrouping.check">{{properties.clickBalance == 0? "COMPLETES":"CLICKS"}}</th>'+
                                                '<th ng-hide="AdvGrouping.check">MIN</th>'+
                                                '<th ng-hide="AdvGrouping.check">MAX</th>'+
                                                '<th ng-if="liveSurveyEditingStep == \'editStep1\' && !AdvGrouping.check">FIELDED</th>'+
                                            '</tr>'+
                                            '</thead>'+
                                            '<tbody>'+

                                            '<tr ng-repeat="data in item.selected[item.qualification_id[0]].answer_data" ng-if="checkAdvancedata(data)" ng-mouseenter="trhovering=true" ng-mouseleave="trhovering=false" ng-class="{\'groupingselected\': data.setGrupActive ?data.setGrupActive : data.setGrupActive = false, \'selectGroup\': AdvGrouping.check == true? AdvGrouping.check : AdvGrouping.check = false}" ng-click="data.setGrupActive = (AdvGrouping.check == true? !data.setGrupActive : data.setGrupActive)" ">'+
                                                '<td class="td-th-class" ng-hide="data.condditionGroup && AdvGrouping.check"><br><i class="fa fa-chain-broken" aria-hidden="true" ng-click="ungroupedAdvanceQuota(data)" ng-show="data.condditionGroup" style="cursor: pointer; font-size: 20px;"></i>{{data.name}} &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;</td>'+
                                                '<td class="td-th-class" ng-hide="AdvGrouping.check || data.condditionGroup && AdvGrouping.check">'+
                                                    '<input type="number" class=" text-line" onkeypress="return validateCompletes(event);"" ng-model="data.number" ng-keyup="quotaNumberChange(data.id, item.selected[item.qualification_id[0]].answer_data , item.flxValue, item.qualification_id[0])" ng-keypress="clearNumberChange(item.selected[item.qualification_id[0]].answer_data, $index)" ng-class="{\'hoverTr-Text\':trhovering}">&nbsp;&nbsp;&nbsp;<input type="text" class=" text-line" maxlength="3" onkeypress="return validateCompletes(event);"" ng-model="data.per" ng-keyup="quotaPerChange(data.id, item.selected[item.qualification_id[0]].answer_data , item.flxValue, item.qualification_id[0])" ng-class="{\'hoverTr-Text\':trhovering}">%'+
                                                '</td>'+
                                                '<td class="td-th-class" ng-hide="AdvGrouping.check || data.condditionGroup && AdvGrouping.check">'+
                                                    '<input type="number" class="text-line" onkeypress="return validateQty(event);"  ng-model="data.minimum"  ng-readonly="true" ng-class="{\'hoverTr-Text\':trhovering}">'+
                                                '</td>'+
                                                '<td class="td-th-class" ng-hide="AdvGrouping.check || data.condditionGroup && AdvGrouping.check">'+
                                                    '<input type="number" class="text-line" onkeypress="return validateQty(event);"  ng-model="data.maximum"  ng-readonly="true" ng-class="{\'hoverTr-Text\':trhovering}">'+
                                                '</td>'+
                                                '<td class="td-th-class" ng-if="liveSurveyEditingStep == \'editStep1\' && !AdvGrouping.check"><input type="number" class="text-line" onkeypress="return validateQty(event);"  ng-model="data.achieved"  ng-readonly="true" ng-class="{\'hoverTr-Text\':trhovering}">'+
                                                '</td>'+
                                            '</tr>'+
                                            '</tbody>'+
                                        '</table>'+
                                    '</div>'+
                                '</div>'+
                            '</div>'+
                        '</div>'+
                        '<div class="row">'+
                            '<div class="col-xs-12 text-center" >'+
                                '<div class="center-block">'+
                                    '<p><b>Total Remaining</b></p>'+
                                    '<p><b>'+
                                            '<span>{{quotaTotalRemRace}}</span>'+
                                        '</b>'+
                                    '</p>'+
                                '</div>'+
                                '<button class="btn btn-primary addQuotas-btn" ng-click="addAdvanceQuota(item, $event)" ng-disabled="quotaTotalRemRace !=0 || gndrAllocationsLessThanFielded" data-dismiss="modal">Apply</button>'+
                            '</div>'+
                        '</div>'+
                    '</div>'+
                '</div>'+
              '</div>'+
        '</div>',
            link: function ($scope, $element, $attrs) {
            }
        };
    }]);


angular.module('pureSpectrumApp')

.directive('ngAdvanceAutocomplete', ['$filter', '$document', '$compile', '$parse', '$timeout', 'createSurvey',

    function ($filter, $document, $compile, $parse, $timeout, createSurvey) {

        return {
            restrict: 'AE',
            scope: {
              items: '=',
              prompt: '@',
              model: '=',
              selectedQuestion :'=',
              answerOption: '=?',
              selectedOptions: '=?',
              choosedQuestion: "=?",
              lockQuestion : '=?',
              languageCode : '=?',
              countryCode : '=?',
              rangeQuesOption : "=?",
              defaultRange : "=?"
            },

            template: '<span>Question Description:</span><div class="advAutoCover"><input type="text" class="form-control" ng-model="model" placeholder="{{prompt}}" ng-keydown="selected=false" ng-change="handleSearch()" ng-focus="handleSearch()" ng-blur="clearItems()" ng-disabled="lockQuestion" />'+
              '<i class="fa fa-search" aria-hidden="true"></i>'+
              '<span class="browse-span">Browse</span>'+
              '<div class="items" ng-show="items.length > 0">'+
                '<div class="item" ng-click="handleSelection(item)" style="cursor:pointer" ng-class="{active:isCurrent($index)}" ng-mouseenter="setCurrent($index)" ng-repeat="item in items track by $index">'+
                    '{{items.length > 0 ? item.question_description : "No Data Found"}}'+
                  '</div>'+
              '</div></div>',
            link: function ($scope, $element, $attrs) {
                $scope.handleSelection = function(selectedItem) {
                    //console.log('selectedItem '+JSON.stringify(selectedItem));
                    $scope.current = 0;
                    $scope.selected = true;
                    $timeout(function() {
                      //console.log('selectedItem '+JSON.stringify(selectedItem));
                      // taking into another variable because operations performed on original text modifies it
                      $scope.model = selectedItem.question_description;
                      // adding answers option in dropdown
                      $scope.answerOption = selectedItem.answers[selectedItem.qualification_id[0]].answer_data;
                      // For using the selection question data on controller
                      $scope.selectedQuestion = selectedItem;
                      /*----Removing %%qualification id from stem 1 ------*/
                      var stem1 = $scope.selectedQuestion.stem1;
                      stem1 = stem1.replace($scope.selectedQuestion.stem1, "I'm looking for people "+$scope.selectedQuestion.stem1);
                      $scope.selectedQuestion["stem1_ui"] = stem1.replace('%%'+$scope.selectedQuestion.qualification_id[0]+'%%','');
                      if($scope.selectedQuestion.question_type == 'range'){
                        var rangeOption = $scope.selectedQuestion.stem1_ui;
                        // Get [] square bracket text
                        rangeOption = rangeOption.match(/\[[^\]]*?\]/g)[0];
                        // remove [] square bracket
                        if(rangeOption){
                          rangeOption = rangeOption.replace(/[\[\]']+/g,'');
                          rangeOption = rangeOption.split('/');
                          // Adding options in option object
                          $scope.rangeQuesOption = {
                            "first": rangeOption[0],
                            "second": rangeOption[1]
                          }
                        }
                        // Updating the default Option
                        $scope.defaultRange = $scope.rangeQuesOption.first;
                        $scope.selectedQuestion.stem1_ui = $scope.selectedQuestion.stem1_ui.replace(/\[[^\]]*?\]/g,'');
                      }
                      // Showing Stem 2
                      if(!$scope.lockQuestion){
                        if($scope.selectedQuestion.stem2.indexOf('%%period%%') != -1) {
                            var stem2 = $scope.selectedQuestion.stem2;
                            stem2 = stem2.split('%%period%%');
                            var day_row = angular.element( document.querySelector( '#days_row' ) );
                            day_row.html(stem2[0]+'<input type="number" id="advDays" ng-model="advDays" value="">'+stem2[1]);
                        }else{
                            var stem2 = $scope.selectedQuestion.stem2;
                            var day_row = angular.element( document.querySelector( '#days_row' ) );
                            day_row.html(stem2);
                        }
                      }
                      //angular.element( document.querySelector( '#days_row' ) ).html('');
                    }, 0);
                };

                $scope.handleSearch = function(id) {
                  var searchQuestion = new Object();
                  var removeQues = _.pluck($scope.choosedQuestion, 'respondent_question_id');

                  searchQuestion["phrase"] = $scope.model;
                  searchQuestion["notIds"] = removeQues;
                    if($scope.languageCode && $scope.countryCode){
                      searchQuestion["locale"] = $scope.languageCode+"_"+$scope.countryCode;
                    }else{
                      searchQuestion["locale"] = "eng_US";
                    }
                  
                  if(searchQuestion["phrase"] == ''){
                    $scope.selectedQuestion = {};
                    var day_row = angular.element( document.querySelector( '#days_row' ) );
                    day_row.html('');
                  }
                  createSurvey.getAdvTargetingQues(searchQuestion).then(
                    function(res) {
                      //console.log("res---------", JSON.stringify(res));
                      if(res.data.apiStatus == 'success'){
                        $scope.items = res.data.questions;
                      }
                      else {
                        $scope.items = [];
                      }
                      
                    },function(err) {
                      console.log('Error in Question search '+JSON.stringify(err));
                    });

                };

                $scope.clearItems = function(){
                  $timeout(function(){
                    $scope.items = [];
                  }, 200);
                }
            }
        };
    }]);

/**
 * Created by Parveen on 5/4/2016.
 */

angular.module('pureSpectrumApp')
.directive('ageRow', ['$filter', '$document', '$compile', '$parse',function ($filter, $document, $compile, $parse) {

        return {
            restrict: 'AE',
            replace: true,
            template: '<tr > <td class="td-th-class"><input type="text" maxlength="2" class=" text-line text-center"  placeholder="" onkeypress="return validateCompletes(event);" ng-blur="checkAgeMinQuotaModel(ageTempArr[$index].min, $index)" ng-model="ageTempArr[$index].min"  ng-class=" {  \'field-error_incmage\': !ageTempArr[$index].min || ageTempArr[$index].min>ageTempArr[$index].max || ageTempArr[$index].min<13}" ng-disabled="$index>0">&nbsp;&nbsp; &nbsp;<span>to</span>&nbsp;&nbsp; <input type="text" maxlength="2" class=" text-line text-center"  placeholder="" onkeypress="return validateCompletes(event);" ng-blur="checkAgeMaxQuotaModel(ageTempArr[$index].max, $index)" ng-model="ageTempArr[$index].max" ng-class=" {  \'field-error_incmage\': !ageTempArr[$index].max || ageTempArr[$index].max<ageTempArr[$index].min || ageTempArr[$index].max<13 }" ng-disabled="$index>0" ng-model-options="{ debounce: 700 }" ng-change="getAchievedForAgeIncome(srvId, \'age\', ageTempArr[$index].min, ageTempArr[$index].max, $index)"> </td>' +
            '<td class="td-th-class"> <input type="number" class=" text-line" placeholder="" onkeypress="return validateCompletes(event);" ng-model="ageTempArr[$index].number" ng-keyup="ageNumberChange(ageTempArr, ageQuotaFlag.ageFlxValue, $index)" >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <input type="text" class=" text-line" maxlength="3" onkeypress="return validateCompletes(event);" ng-model="ageTempArr[$index].per"   ng-keyup="agePerChange(ageTempArr, ageQuotaFlag.ageFlxValue, $index)">% </td>' +
            // '<td class="td-th-class"> <span><label class="status pull-left quota-flex-btn"><input type="checkbox" name="my-checkbox2" checked id="ag{{$index}}" ng-click="setAgeFlex($event,$index)" ><div class="slider round ager{{$index}}"></div></label>&nbsp; &nbsp; by &nbsp; &nbsp; <input type="text" class="text-line" maxlength="2"  onkeypress="return validateCompletes(event)" ng-model="ageTempArr[$index].flexPer" ng-keyup="agePercentageChange(ageTempArr[$index].flexPer,$index)" ng-readonly="!properties.numberOfCompletes || data.ageFlx == false"><span>% </span> </span> </td>' +
            '<td class="td-th-class"> <input type="number" class="text-line" onkeypress="return validateQty(event) " ng-model="ageTempArr[$index].minimum" ng-readonly="true" ng-disabled="$index>0"></td> <td class="td-th-class"> <input type="number" class="text-line" onkeypress="return validateCompletes(event)" ng-model="ageTempArr[$index].maximum" ng-readonly="true" ng-disabled="$index>0"></td> <td class="td-th-class"> <input type="number" ng-if="srvId" class="text-line" onkeypress="return validateCompletes(event)" ng-model="ageTempArr[$index].achieved" ng-readonly="true" ng-disabled="$index>0"><span ng-if="$index==0"> <button class="btn btn-link btn-primary"  ng-click="addAgeNewRow($index)"><span class="glyphicon glyphicon-plus"></span> Click to Add</button></span> <span ng-if="$index>0"> <button class="btn btn-link btn-default"  ng-click="removeAgeNewRow($index)"><span class="glyphicon glyphicon-remove"></span></button></span></td></tr>',
            link:  function (scope, element, attrs) {
            }
            
        }

    }]);

angular.module('pureSpectrumApp')

.directive('ngAutocomplete', ['$filter', '$document', '$compile', '$parse', '$timeout', 'createSurvey',

    function ($filter, $document, $compile, $parse, $timeout, createSurvey) {

        return {
            restrict: 'AE',
            scope: {
              items: '=',
              prompt: '@',
              id: '@',
              country: '@',
              title: '@',
              subtitle: '@',
              model: '=',
              onSelect: '&?',
              onChange: '&?'
            },

            template: '<input type="text" id="{{id}}" id="{{country}}" class="form-control" ng-model="model" placeholder="{{prompt}}" ng-keydown="selected=false" ng-change="handleSearch()" /><div class="items" ng-hide="!model.length || selected"><div class="item" ng-repeat="item in items | filter:filterData  track by $index" ng-click="handleSelection(item)" style="cursor:pointer" ng-class="{active:isCurrent($index)}" ng-mouseenter="setCurrent($index)">{{item[title]}}</div></div>',
            link: function ($scope, $element, $attrs) {

                $scope.handleSelection = function(selectedItem) {
                  $scope.current = 0;
                  $scope.selected = true;
                  $timeout(function() {
                    $scope.onSelect({state : selectedItem});
                  }, 100);
                };
                $scope.current = 0;
                $scope.selected = true; /* hides the list initially*/
                $scope.isCurrent = function(index) {
                    return $scope.current == index;
                };
                $scope.setCurrent = function(index) {
                    $scope.current = index;
                };

                $scope.filterData = function (obj) {
                  
                  return filterFunction (obj.name, $scope.model);
                };

                $scope.handleSearch = function(id) {
                  var countryCode = $scope.country || 'US';
                  if($scope.model != undefined && $scope.model != null && $scope.model != "" && $scope.model.length >= 3) {
                    createSurvey.searchAutoComplete(countryCode, $scope.id, $scope.model).then(
                      function(res) {
                        $timeout(function() {
                          if($scope.id == 'state') {
                            $scope.items = res.data.stData;
                          }
                          if($scope.id == 'csa') {
                            $scope.items = res.data.csaData;
                          }
                          if($scope.id == 'msa') {
                            $scope.items = res.data.msaData;
                          }
                          if($scope.id == 'county') {
                            $scope.items = res.data.countyData;
                          }
                          if($scope.id == 'dma') {
                            $scope.items = res.data.dmaList;
                          }
                          
                        },100);
                        
                      },
                      function(err) {

                      });
                  }else {
                    $scope.items = [];
                  }
                };

                function filterFunction(name, search) {
                  

                  //validate if name is null or not a string if needed
                  if (search != undefined && search != null && search != "" && search.length >= 3){
                    var delimeterRegex = /[ -]+/;
                    var names = name.split(delimeterRegex);
                    //do any of the names in the array start with the search string
                    /*return names.some(function(name) {
                        return name.toLowerCase().indexOf(search.toLowerCase()) === 0;
                    });*/
                      
                      var evens = _.some(names, function(obj) {
                          if(obj.toLowerCase().indexOf(search.toLowerCase()) === 0) {
                            return obj;
                          }  
                      });

                      return evens;
                      

                    
                  }else {
                    return true;
                  }
                  

                };
            }
        };
    }]);

/**
 * Created by Parveen on 4/4/2016.
 */

angular.module('pureSpectrumApp')

.directive('ngDropdownMultiselect', ['$filter', '$document', '$compile', '$parse', '$state', '$timeout',

    function ($filter, $document, $compile, $parse, $state, $timeout) {

        return {
            restrict: 'AE',
            scope: {
                selectedModel: '=',
                options: '=',
                extraSettings: '=',
                events: '=',
                searchFilter: '=?',
                translationTexts: '=',
                groupBy: '@',
                openModal:'=',
                numberCompletes:'=',
                editFlag: '=',
                raceQuota: '=',
                genderQuota: '=',
                relationQuota: '=',
                childrenQuota: '=',
                employmentQuota: '=',
                educationQuota: '=',
                deviceQuota: '=',
                childrenModel: '=',
                rbQuota: '=',
                hispanicQuota: '=',
                childQuotaData: '=',
                categoryName: '@',
                childDataClear: '&',
                censusrepoapply: '&',
                censusGender: '=',
                censusRace: '=',
                censusEducation: '=',
                censusHispanic: '=',
                censusEmployment: '=',
                disableCensus: '=',
                deleteRace: '=',
                deleteEducation: '=',
                deleteEmployment: '=',
                deleteRelation: '=',
                deleteRacebera: '=',
                deleteDevice: '=',
                removeGrouping: '='
            },

            template: function (element, attrs) {
                var checkboxes = attrs.checkboxes ? true : false;
                var groups = attrs.groupBy ? true : false;
                /*PD-658 button issue set width= 100% in templaet 1st & 2nd line*/

                var template = '<div class="multiselect-parent btn-group dropdown-multiselect" style="width: 100%;"><span>';
                template += '<button id="{{modalId}}" type="button" class="dropdown-toggle" style="height: 64px;width: 100%; text-align: left; font-size: 13px;color:#565a5c;font-family:OpenSans-Semibold;" ng-class="settings.buttonClasses" ng-click="toggleDropdown()">{{getButtonText()}}&nbsp;<span  style=" border-left: 4px solid transparent;border-right: 3px solid transparent; border-top: 4px solid #000000;display: inline-block;height: 0;opacity:0.6;vertical-align: middle;width:7px; position: absolute;left: 90%; top: 50%;" ></span></button>';
                template += '<ul class="dropdown-menu dropdown-menu-form" ng-style="{display: open ? \'block\' : \'none\'}" style="overflow-y: scroll;overflow-x: hidden; width: 100%;">'; /*PD-658 width=100%*/
                template += '<li><button type="button" ng-disabled="categoryName != \'gender\' && categoryName != \'children\' && selectedModel.length <= 1" class="btn btn-primary btn-link btn-xs pull-left" data-toggle="modal" data-target="{{modalId}}" id="drop_qId" ng-keydown ="tabbing($event,\'gender_qmodel\',\'age_qmodel\');"> <span data-ng-click="checkAll();" ng-show="!editFlag">Add Quotas </span><span ng-show="editFlag == true">Edit Quota</span></button> <button ng-if="quotaName == \'genderModal\' || quotaName == \'raceModal\' || quotaName == \'hispanicModal\' || quotaName == \'eduModal\' || quotaName == \'empModal\'"  type="button" class="btn btn-primary btn-link btn-xs pull-left" ng-click="censusrepoapply({nameArgs: quotaName});" ng-disabled="(censusGender || censusRace || censusEducation || censusHispanic || censusEmployment)" ng-show="disableCensus">Census</button> <button type="button" class="btn btn-primary btn-link btn-xs pull-right" ng-click="clearQuotas()" >  <span ng-show="editFlag == true">Delete Quota</span></button></li>';
                template += '<li ng-hide="!settings.showCheckAll || settings.selectionLimit > 0"><a data-ng-click="selectAll()"><span class="glyphicon glyphicon-ok"></span>  {{texts.checkAll}}</a>';
                template += '<li ng-show="settings.showUncheckAll"><a data-ng-click="deselectAll();"><span class="glyphicon glyphicon-remove"></span>   {{texts.uncheckAll}}</a></li>';
                template += '<li ng-hide="(!settings.showCheckAll || settings.selectionLimit > 0) && !settings.showUncheckAll" class="divider"></li>';
                template += '<li ng-show="settings.enableSearch"><div class="dropdown-header"><input type="text" class="form-control" style="width: 100%;" ng-model="searchFilter" placeholder="{{texts.searchPlaceholder}}" /></li>';
                template += '<li ng-show="settings.enableSearch" class="divider"></li>';


                if (groups) {
                    template += '<li ng-repeat-star t="option in orderedItems | filter: searchFilter" ng-show="getPropertyForObject(option, settings.groupBy) !== getPropertyForObject(orderedItems[$index - 1], settings.groupBy)" role="presentation" class="dropdown-header">{{ getGroupTitle(getPropertyForObject(option, settings.groupBy)) }}</li>';
                    template += '<li ng-repeat-end role="presentation">';
                } else {
                    template += '<li role="presentation" ng-repeat="option in options | filter: searchFilter">';
                }

                template += '<a role="menuitem" tabindex="-1" ng-click="setSelectedItem(getPropertyForObject(option,settings.idProp)); handleCensusAndGrouping(quotaName)">';

                if (checkboxes) {
                    template += '<div class="checkbox"><input class="checkboxInput" type="checkbox" ng-click="checkboxClick($event, getPropertyForObject(option,settings.idProp))" ng-checked="isChecked(getPropertyForObject(option,settings.idProp))" /><label ng-click="handleCensusAndGrouping(quotaName)">{{getPropertyForObject(option, settings.displayProp)}}</label></div></a>';
                } else {
                    template += '<span data-ng-class="{\'glyphicon glyphicon-ok\': isChecked(getPropertyForObject(option,settings.idProp))}"></span> {{getPropertyForObject(option, settings.displayProp)}}</a>';
                }

                template += '</li>';

                template += '<li class="divider" ng-show="settings.selectionLimit > 0"></li>';
                template += '<li role="presentation" ng-show="settings.selectionLimit > 0"><a role="menuitem">{{selectedModel.length}} {{texts.selectionOf}} {{settings.selectionLimit}} {{texts.selectionCount}}</a></li>';

                template += '</ul>';
                template += '</div>';

                element.html(template);
            },
            link: function ($scope, $element, $attrs) {
                //$scope.chldrnFlag = true;
                var $dropdownTrigger = $element.children()[0];
                $scope.toggleDropdown = function () {
                    $scope.open = !$scope.open;

                };
                $attrs.$observe('openModal', function(value){
                    $scope.modalId = "#"+value;
                    $scope.quotaName = value; //PD-1130
                });


                $scope.checkboxClick = function ($event, id) {
                    $scope.setSelectedItem(id);
                    $event.stopImmediatePropagation();
                };


                $scope.liveSurveyEditingStep = $state.params.edit;

                $scope.externalEvents = {
                    onItemSelect: angular.noop,
                    onItemDeselect: angular.noop,
                    onSelectAll: angular.noop,
                    onDeselectAll: angular.noop,
                    onInitDone: angular.noop,
                    onMaxSelectionReached: angular.noop
                };

                $scope.clearQuotas = function() {
                    if(!confirm("Are you sure you want to clear Quota")) {
                    }else{
                        angular.forEach($scope.options, function (value) {
                            if(_.has(value, "hasCensusRepoQuota")) {
                                delete value.hasCensusRepoQuota;
                            }
                            value.number = '';
                            value.per = '';
                            value.minimum = '';
                            value.maximum = '';
                            //{"flexiblePer":20,"flexible":true,"id":111,"number":50,"minimum":40,"maximum":60,"percentage":50}
                            if(value.fieldName == "Children"){
                                $scope.childQuotaData.no[0]['flexPer'] = 0;
                                $scope.childQuotaData.no[0]['minimum'] = '';
                                $scope.childQuotaData.no[0]['maximum'] = '';
                                $scope.childQuotaData.no[0]['number'] = '';
                                $scope.childQuotaData.no[0]['per'] = '';
                                $scope.childQuotaData.no[0]['percentage'] = '';
                                _.each($scope.childQuotaData.have, function(item, index){
                                    if(index != 0){
                                        $scope.childQuotaData.have.splice(index, 1);
                                    }
                                });
                                $scope.childDataClear();
                               
                                $scope.childrenQuota = false;
                            }else{
                                _.each($scope.selectedModel, function(item, index){
                                    delete item;
                                });

                                if(value.fieldName == "Race"){
                                    $scope.raceQuota = false;
                                    $scope.censusRace = false;
                                    //PD-961
                                    $scope.deleteGroupingQuotas();
                                    
                                }else if(value.fieldName == "Gender"){
                                    $scope.genderQuota = false;
                                    $scope.censusGender = false;
                                }else if(value.fieldName == "Relationship"){
                                     //PD-961
                                    $scope.deleteGroupingQuotas();

                                    $scope.relationQuota = false;
                                }else if(value.fieldName == "Employment"){
                                    //PD-961
                                    $scope.deleteGroupingQuotas();

                                    $scope.employmentQuota = false;
                                    $scope.censusEmployment = false;
                                }else if(value.fieldName == "Education"){
                                     //PD-961
                                    $scope.deleteGroupingQuotas();
                                    

                                    $scope.educationQuota = false;
                                    $scope.censusEducation = false;
                                }else if(value.fieldName == "raceBera"){
                                    //PD-961
                                    $scope.deleteGroupingQuotas();

                                    $scope.rbQuota = false;
                                }else if(value.fieldName == "hispanic"){
                                    $scope.hispanicQuota = false;
                                    $scope.censusHispanic = false;
                                }else if(value.fieldName == "Device"){
                                    //PD-961
                                    $scope.deleteGroupingQuotas();

                                    $scope.deviceQuota = false;
                                }if(value.fieldName == "Children"){
                                    $scope.childrenQuota = false;
                                }
                            }
                        });
                        $scope.editFlag = false;
                    }
                }

                $scope.settings = {
                    dynamicTitle: true,
                    scrollable: false,
                    scrollableHeight: '300px',
                    closeOnBlur: true,
                    displayProp: 'name',
                    idProp: 'id',
                    externalIdProp: 'id',
                    enableSearch: false,
                    selectionLimit: 0,
                    showCheckAll: false,
                    showUncheckAll: true,
                    closeOnSelect: false,
                    buttonClasses: 'btn btn-default',
                    closeOnDeselect: false,
                    groupBy: $attrs.groupBy || undefined,
                    groupByTextProvider: null,
                    smartButtonMaxItems: 0,
                    smartButtonTextConverter: angular.noop
                };

                $scope.texts = {
                    checkAll: 'Select All',
                    uncheckAll: 'Deselect All',
                    selectionCount: 'selected',
                    selectionOf: '/',
                    buttonDefaultText: 'All',
                    searchPlaceholder: 'Search...',
                    dynamicButtonTextSuffix: 'All'
                };

                $scope.searchFilter = $scope.searchFilter || '';

                if (angular.isDefined($scope.settings.groupBy)) {
                    $scope.$watch('options', function (newValue) {
                        if (angular.isDefined(newValue)) {
                            $scope.orderedItems = $filter('orderBy')(newValue, $scope.settings.groupBy);
                        }
                    });
                }
                angular.extend($scope.settings, $scope.extraSettings || []);
                angular.extend($scope.externalEvents, $scope.events || []);
                angular.extend($scope.texts, $scope.translationTexts);

                $scope.singleSelection = $scope.settings.selectionLimit === 1;

                function getFindObj(id) {
                    var findObj = {};

                    if ($scope.settings.externalIdProp === '') {
                        findObj[$scope.settings.idProp] = id;
                    } else {
                        findObj[$scope.settings.externalIdProp] = id;
                    }

                    return findObj;
                }

                function clearObject(object) {
                    for (var prop in object) {
                        delete object[prop];
                    }
                }

                if ($scope.singleSelection) {
                    if (angular.isArray($scope.selectedModel) && $scope.selectedModel.length === 0) {
                        clearObject($scope.selectedModel);
                    }
                }

                if($scope.settings.closeOnBlur) {
                    $document.on('click', function (e) {
                        var target = e.target.parentElement;
                        var parentFound = false;

                        while (angular.isDefined(target) && target !== null && !parentFound) {
                            if (_.contains(target.className.split(' '), 'multiselect-parent') && !parentFound) {
                                if (target === $dropdownTrigger) {
                                    parentFound = true;
                                }
                            }
                            target = target.parentElement;
                        }

                        if (!parentFound) {
                            $scope.$apply(function () {
                                $scope.open = false;
                            });
                        }
                    });
                }

                $scope.getGroupTitle = function (groupValue) {
                    if ($scope.settings.groupByTextProvider !== null) {
                        return $scope.settings.groupByTextProvider(groupValue);
                    }

                    return groupValue;
                };

                $scope.getButtonText = function () {
                    if ($scope.settings.dynamicTitle && ($scope.selectedModel.length > 0 || (angular.isObject($scope.selectedModel) && _.keys($scope.selectedModel).length > 0))) {
                        if ($scope.settings.smartButtonMaxItems > 0) {
                            var itemsText = [];

                            angular.forEach($scope.options, function (optionItem) {
                                if ($scope.isChecked($scope.getPropertyForObject(optionItem, $scope.settings.idProp))) {
                                    var displayText = $scope.getPropertyForObject(optionItem, $scope.settings.displayProp);
                                    var converterResponse = $scope.settings.smartButtonTextConverter(displayText, optionItem);
                                    itemsText.push(converterResponse ? converterResponse : displayText);
                                }
                            });

                            if ($scope.selectedModel.length > $scope.settings.smartButtonMaxItems) {
                                itemsText = itemsText.slice(0, $scope.settings.smartButtonMaxItems);
                                itemsText.push('...');
                            }

                            return itemsText.join(', ');
                        } else {
                            var totalSelected;

                            if ($scope.singleSelection) {
                                totalSelected = ($scope.selectedModel !== null && angular.isDefined($scope.selectedModel[$scope.settings.idProp])) ? 1 : 0;
                            } else {
                                //Handle Grouping Count show for selected PD-961
                                var findSltGrouped = _.where($scope.selectedModel, {"condditionGroup": true});
                                if(findSltGrouped.length > 0) {
                                    _.each(findSltGrouped, function(sltGrup) {
                                        var findIndex = _.indexOf($scope.selectedModel, sltGrup);
                                        if(findIndex > -1) {
                                            $scope.selectedModel.splice(findIndex, 1);
                                        }
                                    })
                                }
                                totalSelected = angular.isDefined($scope.selectedModel) ? $scope.selectedModel.length : 0;
                            }
                            if($scope.selectedModel && $scope.options && $scope.selectedModel.length < $scope.options.length){
                                $scope.texts.dynamicButtonTextSuffix = 'selected';
                                return totalSelected + ' ' + $scope.texts.dynamicButtonTextSuffix
                            }


                            if (totalSelected === 0) {
                                $scope.settings.showCheckAll = true;
                                return $scope.texts.buttonDefaultText;
                            }

                            else {
                                $scope.texts.dynamicButtonTextSuffix = 'All';
                                $scope.settings.showCheckAll = false;
                                $scope.settings.showUncheckAll = true;
                                return  $scope.texts.dynamicButtonTextSuffix;
                            }

                        }

                    } else {
                        $scope.texts.dynamicButtonTextSuffix = 'All';
                        $scope.settings.showCheckAll = true;
                        $scope.settings.showUncheckAll = false;
                        return $scope.texts.buttonDefaultText;
                    }
                };


                $scope.getPropertyForObject = function (object, property) {
                    if (angular.isDefined(object) && object.hasOwnProperty(property)) {
                        return object[property];
                    }

                    return '';
                };

                $scope.selectAll = function () {
                    $scope.deselectAll(false);
                    var tmpRem = 0;
                    $scope.settings.showUncheckAll = true;
                    $scope.settings.showCheckAll = false;
                    $scope.externalEvents.onSelectAll();
                    angular.forEach($scope.options, function (value) {
                        value.selected = true;
                        // value.number = parseInt($scope.numberCompletes/$scope.options.length);
                        // value.per = parseInt((value.number * 100)/$scope.numberCompletes);
                        tmpRem = parseInt(tmpRem + parseInt($scope.numberCompletes/$scope.options.length));
                        value.totalRem = $scope.numberCompletes - tmpRem;
                        $scope.setSelectedItem(value[$scope.settings.idProp], true);

                    });
                    if($scope.censusGender) {
                        $scope.censusGender = false;
                    }
                    if($scope.censusRace) {
                        $scope.censusRace = false;
                    }
                    if($scope.censusEducation) {
                        $scope.censusEducation = false;
                    }
                    if($scope.censusHispanic) {
                        $scope.censusHispanic = false;
                    }
                    if($scope.censusEmployment) {
                        $scope.censusEmployment = false;
                    }
                };

                $scope.deselectAll = function (sendEvent) {
                    if(!sendEvent){
                        $scope.editFlag = false;
                    }
                    sendEvent = sendEvent || true;
                    $scope.settings.showCheckAll = true;
                    $scope.settings.showUncheckAll = false;
                    if (sendEvent) {
                        $scope.externalEvents.onDeselectAll();
                    }

                    if ($scope.singleSelection) {
                        clearObject($scope.selectedModel);
                    } else {
                        $scope.selectedModel.splice(0, $scope.selectedModel.length);
                    }
                    //PD-961
                    $scope.deleteGroupingQuotas();

                    _.each($scope.options, function (value) {
                        resetQuotaFlag(value);
                        value.selected = false;
                        value.number = '';
                        value.per = '';
                        value.minimum = '';
                        value.maximum = '';
                        value.totalRem = '';
                    });
                    
                    $scope.texts.buttonDefaultText =  'Select';
                };
                function resetQuotaFlag(value){
                    if(value.fieldName == "Race"){
                        $scope.raceQuota = false;
                    }
                    if(value.fieldName == "Gender"){
                        $scope.genderQuota = false;
                    }
                    if(value.fieldName == "Relationship"){
                        $scope.relationQuota = false;
                    }
                    if(value.fieldName == "Children"){
                        $scope.childrenQuota = false;
                    }
                    if(value.fieldName == "Employment") {
                            $scope.employmentQuota = false;
                     }
                    if(value.fieldName == "Education") {
                            $scope.educationQuota = false;
                        }
                    if(value.fieldName == "Device") {
                        $scope.deviceQuota = false;
                    }
                    if(value.fieldName == "raceBera") {
                        $scope.rbQuota = false;
                    }
                    if(value.fieldName == "hispanic") {
                        $scope.hispanicQuota = false;
                    }
                }
                $scope.setSelectedItem = function (id, dontRemove) {
                    var uncheckconfirm = false;
                    var findObj = getFindObj(id);
                    var finalObj = null;
                    var tmpSl = 0;
                    angular.forEach($scope.options, function (value) {
                     if(value.number !== ""){
                            if(value.id == id){
                            value.selected = true;
                            }
                        }
                        if(value.selected == true){
                            var lth = $scope.selectedModel.length+1;
                           // value.number = parseInt($scope.numberCompletes/lth);
                           // value.per = parseInt((value.number * 100)/$scope.numberCompletes);
                            tmpSl = parseInt(tmpSl + parseInt($scope.numberCompletes/lth));
                           value.totalRem = $scope.numberCompletes - tmpSl;
                        }
                        if(value.id == 112 && value.name == "Have Children"  && value.selected == true){
                            $scope.chldrnFlag = true;
                           }
                    });


                    if ($scope.settings.externalIdProp === '') {
                        finalObj = _.find($scope.options, findObj);
                    } else {
                        finalObj = findObj;
                    }
                    if ($scope.singleSelection) {
                        clearObject($scope.selectedModel);
                        angular.extend($scope.selectedModel, finalObj);
                        $scope.externalEvents.onItemSelect(finalObj);
                        if ($scope.settings.closeOnSelect) $scope.open = false;

                        return;
                    }

                    dontRemove = dontRemove || false;

                    var exists = _.findIndex($scope.selectedModel, findObj) !== -1;
                    if (!dontRemove && exists) {
                        var tmp = 0;
                        //PD - 374
                        var stopAngularForEachLoop = false;
                        var total_Qty = 0; 
                        if($scope.liveSurveyEditingStep == 'editStep1'){
                                if($scope.options[0].fieldName == 'Children'){
                                    _.each(_.keys($scope.childQuotaData), function(eachKey){
                                        _.each($scope.childQuotaData[eachKey], function(singleQuotaRow){
                                            if(singleQuotaRow.number && singleQuotaRow.number != undefined && singleQuotaRow.number!= ''){
                                                total_Qty += singleQuotaRow.number;
                                            }
                                        });
                                    });
                                }else{
                                    _.each($scope.options, function(singleRow){
                                        if(singleRow.number != undefined && singleRow.number != null && singleRow.number != ''){
                                            total_Qty = total_Qty + singleRow.number;
                                        }
                                    });
                                    //PD-961
                                    var findGrouping = _.findWhere($scope.selectedModel, {"condditionGroup": true});
                                    if(findGrouping) {
                                       total_Qty += findGrouping.number; 
                                    }
                                }
                                angular.forEach($scope.options, function(value){
                                    if(stopAngularForEachLoop == false){
                                        if((total_Qty === $scope.numberCompletes)){
                                            if(!confirm("Modifying the qualifications will delete the current quotas")) {
                                                stopAngularForEachLoop = true;
                                                uncheckconfirm = true;
                                                return true;
                                            }else{
                                                value.number = '';
                                                value.per = '';
                                                value.minimum = '';
                                                value.maximum = '';
                                                //{"flexiblePer":20,"flexible":true,"id":111,"number":50,"minimum":40,"maximum":60,"percentage":50}
                                                if(value.fieldName == "Race" || value.fieldName == "Gender" || value.fieldName == "Relationship" || value.fieldName == "Employment" || value.fieldName == "Education" || value.fieldName == "Device" || value.fieldName == "raceBera" || value.fieldName == "hispanic") {
                                                    for(var i in $scope.selectedModel){
                                                        delete($scope.selectedModel[i].number);
                                                        delete($scope.selectedModel[i].percentage);
                                                        delete($scope.selectedModel[i].minimum);
                                                        delete($scope.selectedModel[i].maximum);
                                                        delete($scope.selectedModel[i].flexiblePer);
                                                        delete($scope.selectedModel[i].flexible);
                                                        delete($scope.selectedModel[i].hasValidQuotas);
                                                
                                                        //PD-961
                                                        if(_.has($scope.selectedModel[i], "condditionGroup")) {
                                                            $scope.selectedModel.splice(i, 1);
                                                        }
                                                    }
                                                    for(var i in $scope.options){
                                                        $scope.options[i].number = '';
                                                        $scope.options[i].percentage = '';
                                                        $scope.options[i].minimum = '';
                                                        $scope.options[i].maximum = '';
                                                        $scope.options[i].flexiblePer = '';
                                                        $scope.options[i].flexible = '';
                                                        $scope.options[i].per = '';
                                                    }
                                                    resetQuotaFlag(value);
                                                    $scope.deleteGroupingQuotas();
                                                }
                                                if(value.fieldName == "Children") {
                                                    $scope.childDataClear();
                                                    // For sltChildren
                                                    for(var i in $scope.options){
                                                        $scope.options[i].number = '';
                                                        $scope.options[i].percentage = '';
                                                        $scope.options[i].minimum = '';
                                                        $scope.options[i].maximum = '';
                                                        $scope.options[i].flexiblePer = '';
                                                        $scope.options[i].flexible = '';
                                                        $scope.options[i].per = '';
                                                    }
                                                    // For ChildTempArr
                                                    $scope.childQuotaData.no[0]['flexPer'] = 0;
                                                    $scope.childQuotaData.no[0]['minimum'] = '';
                                                    $scope.childQuotaData.no[0]['maximum'] = '';
                                                    $scope.childQuotaData.no[0]['number'] = '';
                                                    $scope.childQuotaData.no[0]['per'] = '';
                                                    $scope.childQuotaData.no[0]['percentage'] = '';
                                                    _.each($scope.childQuotaData.have, function(item, index){
                                                        if(index != 0){
                                                            $scope.childQuotaData.have.splice(index, 1);
                                                        }
                                                    });
                                                    $scope.childrenQuota = false;
                                                    
                                                }
                                                $scope.editFlag = false;
                                            }
                                            stopAngularForEachLoop = true;
                                        }else{
                                            stopAngularForEachLoop = true;
                                        }
                                    }
                                });
                               
                        }
                        //PD - 374 end
                        angular.forEach($scope.options, function (value) {
                             if(uncheckconfirm === false){
                                    if(value.id == id){
                                       value.selected = false; 
                                    }
                                       value.number = '';
                                       value.per = '';
                                       value.minimum = '';
                                       value.maximum = '';
                                       $scope.editFlag = false;
                                       resetQuotaFlag(value);
                                        for(var i in $scope.selectedModel){
                                            delete($scope.selectedModel[i].number);
                                            delete($scope.selectedModel[i].percentage);
                                            delete($scope.selectedModel[i].minimum);
                                            delete($scope.selectedModel[i].maximum);
                                            delete($scope.selectedModel[i].flexiblePer);
                                            delete($scope.selectedModel[i].flexible);
                                            delete($scope.selectedModel[i].hasValidQuotas);
                                        }
                             }
                           if(value.id == 112 && value.name == "Have Children" && value.selected == false){
                            $scope.chldrnFlag = false;
                           }
                           
                            if(value.selected == true){
                               var lth = $scope.selectedModel.length-1;
                           //     value.number = parseInt($scope.numberCompletes/lth);
                           //     value.per = parseInt((value.number * 100)/$scope.numberCompletes);
                               tmp = parseInt(tmp + parseInt($scope.numberCompletes/lth));
                                value.totalRem = $scope.numberCompletes - tmp;
                            }
                        });
                        if(uncheckconfirm == false){
                            $scope.selectedModel.splice(_.findIndex($scope.selectedModel, findObj), 1);
                            $scope.externalEvents.onItemDeselect(findObj);
                        }
                    } else if (!exists && ($scope.settings.selectionLimit === 0 || $scope.selectedModel.length < $scope.settings.selectionLimit)) {
                        //PD - 374
                         if($scope.liveSurveyEditingStep !== 'editStep1'){
                            _.each($scope.options, function(value){
                                if(value.id === id){
                                    value.selected = true;
                                }
                            })
                         }
                        var stopAngularForEachLoop = false;
                        var total_Qty = 0; 
                        if($scope.liveSurveyEditingStep == 'editStep1'){
                                for(var i in $scope.options){
                                    if($scope.options[i].number != undefined && $scope.options[i].number != null && $scope.options[i].number != ''){
                                        total_Qty = total_Qty + $scope.options[i].number;
                                    }
                                }
                                
                                angular.forEach($scope.options, function(value){
                                    if(stopAngularForEachLoop == false){
                                        if (total_Qty !== $scope.numberCompletes){ 
                                            _.each($scope.options , function(value){
                                                if(value.id == id){
                                                    value.selected = true;
                                                }
                                            })
                                        }    
                                        if(total_Qty === $scope.numberCompletes){
                                            if(!confirm("Modifying the qualifications will delete the current quotas")) {
                                                uncheckconfirm = true;
                                                stopAngularForEachLoop = true;
                                                return false;
                                            }else{
                                              
                                                value.number = '';
                                                value.per = '';
                                                value.minimum = '';
                                                value.maximum = '';
                                               
                                                //{"flexiblePer":20,"flexible":true,"id":111,"number":50,"minimum":40,"maximum":60,"percentage":50}
                                                if(value.fieldName == "Race" || value.fieldName == "Gender" || value.fieldName == "Relationship" || value.fieldName == "Employment" || value.fieldName == "Education" || value.fieldName == "Device" || value.fieldName == "raceBera" || value.fieldName == "hispanic") {
                                                    for(var i in $scope.selectedModel){
                                                        delete($scope.selectedModel[i].number);
                                                        delete($scope.selectedModel[i].percentage);
                                                        delete($scope.selectedModel[i].minimum);
                                                        delete($scope.selectedModel[i].maximum);
                                                        delete($scope.selectedModel[i].flexiblePer);
                                                        delete($scope.selectedModel[i].flexible);
                                                        delete($scope.selectedModel[i].hasValidQuotas);
                                                    }
                                                    for(var i in $scope.options){
                                                        $scope.options[i].number = '';
                                                        $scope.options[i].percentage = '';
                                                        $scope.options[i].minimum = '';
                                                        $scope.options[i].maximum = '';
                                                        $scope.options[i].flexiblePer = '';
                                                        $scope.options[i].flexible = '';
                                                        $scope.options[i].per = '';
                                                        if($scope.options[i].id == id){
                                                           $scope.options[i].selected = true; 
                                                        }
                                                    }
                                                    /*used to set has quota flag false*/
                                                    resetQuotaFlag(value);
                                                    //$scope.raceQuota = false;
                                                }
                                                
                                                if(value.fieldName == "Children") {
                                                    for(var i in $scope.childrenModel){
                                                        delete($scope.childrenModel[i].number);
                                                        delete($scope.childrenModel[i].percentage);
                                                        delete($scope.childrenModel[i].minimum);
                                                        delete($scope.childrenModel[i].maximum);
                                                        delete($scope.childrenModel[i].flexiblePer);
                                                        delete($scope.childrenModel[i].flexible);
                                                        delete($scope.selectedModel[i].hasValidQuotas);
                                                    }
                                                    for(var i in $scope.options){
                                                        $scope.options[i].number = '';
                                                        $scope.options[i].percentage = '';
                                                        $scope.options[i].minimum = '';
                                                        $scope.options[i].maximum = '';
                                                        $scope.options[i].flexiblePer = '';
                                                        $scope.options[i].flexible = '';
                                                        $scope.options[i].per = '';
                                                    }
                                                    $scope.childrenQuota = false;
                                                    
                                                }
                                                $scope.editFlag = false;
                                            }
                                            stopAngularForEachLoop = true;
                                        }else{
                                            stopAngularForEachLoop = true;
                                        }
                                    }
                                });
                                
                        }
                        //PD - 374 end
                        if(uncheckconfirm === false){
                            if(_.findWhere($scope.selectedModel ,{'hasValidQuotas': true})){
                                for(var i in $scope.selectedModel){
                                    delete($scope.selectedModel[i].number);
                                    delete($scope.selectedModel[i].percentage);
                                    delete($scope.selectedModel[i].minimum);
                                    delete($scope.selectedModel[i].maximum);
                                    delete($scope.selectedModel[i].flexiblePer);
                                    delete($scope.selectedModel[i].flexible);
                                    delete($scope.selectedModel[i].hasValidQuotas);
                                }
                                _.each($scope.options, function(value){
                                    if(value.id == id){
                                        value.selected = true;
                                    }
                                    value.number = '';
                                    value.per = '';
                                    value.minimum = '';
                                    value.maximum = '';
                                    $scope.editFlag = false;
                                    resetQuotaFlag(value);
                                });
                            }
                            $scope.selectedModel.push(finalObj);
                            $scope.externalEvents.onItemSelect(finalObj);

                        }
                    }
                    if ($scope.settings.closeOnSelect) $scope.open = false;
                };

                $scope.isChecked = function (id) {
                    if ($scope.singleSelection) {
                        return $scope.selectedModel !== null && angular.isDefined($scope.selectedModel[$scope.settings.idProp]) && $scope.selectedModel[$scope.settings.idProp] === getFindObj(id)[$scope.settings.idProp];
                    }

                    return _.findIndex($scope.selectedModel, getFindObj(id)) !== -1;
                };


                $scope.externalEvents.onInitDone();


                $scope.checkAll = function(){
                    var flag= false;
                     angular.forEach($scope.options, function (value) {
                        if( value.selected == false){
                            flag=true;
                        } 
                        //PD-1130
                        if(_.has(value, "hasCensusRepoQuota") && value.hasCensusRepoQuota) {
                            flag=true;
                        }  
                     });
                     if(flag == false){
                        $scope.options.totalRem = $scope.numberCompletes;
                        $scope.selectAll();
                     }   

                };
                //PD-961
                $scope.deleteGroupingQuotas = function() {
                    if($scope.deleteRace) {
                        if($scope.removeGrouping && _.has($scope.removeGrouping, "race")) {
                          delete $scope.removeGrouping.race;  
                        }
                        
                        removeGroupSelection();
                    }

                     if($scope.deleteRelation) {
                        if($scope.removeGrouping && _.has($scope.removeGrouping, "relationships")) {
                          delete $scope.removeGrouping.relationships;  
                        }
                        removeGroupSelection();
                    }

                    if($scope.deleteEmployment) {
                         if($scope.removeGrouping && _.has($scope.removeGrouping, "employments")) {
                          delete $scope.removeGrouping.employments;  
                        }
                        removeGroupSelection();
                    }

                    if($scope.deleteEducation) {
                        if($scope.removeGrouping && _.has($scope.removeGrouping, "educations")) {
                          delete $scope.removeGrouping.educations;  
                        }
                        removeGroupSelection();
                    }
                    if($scope.deleteRacebera) {
                        if($scope.removeGrouping && _.has($scope.removeGrouping, "raceBera")) {
                          delete $scope.removeGrouping.raceBera;  
                        }
                        removeGroupSelection();
                    }

                    if($scope.deleteDevice) {
                        if($scope.removeGrouping && _.has($scope.removeGrouping, "device")) {
                          delete $scope.removeGrouping.device;  
                        }
                        removeGroupSelection();
                    }
                    //End Delete Grouping on Deselect
                }

                function removeGroupSelection() {
                    _.each($scope.options, function(value) {
                        if(_.has(value, "setGrupActive")) {
                            value.setGrupActive = false;
                        }
                    })
                }
                /*Function to Enable Census Repo on check/Unceck and Remove Grouping*/
                $scope.handleCensusAndGrouping = function(quota_name) {
                    if(quota_name == "raceModal") {
                        $scope.censusRace = false;
                        $scope.deleteGroupingQuotas();
                    }
                    else if(quota_name == "genderModal") {
                        $scope.censusGender = false;
                    }
                    else if(quota_name == "rbModal") {
                        $scope.deleteGroupingQuotas();
                    }
                    else if(quota_name == "hispanicModal") {
                       $scope.censusHispanic = false; 
                    }
                    else if(quota_name == "rlnModal") {
                      $scope.deleteGroupingQuotas();  
                    }
                    else if(quota_name == "empModal") {
                      $scope.deleteGroupingQuotas();  
                      $scope.censusEmployment = false;
                    }
                    else if(quota_name == "eduModal") {
                        $scope.censusEducation = false;
                        $scope.deleteGroupingQuotas();
                    }
                    else if(quota_name == "empModal") {
                        $scope.censusEmployment = false;
                    }
                    else {
                        if(quota_name =="dvcModal") {
                            $scope.deleteGroupingQuotas();
                        }
                    }
                }
            }
        };
    }]);

/**
 * Created by Raj on 5/7/2016.
 */

angular.module('pureSpectrumApp')
.directive('chldRow', ['$filter', '$document', '$compile', '$parse',function ($filter, $document, $compile, $parse) {

        return {
            restrict: 'AE',
            replace: true,
            template: '<tr><td>Have Children</td><td class="td-th-class"><input type="number" onKeyDown="if(this.value.length>1 && event.keyCode!=8) return false;" class=" text-line text-center"  placeholder="" onkeypress="return validateQty(event);" ng-model="chldTempArr.have[$index].min" ng-disabled="$index!=0" ng-class=" {  \'field-error_incmage\': chldTempArr.have[$index].min==undefined ||chldTempArr.have[$index].min==null ||chldTempArr.have[$index].min===\'\' || chldTempArr.have[$index].min>chldTempArr.have[$index].max || chldTempArr.have[$index].min<0}">&nbsp;&nbsp; &nbsp;<span>to</span>&nbsp;&nbsp; <input type="number" onKeyDown="if(this.value.length>1 && event.keyCode!=8) return false;" class=" text-line text-center"  placeholder="" onkeypress="return validateQty(event);" ng-model="chldTempArr.have[$index].max" ng-disabled="$index!=0" ng-class=" {  \'field-error_incmage\': !chldTempArr.have[$index].max || chldTempArr.have[$index].max<chldTempArr.have[$index].min || chldTempArr.have[$index].max<0}"> </td>' +
            '<td><div class="radio"><input type="radio" name="gender_{{$index}}" value="111" ng-model="chldTempArr.have[$index].gender" ng-disabled="$index!=0" id="Gender_Boy_{{$index}}"/><label  for="Gender_Boy_{{$index}}">Boy</label></div><div class="radio girl"><input type="radio" ng-disabled="$index!=0" name="gender_{{$index}}" value="112" checked="" ng-model="chldTempArr.have[$index].gender" ng-click="addGirl()" id="Gender_Girl_{{$index}}"/><label   for="Gender_Girl_{{$index}}">Girl</label></div><div class="radio either"><input type="radio" ng-disabled="$index!=0"  name="gender_{{$index}}" value="both" ng-model="chldTempArr.have[$index].gender" id="Gender_Both_{{$index}}"/><label  for="Gender_Both_{{$index}}">Either</label></div></td>'+
            '<td class="td-th-class"> <input type="number" class=" text-line" placeholder="" onkeypress="return validateQty(event);" ng-model="chldTempArr.have[$index].number" ng-keyup="chldNumberChange(chldTempArr, childQuotaFlag.chldFlxValue, $index)" >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <input type="text" class=" text-line" maxlength="3" onkeypress="return validateQty(event);" ng-model="chldTempArr.have[$index].per"  ng-keyup="chldPerChange(chldTempArr, childQuotaFlag.chldFlxValue, $index)" >% </td>' +
            '<td class="td-th-class"> <input type="number" class="text-line" onkeypress="return validateQty(event) " ng-model="chldTempArr.have[$index].minimum" ng-readonly="true" ></td> <td class="td-th-class"> <input type="number" class="text-line" onkeypress="return validateQty(event)" ng-model="chldTempArr.have[$index].maximum" ng-readonly="true"><span ng-if="$index==0"></td> <td class="td-th-class"> <input type="number" ng-if="srvId" class="text-line" onkeypress="return validateQty(event)" ng-model="chldTempArr.have[$index].achieved" ng-readonly="true"><span ng-if="$index==0"> <button class="btn btn-link btn-primary"  ng-click="addChldNewRow($index)"><span class="glyphicon glyphicon-plus"></span> Click to Add</button></span> <span ng-if="$index>0"> <button class="btn btn-link btn-default"  ng-click="removeChldNewRow($index)"><span class="glyphicon glyphicon-remove"></span></button></span></td></tr>',
            link:  function (scope, element, attrs) {
                //console.log('scope.units '+scope.units);
            }
            
        }

    }]);
psApp.directive('clickBalancing', ['$filter', '$document', '$compile', '$parse', '$timeout', 'notify', function($filter, $document, $compile, $parse, $timeout, notify){

	return {
		restrict : 'AE',
		scope:{
			balancingSwitch: '=balancingSwitch',
			completes: "=completes",
			incidence : "=incidence",
			totalClicks: "=totalClicks",
			completesNeeded: '=completesNeeded',
			quotaUpdate: '&quotaUpdate',
			liveEdit: '=liveEdit',
			toShow : '=toShow'
		},
		template: '<div class="survey-form custom-toggle text-center" ng-show="toShow">'+
					'<span>Completes</span>'+
					'<div class="custom-toggle-inner"><input type="checkbox" id="switch" ng-model="balancingSwitch" ng-change="calculateTotal()" ng-disabled="!completes || !incidence || liveEdit == \'editStep1\'" ng-true-value="1" ng-false-value="0"  /><label for="switch">Toggle</label>'+
						'<p>Entrants: {{totalClicks?totalClicks:"NA"}}</span></p>'+
					'</div>'+
                    '<span>Clicks</span>'+
                  '</div>',
		link: function($scope, $element, $attrs){
			$scope.totalClicks = 0;
			$scope.calculateTotal = function(){
				if($scope.balancingSwitch){
					console.log('$scope.completes ',$scope.completes);
					console.log('$scope.incidence ',$scope.incidence);
					if($scope.completes && $scope.incidence){
						$scope.totalClicks = Math.round(($scope.completes * 100)/$scope.incidence);
						$scope.completesNeeded  = $scope.totalClicks;
						//Update Quotas
						$timeout(function(){
							$scope.quotaUpdate();
						}, 10);
						
					}else{
						notify({
			                message: 'Please enter completes and incidence',
			                classes: 'alert-warning',
			                duration: 2000
			            });
					}
				}else{
					$scope.totalClicks = 0;
					$scope.completesNeeded = $scope.completes;
					//Update Quotas
					$timeout(function(){
						$scope.quotaUpdate();
					}, 10);
				}
			}

			$scope.$on('calculateTotalCliks',function(event, data){
	            $scope.calculateTotal();
	        });
		}
	}

}]);
/*
 *Created by Amar on 27/2/2017. PD-821
 */
 angular.module('pureSpectrumApp')

.directive('clickEdit',['$rootScope', '$timeout', 'createSurvey', 'notify', function($rootScope, $timeout, createSurvey, notify) {
    return {
        require: 'ngModel',
        scope: {
            model: '=ngModel',
            type: '@type',
            loader: '=loader'
        },
        replace: true,
        transclude: false,
        // includes our template
        template:
            '<div class="">'+
                '<div class="hover-edit-trigger" title="click to edit">'+
                    '<div class="hover-text-field" ng-show="!editState" ng-click="toggle()">{{model.current_target}}<div class="pencil-outer"><div class="edit-pencil glyphicon glyphicon-pencil"></div></div></div>'+
                    '<input class="inputText" type="inputText"  ng-model="localModel" ng-enter="save()" onkeypress="return validateqty(this, event);" ng-show="editState && type == \'inputText\'" />' +
                '</div>'+
                '<div class="edit-button-group" ng-show="editState">'+
                    '<div class="glyphicon glyphicon-ok"  ng-click="save()"></div>'+
                    '<div class="glyphicon glyphicon-remove" ng-click="cancel()"></div>'+
                '</div>'+
            '</div>',
        link: function (scope, element, attrs) {
            scope.editState = false;

            // make a local ref so we can back out changes, this only happens once and persists
            scope.localModel = scope.model.current_target;

            // apply the changes to the real model
            scope.save = function(){
                scope.loader = true;
                if(scope.model) {
                    //console.log('scope.model '+JSON.stringify(scope.model)+' '+JSON.stringify(scope.localModel));
                    if(!scope.localModel){
                        scope.localModel = scope.model.current_target
                        scope.toggle();
                        scope.loader = false;
                        return;
                    }else if(scope.localModel < scope.model.achieved){
                        notify({
                            message: 'Please set target more the the current achieved',
                            classes: 'alert-warning',
                            duration: 3000
                        });
                        scope.model.current_target = scope.model.achieved;
                        scope.localModel = scope.model.achieved;
                    }else{
                        scope.model.current_target =  scope.localModel;
                    }
                    scope.model.survey_id =  $rootScope.newId;
                    scope.model.oldValue = scope.preVal;
                    scope.model.newValue = scope.localModel;
                    createSurvey.updateCurrentlyOpenQuota(scope.model).then(function(res){
                        scope.loader = false;
                        var updatedValue = res.data.updateVal;
                        scope.model.currently_open = updatedValue.newCurrentOpen;
                        scope.model.sup_currently_open = updatedValue.newSupCurrentlyOpen;
                        scope.model.remaining = updatedValue.newRemaining;
                        scope.model.current_target = updatedValue.newCurrentTarget;
                        scope.toggle();
                    },
                    function(err) {
                        scope.loader = false;
                        console.log("err to update");
                    });
                }
            };

            // don't apply changes
            scope.cancel = function(){
                scope.localModel = scope.model.current_target;
                scope.toggle();
            }

            /*
             * toggles the editState of our field
             */
            scope.toggle = function () {
                scope.localModel = scope.model.current_target;
                scope.preVal = scope.model.current_target;
            
                scope.editState = !scope.editState;
                var x1 = element[0].querySelector("."+scope.type);
                console.log('scope.type '+scope.type);
                $timeout(function(){
                    // focus if in edit, blur if not. some IE will leave cursor without the blur
                    scope.editState ? x1.focus() : x1.blur();
                }, 0);
            }

        }
    }
}]);
/**
 * Created by Parveen on 5/4/2016.
 */

angular.module('pureSpectrumApp')

.factory('encodeDecodeFactory', function() {
  return {
    encode: function(data) {
      return encodeURIComponent(JSON.stringify(data));
    },
    decode: function(searchString) {
      return JSON.parse(decodeURIComponent(searchString));
    }
  };
});

angular.module('pureSpectrumApp')
.directive('incomeRow', ['$filter', '$document', '$compile', '$parse',function ($filter, $document, $compile, $parse) {

        return {
            restrict: 'AE',
            replace: true,
            template: '<tr> <td class="td-th-class"><input type="number" class=" text-line text-center"   placeholder="" onkeypress="return validateCompletes(event);" ng-blur="checkIncomeMinQuotaModel(incomeTempArr[$index].min, $index )" ng-model="incomeTempArr[$index].min" ng-class=" {  \'field-error_incmage\': incomeTempArr[$index].min>incomeTempArr[$index].max || incomeTempArr[$index].min.length>incomeTempArr[$index].max.length || incomeTempArr[$index].min<0}" ng-disabled="$index>0">&nbsp;&nbsp; &nbsp;<span>to</span>&nbsp;&nbsp; <input type="number" class=" text-line text-center"  placeholder="" onkeypress="return validateCompletes(event);" ng-model="incomeTempArr[$index].max" ng-blur="checkIncomeMaxQuotaModel(incomeTempArr[$index].max, $index )" ng-class=" {  \'field-error_incmage\': !incomeTempArr[$index].max || incomeTempArr[$index].min>incomeTempArr[$index].max || incomeTempArr[$index].max<0 || incomeTempArr[$index].max > houseHoldIncome.max}" ng-disabled="$index>0" ng-model-options="{ debounce: 700 }" ng-change="getAchievedForAgeIncome(srvId, \'hhi\', incomeTempArr[$index].min, incomeTempArr[$index].max, $index)"> </td>' +
            '<td class="td-th-class"> <input type="number" class=" text-line" placeholder="" onkeypress="return validateCompletes(event);" ng-model="incomeTempArr[$index].number" ng-keyup="incomeNumberChange(incomeTempArr, $index, incomeQuotaFlag.incomeFlxValue)" >&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <input type="text" class=" text-line" maxlength="3" onkeypress="return validateCompletes(event);" ng-model="incomeTempArr[$index].per"   ng-keyup="incomePerChange(incomeTempArr[$index].number, $index, incomeQuotaFlag.incomeFlxValue)">% </td>' +
            // '<td class="td-th-class"> <span><label class="status pull-left quota-flex-btn"><input type="checkbox" name="my-checkbox" checked id="inc{{$index}}"  ng-click="setIncomeFlex($event,$index)"><div class="slider round incomer{{$index}}"></div></label>&nbsp; &nbsp; by &nbsp; &nbsp; <input type="text" class="text-line" maxlength="2"  onkeypress="return validateCompletes(event)" ng-model="incomeTempArr[$index].flexPer" ng-keyup="incomePercentageChange(incomeTempArr[$index].flexPer , $index)" ng-readonly="!properties.numberOfCompletes || data.incFlx == false"><span>%</span> </span> </td>' +
            '<td class="td-th-class"> <input type="number" class="text-line" onkeypress="return validateCompletes(event) " ng-model="incomeTempArr[$index].minimum" ng-readonly="true" ng-disabled="$index>0" > </td> <td class="td-th-class"> <input type="number" class="text-line" onkeypress="return validateCompletes(event)" ng-model="incomeTempArr[$index].maximum" ng-readonly="true" ng-disabled="$index>0"></td> <td class="td-th-class"><input type="number" ng-if="srvId" class="text-line" onkeypress="return validateQty(event)" ng-model="incomeTempArr[$index].achieved" ng-readonly="true" ng-disabled="$index>0"> <span ng-if="$index==0"> <button class="btn btn-link btn-primary"  ng-click="addIncomeNewRow($index)"><span class="glyphicon glyphicon-plus"></span> Click to Add</button></span> <span ng-if="$index>0"> <button class="btn btn-link btn-default"  ng-click="removeIncomeNewRow($index)"><span class="glyphicon glyphicon-remove"></span></button></span></td></tr>',
            link: function(scope, element, attrs) {

            }

        }

    }]);

/**
 * ng-flags module
 * Turns country ISO code to flag thumbnail.
 *
 * Author: asafdav - https://github.com/asafdav
 */
angular.module('ngFlag', []).
directive('flag', function() {
  return {
    restrict: 'E',
    replace: true,
    template: '<span class="f{{ size }}"><span class="flag {{ country }}"></span></span>',
    scope: {
      country: '@',
      size: '@'
    },
    link: function(scope, elm, attrs) {
      // Default flag size
      scope.size = 16;

      scope.$watch('country', function(value) {
        scope.country = angular.lowercase(value);
      });

      scope.$watch('size', function(value) {
        scope.size = value;
      });
    }
  };
});
/**
 * Reconciliation file upload module
 */


 angular.module('pureSpectrumApp')

.directive('fileUpload', ['$parse', function ($parse) {
    return {
        restrict: 'AE',
    
        scope: {
            file: '='
        },
        link: function(scope, el, attrs){
            el.bind('change', function(event){
                var files = event.target.files;
                var file = files[0];
                scope.file = file ? file.name : undefined;
                scope.$apply();
            });
        }
    };
}]);

angular.module('pureSpectrumApp')

.directive('reportDropdownMultiselect', ['$filter', '$document', '$compile', '$parse',

function ($filter, $document, $compile, $parse) {

    return {
        restrict: 'AE',
        scope: {
            selectedModel: '=',
            options: '=',
            extraSettings: '=',
            events: '=',
            searchFilter: '=?',
            translationTexts: '=',
            groupBy: '@',
            modelName: '='
        },
        template: function (element, attrs) {
            var checkboxes = attrs.checkboxes ? true : false;
            var groups = attrs.groupBy ? true : false;

            var template = '<div class="multiselect-parent btn-group dropdown-multiselect" style="width: 100%;">';
            template += '<button type="button" class="dropdown-toggle dropdown-tabButton" style="height: 64px;width: 100%; text-align: left; font-size: 13px;color:#565a5c;font-family:OpenSans-Semibold;" ng-class="settings.buttonClasses" ng-click="toggleDropdown()" style="width:200px; height:70px;">{{getButtonText()}}&nbsp;<span  style=" border-left: 4px solid transparent;border-right: 3px solid transparent; border-top: 4px solid #000000;display: inline-block;height: 0;opacity:0.6;vertical-align: middle;width:7px; position: absolute;left: 90%; top: 50%;" ></span></button>';
            template += '<ul class="dropdown-menu dropdown-menu-form" ng-style="{display: open ? \'block\' : \'none\', height : settings.scrollable ? settings.scrollableHeight : \'auto\' }" style="overflow: scroll" >';
            template += '<li ng-hide="!settings.showCheckAll || settings.selectionLimit > 0"><a data-ng-click="selectAll()"><span class="glyphicon glyphicon-ok"></span>  {{texts.checkAll}}</a>';
            template += '<li ng-show="settings.showUncheckAll"><a data-ng-click="deselectAll();"><span class="glyphicon glyphicon-remove"></span>   {{texts.uncheckAll}}</a></li>';
            template += '<li ng-hide="(!settings.showCheckAll || settings.selectionLimit > 0) && !settings.showUncheckAll" class="divider"></li>';
            template += '<li ng-show="settings.enableSearch"><div class="dropdown-header"><input type="text" class="form-control" style="width: 100%;" ng-model="searchFilter" placeholder="{{texts.searchPlaceholder}}" /></li>';
            template += '<li ng-show="settings.enableSearch" class="divider"></li>';

            if (groups) {
                template += '<li ng-repeat-start="option in orderedItems | filter: searchFilter" ng-show="getPropertyForObject(option, settings.groupBy) !== getPropertyForObject(orderedItems[$index - 1], settings.groupBy)" role="presentation" class="dropdown-header">{{ getGroupTitle(getPropertyForObject(option, settings.groupBy)) }}</li>';
                template += '<li ng-repeat-end role="presentation">';
            } else {
                template += '<li role="presentation" ng-repeat="option in options | filter: searchFilter">';
            }

            template += '<a role="menuitem" tabindex="-1" ng-click="setSelectedItem(getPropertyForObject(option,settings.idProp))">';

            if (checkboxes) {
                template += '<div class="checkbox"><label><input class="checkboxInput" type="checkbox" ng-click="checkboxClick($event, getPropertyForObject(option,settings.idProp))" ng-checked="isChecked(getPropertyForObject(option,settings.idProp))" /> {{getPropertyForObject(option, settings.displayProp)}}</label></div></a>';
            } else {
                template += '<span data-ng-class="{\'glyphicon glyphicon-ok\': isChecked(getPropertyForObject(option,settings.idProp))}"></span> {{getPropertyForObject(option, settings.displayProp)}}</a>';
            }

            template += '</li>';

            template += '<li class="divider" ng-show="settings.selectionLimit > 1"></li>';
            template += '<li role="presentation" ng-show="settings.selectionLimit > 1"><a role="menuitem">{{selectedModel.length}} {{texts.selectionOf}} {{settings.selectionLimit}} {{texts.selectionCount}}</a></li>';

            template += '</ul>';
            template += '</div>';

            element.html(template);
        },
        link: function ($scope, $element, $attrs) {
            var $dropdownTrigger = $element.children()[0];

            $scope.toggleDropdown = function () {
                $scope.open = !$scope.open;
            };

            $scope.checkboxClick = function ($event, id) {
                $scope.setSelectedItem(id);
                $event.stopImmediatePropagation();
            };

            $scope.externalEvents = {
                onItemSelect: angular.noop,
                onItemDeselect: angular.noop,
                onSelectAll: angular.noop,
                onDeselectAll: angular.noop,
                onInitDone: angular.noop,
                onMaxSelectionReached: angular.noop
            };

            $scope.settings = {
                dynamicTitle: true,
                scrollable: false,
                scrollableHeight: '300px',
                closeOnBlur: true,
                displayProp: 'name',
                idProp: 'id',
                externalIdProp: 'id',
                enableSearch: false,
                selectionLimit: 0,
                showCheckAll: false,
                showUncheckAll: true,
                closeOnSelect: false,
                buttonClasses: 'btn btn-default',
                closeOnDeselect: false,
                groupBy: $attrs.groupBy || undefined,
                groupByTextProvider: null,
                smartButtonMaxItems: 0,
                smartButtonTextConverter: angular.noop
            };

            $scope.texts = {
                checkAll: 'Select All',
                uncheckAll: 'Clear All',
                selectionCount: 'Selected',
                selectionOf: '/',
                searchPlaceholder: 'Search...',
                buttonDefaultText: 'All',
                dynamicButtonTextSuffix: 'All'
            };

            $scope.searchFilter = $scope.searchFilter || '';

            if (angular.isDefined($scope.settings.groupBy)) {
                $scope.$watch('options', function (newValue) {
                    if (angular.isDefined(newValue)) {
                        $scope.orderedItems = $filter('orderBy')(newValue, $scope.settings.groupBy);
                    }
                });
            }

            angular.extend($scope.settings, $scope.extraSettings || []);
            angular.extend($scope.externalEvents, $scope.events || []);
            angular.extend($scope.texts, $scope.translationTexts);

            $scope.singleSelection = $scope.settings.selectionLimit === 1;

            function getFindObj(id) {
                var findObj = {};

                if ($scope.settings.externalIdProp === '') {
                    findObj[$scope.settings.idProp] = id;
                } else {
                    findObj[$scope.settings.externalIdProp] = id;
                }

                return findObj;
            }

            function clearObject(object) {
                for (var prop in object) {
                    delete object[prop];
                }
            }

            if ($scope.singleSelection) {
                if (angular.isArray($scope.selectedModel) && $scope.selectedModel.length === 0) {
                    clearObject($scope.selectedModel);
                }
            }

            if ($scope.settings.closeOnBlur) {
                $document.on('click', function (e) {
                    var target = e.target.parentElement;
                    var parentFound = false;

                    while (angular.isDefined(target) && target !== null && !parentFound) {
                        if (_.contains(target.className.split(' '), 'multiselect-parent') && !parentFound) {
                            if (target === $dropdownTrigger) {
                                parentFound = true;
                            }
                        }
                        target = target.parentElement;
                    }

                    if (!parentFound) {
                        $scope.$apply(function () {
                            $scope.open = false;
                        });
                    }
                });
            }

            $scope.getGroupTitle = function (groupValue) {
                if ($scope.settings.groupByTextProvider !== null) {
                    return $scope.settings.groupByTextProvider(groupValue);
                }

                return groupValue;
            };

            $scope.getButtonText = function () {
                if ($scope.settings.dynamicTitle && ($scope.selectedModel && $scope.selectedModel.length > 0 || (angular.isObject($scope.selectedModel) && _.keys($scope.selectedModel).length > 0))) {
                    if ($scope.settings.smartButtonMaxItems > 0) {
                        var itemsText = [];

                        angular.forEach($scope.options, function (optionItem) {
                            if ($scope.isChecked($scope.getPropertyForObject(optionItem, $scope.settings.idProp))) {
                                var displayText = $scope.getPropertyForObject(optionItem, $scope.settings.displayProp);
                                var converterResponse = $scope.settings.smartButtonTextConverter(displayText, optionItem);

                                itemsText.push(converterResponse ? converterResponse : displayText);
                            }
                        });

                        if ($scope.selectedModel.length > $scope.settings.smartButtonMaxItems) {
                            itemsText = itemsText.slice(0, $scope.settings.smartButtonMaxItems);
                            itemsText.push('...');
                        }

                        return itemsText.join(', ');
                    } else {
                        var totalSelected;

                        if ($scope.singleSelection) {
                            totalSelected = ($scope.selectedModel !== null && angular.isDefined($scope.selectedModel[$scope.settings.idProp])) ? 1 : 0;
                        } else {
                            totalSelected = angular.isDefined($scope.selectedModel) ? $scope.selectedModel.length : 0;
                        }

                        if($scope.selectedModel && $scope.options && $scope.selectedModel.length < $scope.options.length){
                            $scope.texts.dynamicButtonTextSuffix = 'selected';
                            return totalSelected + ' ' + $scope.texts.dynamicButtonTextSuffix
                        }

                        if (totalSelected === 0) {
                            $scope.settings.showCheckAll = true;
                            return $scope.texts.buttonDefaultText;
                        } else {
                            $scope.texts.dynamicButtonTextSuffix = 'All';
                            $scope.settings.showCheckAll = false;
                            $scope.settings.showUncheckAll = true;
                            return  $scope.texts.dynamicButtonTextSuffix;
                        }
                    }
                } else {
                    $scope.texts.dynamicButtonTextSuffix = 'All';
                    $scope.settings.showCheckAll = true;
                    $scope.settings.showUncheckAll = false;
                    return $scope.texts.buttonDefaultText;
                }
            };

            $scope.getPropertyForObject = function (object, property) {
                if (angular.isDefined(object) && object.hasOwnProperty(property)) {
                    return object[property];
                }

                return '';
            };

            $scope.selectAll = function () {
                $scope.deselectAll(false);
                $scope.settings.showUncheckAll = true;
                $scope.settings.showCheckAll = false;
                $scope.externalEvents.onSelectAll();

                angular.forEach($scope.options, function (value) {
                    $scope.setSelectedItem(value[$scope.settings.idProp], true);
                });
            };

            $scope.deselectAll = function (sendEvent) {
                sendEvent = sendEvent || true;
                $scope.settings.showCheckAll = true;
                $scope.settings.showUncheckAll = false;

                if (sendEvent) {
                    $scope.externalEvents.onDeselectAll();
                }

                if ($scope.singleSelection) {
                    clearObject($scope.selectedModel);
                } else {

                    $scope.selectedModel.splice(0, $scope.selectedModel.length);
                }
                $scope.texts.buttonDefaultText =  'Select';

            };

            $scope.setSelectedItem = function (id, dontRemove) {
                var findObj = getFindObj(id);
                var finalObj = null;

                if ($scope.settings.externalIdProp === '') {
                    finalObj = _.find($scope.options, findObj);
                } else {
                    finalObj = findObj;
                }

                if ($scope.singleSelection) {
                    clearObject($scope.selectedModel);
                    angular.extend($scope.selectedModel, finalObj);
                    $scope.externalEvents.onItemSelect(finalObj);
                    if ($scope.settings.closeOnSelect) $scope.open = false;

                    return;
                }

                dontRemove = dontRemove || false;

                var exists = _.findIndex($scope.selectedModel, findObj) !== -1;

                if (!dontRemove && exists) {
                    $scope.selectedModel.splice(_.findIndex($scope.selectedModel, findObj), 1);
                    $scope.externalEvents.onItemDeselect(findObj);
                } else if (!exists && ($scope.settings.selectionLimit === 0 || $scope.selectedModel.length < $scope.settings.selectionLimit)) {
                    $scope.selectedModel.push(finalObj);
                    $scope.externalEvents.onItemSelect(finalObj);
                }
                //PD-1556

                if($scope.modelName == 'language') {
                    _.each($scope.selectedModel, function(snglOptn) {
                        var matchObj = _.findWhere($scope.options, {id:snglOptn.id});
                        if(matchObj) {
                           snglOptn["l_id"] = matchObj.l_id;
                           snglOptn["name"] = matchObj.name;
                        }
                    })
                }
                if ($scope.settings.closeOnSelect) $scope.open = false;
            };

            $scope.isChecked = function (id) {
                if ($scope.singleSelection) {
                    return $scope.selectedModel !== null && angular.isDefined($scope.selectedModel[$scope.settings.idProp]) && $scope.selectedModel[$scope.settings.idProp] === getFindObj(id)[$scope.settings.idProp];
                }

                return _.findIndex($scope.selectedModel, getFindObj(id)) !== -1;
            };

            $scope.externalEvents.onInitDone();
        }
    };
}]);
/*
 *Created by Amar on 27/2/2017. PD-821
 */
 angular.module('pureSpectrumApp')
.directive('ngEnter', function () {
    return function (scope, element, attrs) {
        element.bind("keydown keypress", function (event) {
            if(event.which === 13) {
                scope.$apply(function (){
                    scope.$eval(attrs.ngEnter);
                });
                event.preventDefault();
            }
        });
    };
});

angular.module('pureSpectrumApp')
.directive('decimalPlaces',function(){
    return {
        link:function(scope,ele,attrs){
            ele.bind('keypress',function(e){
                var oldVal=$(this).val()+(e.charCode!==0?String.fromCharCode(e.charCode):'');
                var newVal = ele[0].innerText + oldVal;
                var splitArray = newVal.split(".");
                if(newVal.search(/(.*)\.[0-9][0-9]/)===0 && splitArray[1].length > 2){
                    e.preventDefault();
                }
            });
        }
    };
});
/**
 * Created by Dinesh on 01/05/2017
 */

angular.module('pureSpectrumApp')
    .filter('splitAndJoinBy', function() {
        return function(input, splitChar, joinChar) {
            return input.split(splitChar).join(joinChar);
        }
    })
    .filter('suppConversion', function(){
        return function(value, condition1, condition2){
            if(condition1 && condition2){
                if(value > 100){
                    return '100%';
                }else{
                    return Math.round(value)+'%';
                }
            }else{
                return '-';
            }
        }
    })
    .filter('breakArrayAndJoin', function() {
        return function(input) {
            var retArr = [];
            var units = {
                "321" : '$', // USA Dollor
                "322" : '€', // Germany EURO
                "323" : '£', //UK Pond
                "324" : '$', //AU Dollor
                "325" : '¥', // Japan Yen
                "326" : '₱', // Phillipines peso
                "327" : '$', // Mexican Peso
                "328" : '$', // Argentina Peso
                "329" : '$', // Chile Peso
                "330" : '$', // Columbian Peso
                "331" : '¥', // Chinese Yuan
                "332" : '₹', // Indian Rupees
                "333" : 'zł', //Poland currency Polish Zloty
                "334" : '₩', //Korea currency
                "335" : '$', //Canadian Dollar
                "336" : "₦", // Nigerian Naira
                "337" : "Rp", // Indonesian rupiah
                "338" : "R$", // Brazilian Real
                "339" : "₫",  // Vietnami Dong
                "340" : "₴",   // Ukrainian Hryvnia
                "341" : "€",   // Ireland Euro
                "342" : "HK$",   // Hong Kong $
                "343" : "ر.س", // Saudi Riyal
                "344" : "NT$", // New Taiwan Dollar
                "345" : "د.إ", // AED Dirham UAE
                "346" : "RM", // malaysian Ringgit (MYR)
                "347" : "€", // netherlands Euro (EUR)
                "348" : "€", // Belgium Euro (EUR)
                "349" : "KR", // Norwegian krone (NOK)
                "350" : "KR", // Danish krone (DKK)
                "351" : "R", // Rand (ZAR)
                "352" : "KR", // Krona (SEK)
                "353" : "₺", // Turkish Lira (TRY)
                "311" : 'yr', // Years
                "312" : 'mth', // Months
                "313" : 'day', // Days,
                "314" : 'hr', // Hours
                "401" : 'movies', // movies
                "402" : 'tv hours', // hours
                "403" : 'nights',    // Hotel Nights
                "404" : 'trips'    // Hotel Nights
            }
            angular.forEach(input, function(item) {
               if(item.hasOwnProperty('name')) {
                    retArr.push(item.name);
               } else if(item.hasOwnProperty('from') && item.hasOwnProperty('to')){
                    if(parseInt(item.units) >= 321 && parseInt(item.units) <= 324){
                        retArr.push(units[item.units]+parseInt(item.from)+' - '+units[item.units]+parseInt(item.to));
                    }else{
                        retArr.push(parseInt(item.from)+' '+units[item.units]+' - '+parseInt(item.to)+' '+units[item.units]);
                    }
               }
            })
            return retArr.toString().split(',').join(', ');
        }
    })

    .filter('convertRangeWithUnits', function(){
        return function(rangeSet) {
            var retVal = new String();
            var units = {
                "321" : '$', // USA Dollor
                "322" : '€', // Germany EURO
                "323" : '£', //UK Pond
                "324" : '$', //AU Dollor
                "325" : '¥', // Japan Yen
                "326" : '₱', // Phillipines peso
                "327" : '$', // Mexican Peso
                "328" : '$', // Argentina Peso
                "329" : '$', // Chile Peso
                "330" : '$', // Columbian Peso
                "331" : '¥', // Chinese Yuan
                "332" : '₹', // Indian Rupees
                "333" : 'zł', //Poland currency Polish Zloty
                "334" : '₩', //Korea currency
                "335" : '$', //Canadian Dollar
                "336" : "₦", // Nigerian Naira
                "337" : "Rp", // Indonesian rupiah
                "338" : "R$", // Brazilian Real
                "339" : "₫",  // Vietnami Dong
                "340" : "₴",   // Ukrainian Hryvnia
                "341" : "€",   // Ireland Euro
                "342" : "HK$",   // Hong Kong $
                "343" : "ر.س", // Saudi Riyal
                "344" : "NT$", // New Taiwan Dollar
                "345" : "د.إ", // AED Dirham UAE
                "346" : "RM", // malaysian Ringgit (MYR)
                "347" : "€", // netherlands Euro (EUR)
                "348" : "€", // Belgium Euro (EUR)
                "349" : "KR", // Norwegian krone (NOK)
                "350" : "KR", // Danish krone (DKK)
                "351" : "R", // Rand (ZAR)
                "352" : "KR", // Krona (SEK)
                "353" : "₺", // Turkish Lira (TRY)
                "311" : 'yr', // Years
                "312" : 'mth', // Months
                "313" : 'day', // Days,
                "314" : 'hr', // Hours
                "401" : 'movies', // movies
                "402" : 'tv hours', // hours
                "403" : 'nights',    // Hotel Nights
                "404" : 'trips'    // Hotel Nights
            }
            if(parseInt(rangeSet.units) >= 321 && parseInt(rangeSet.units) <= 324){
                retVal = units[rangeSet.units]+parseInt(rangeSet.from)+' - '+units[rangeSet.units]+parseInt(rangeSet.to);
            }else{
                retVal = parseInt(rangeSet.from)+' '+units[rangeSet.units]+' - '+parseInt(rangeSet.to)+' '+units[rangeSet.units];
            }
            return retVal;
        }
    })

    .filter('rangeCharUnit', function() {
        return function(input) {
            var units = {
                "321" : '$', // USA Dollor
                "322" : '€', // Germany EURO
                "323" : '£', //UK Pond
                "324" : '$', //AU Dollor
                "325" : '¥', // Japan Yen
                "326" : '₱', // Phillipines peso
                "327" : '$', // Mexican Peso
                "328" : '$', // Argentina Peso
                "329" : '$', // Chile Peso
                "330" : '$', // Columbian Peso
                "331" : '¥', // Chinese Yuan
                "332" : '₹', // Indian Rupees
                "333" : 'zł', //Poland currency Polish Zloty
                "334" : '₩', //Korea currency
                "335" : '$', //Canadian Dollar
                "336" : "₦", // Nigerian Naira
                "337" : "Rp", // Indonesian rupiah
                "338" : "R$", // Brazilian Real
                "339" : "₫",  // Vietnami Dong
                "340" : "₴",   // Ukrainian Hryvnia
                "341" : "€",   // Ireland Euro
                "342" : "HK$",   // Hong Kong $
                "343" : "ر.س", // Saudi Riyal
                "344" : "NT$", // New Taiwan Dollar
                "345" : "د.إ", // AED Dirham UAE
                "346" : "RM", // malaysian Ringgit (MYR)
                "347" : "€", // netherlands Euro (EUR)
                "348" : "€", // Belgium Euro (EUR)
                "349" : "KR", // Norwegian krone (NOK)
                "350" : "KR", // Danish krone (DKK)
                "351" : "R", // Rand (ZAR)
                "352" : "KR", // Swedan Krona (SEK)
                "353" : "₺", // Turkish Lira (TRY)
                "311" : 'yr', // Years
                "312" : 'month', // Months
                "313" : 'day', // Days,
                "314" : 'hr', // Hours
                "401" : 'movies', // movies
                "402" : 'tv hours', // hours
                "403" : 'nights',    // Hotel Nights
                "404" : 'trips'    // Hotel Nights
            }
            if(input){
                return units[input.toString()];
            }
        }
    })
    .filter('isObjEmpty', [function() {
        return function(object) {
            return angular.equals({}, object);
    }}])

    .filter('removeUnderscore', [function(){
        return function(input){
            return input.replace(/_/g,' ');
        }
    }])

    .filter('isObjKeysEmpty', [function() {
        return function(object) {
            var empty = false;
            if(!angular.equals({}, object)){
                _.each(_.keys(object), function(key){
                    if(object[key].length > 0){
                        empty = true;
                    }
                });
                if(empty){
                    return false;
                }else{
                    return true;
                }
            }
    }}])

    .filter('convertArrToStr', function() {
        return function(object) {
            if(object)
            return object.toString();
        }
    })
    .filter('capitalize', function() {
        return function(input) {
          return (!!input) ? input.charAt(0).toUpperCase() + input.substr(1).toLowerCase() : '';
        }
    })
    .filter('isNaNThenZero', function() {
        return function(object) {
            if(isNaN(object)){
                return 0;
            }else{
                return object;
            }
        }
    })
    .filter('commaSepratedNumber', function() {
        return function(numberVal) {
            
            if(isNaN(parseInt(numberVal))) {
                var returnNum = 0;
                return returnNum.toFixed(2);
            }
            else {
                numberVal = parseFloat(numberVal).toFixed(2);
                return numberVal.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
            }
        }
    });
